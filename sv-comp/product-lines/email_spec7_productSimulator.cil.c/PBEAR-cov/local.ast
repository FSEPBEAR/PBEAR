typedef unsigned char __CPROVER_bool;
typedef unsigned int __CPROVER_size_t;
typedef unsigned int size_t;
typedef unsigned int time_t;
typedef unsigned short int wchar_t;
void _iv_() {signed int retValue_acc;
signed int tmp;
__iv__current_func_call = 0;
select_helpers();
__iv__current_func_call = 1;
select_features();
__iv__current_func_call = 2;
tmp=valid_product();
!(tmp != 0);
__iv__current_func_call = 3;
setup();
__iv__current_func_call = 4;
test();
return retValue_acc;
signed int privkey;
__iv__current_func_call = 5;
privkey=getClientPrivateKey(client);
privkey != 0;
__iv__current_func_call = 6;
setEmailIsSigned(msg, 1);
__iv__current_func_call = 7;
setEmailSignKey(msg, privkey);
signed int retValue_acc;
!(handle == 1);
retValue_acc = __ste_ClientKeyring_size0;
return retValue_acc;
!(handle == 2);
retValue_acc = __ste_ClientKeyring_size1;
return retValue_acc;
!(handle == 3);
retValue_acc = __ste_ClientKeyring_size2;
return retValue_acc;
retValue_acc = 0;
return retValue_acc;
signed int retValue_acc;
!(__ste_Client_counter < 3);
__ste_Client_counter = __ste_Client_counter + 1;
retValue_acc = __ste_Client_counter;
return retValue_acc;
retValue_acc = -1;
return retValue_acc;
char *retValue_acc;
void *__cil_tmp3;
!(handle == 1);
retValue_acc = __ste_email_body0;
return retValue_acc;
!(handle == 2);
retValue_acc = __ste_email_body1;
return retValue_acc;
__cil_tmp3 = (void *)0;
retValue_acc = (char *)__cil_tmp3;
return retValue_acc;
signed int retValue_acc;
!(__ste_Email_counter < 2);
__ste_Email_counter = __ste_Email_counter + 1;
retValue_acc = __ste_Email_counter;
return retValue_acc;
retValue_acc = -1;
return retValue_acc;
signed int retValue_acc;
!(__SELECTED_FEATURE_Encrypt != 0);
__iv__current_func_call = 194;
retValue_acc=isReadable__role__Encrypt(msg);
return retValue_acc;
__iv__current_func_call = 195;
retValue_acc=isReadable__before__Encrypt(msg);
return retValue_acc;
signed int email;
__iv__current_func_call = 192;
email=createEmail(0, receiver);
__iv__current_func_call = 193;
outgoing(sender, email);
signed int retValue_acc;
!(handle == 1);
retValue_acc = __ste_email_to0;
return retValue_acc;
!(handle == 2);
retValue_acc = __ste_email_to1;
return retValue_acc;
retValue_acc = 0;
return retValue_acc;
signed int retValue_acc;
!(handle == 1);
!(index == 0);
retValue_acc = __ste_Client_AddressBook0_Alias0;
return retValue_acc;
!(index == 1);
retValue_acc = __ste_Client_AddressBook0_Alias1;
return retValue_acc;
!(index == 2);
retValue_acc = __ste_Client_AddressBook0_Alias2;
return retValue_acc;
retValue_acc = 0;
return retValue_acc;
!(handle == 2);
!(index == 0);
retValue_acc = __ste_Client_AddressBook1_Alias0;
return retValue_acc;
!(index == 1);
retValue_acc = __ste_Client_AddressBook1_Alias1;
return retValue_acc;
!(index == 2);
retValue_acc = __ste_Client_AddressBook1_Alias2;
return retValue_acc;
retValue_acc = 0;
return retValue_acc;
!(handle == 3);
!(index == 0);
retValue_acc = __ste_Client_AddressBook2_Alias0;
return retValue_acc;
!(index == 1);
retValue_acc = __ste_Client_AddressBook2_Alias1;
return retValue_acc;
!(index == 2);
retValue_acc = __ste_Client_AddressBook2_Alias2;
return retValue_acc;
retValue_acc = 0;
return retValue_acc;
retValue_acc = 0;
return retValue_acc;
signed int tmp;
signed int tmp___0;
signed int tmp___1;
signed int tmp___2;
char *__cil_tmp6;
char *__cil_tmp7;
char *__cil_tmp8;
char *__cil_tmp9;
__iv__current_func_call = 182;
tmp=getEmailId(msg);
__cil_tmp6 = (char *)"ID:\n  %i\n";
printf(__cil_tmp6, tmp);
__iv__current_func_call = 184;
tmp___0=getEmailFrom(msg);
__cil_tmp7 = (char *)"FROM:\n  %i\n";
printf(__cil_tmp7, tmp___0);
__iv__current_func_call = 186;
tmp___1=getEmailTo(msg);
__cil_tmp8 = (char *)"TO:\n  %i\n";
printf(__cil_tmp8, tmp___1);
__iv__current_func_call = 188;
tmp___2=isReadable(msg);
__cil_tmp9 = (char *)"IS_READABLE\n  %i\n";
printf(__cil_tmp9, tmp___2);
signed int retValue_acc;
retValue_acc = msg;
return retValue_acc;
signed int retValue_acc;
!(handle == 1);
retValue_acc = __ste_client_privateKey0;
return retValue_acc;
!(handle == 2);
retValue_acc = __ste_client_privateKey1;
return retValue_acc;
!(handle == 3);
retValue_acc = __ste_client_privateKey2;
return retValue_acc;
retValue_acc = 0;
return retValue_acc;
signed int retValue_acc;
!(handle == 1);
retValue_acc = __ste_client_autoResponse0;
return retValue_acc;
!(handle == 2);
retValue_acc = __ste_client_autoResponse1;
return retValue_acc;
!(handle == 3);
retValue_acc = __ste_client_autoResponse2;
return retValue_acc;
retValue_acc = -1;
return retValue_acc;
signed int retValue_acc;
signed int client;
__iv__current_func_call = 179;
client=initClient();
retValue_acc = client;
return retValue_acc;
signed int retValue_acc;
!(handle == 1);
retValue_acc = __ste_client_outbuffer0;
return retValue_acc;
!(handle == 2);
retValue_acc = __ste_client_outbuffer1;
return retValue_acc;
!(handle == 3);
retValue_acc = __ste_client_outbuffer2;
return retValue_acc;
retValue_acc = 0;
return retValue_acc;
char *retValue_acc;
void *__cil_tmp3;
!(handle == 1);
retValue_acc = __ste_email_subject0;
return retValue_acc;
!(handle == 2);
retValue_acc = __ste_email_subject1;
return retValue_acc;
__cil_tmp3 = (void *)0;
retValue_acc = (char *)__cil_tmp3;
return retValue_acc;
signed int retValue_acc;
!(handle == 1);
!(index == 0);
retValue_acc = __ste_Client_AddressBook0_Address0;
return retValue_acc;
!(index == 1);
retValue_acc = __ste_Client_AddressBook0_Address1;
return retValue_acc;
!(index == 2);
retValue_acc = __ste_Client_AddressBook0_Address2;
return retValue_acc;
retValue_acc = 0;
return retValue_acc;
!(handle == 2);
!(index == 0);
retValue_acc = __ste_Client_AddressBook1_Address0;
return retValue_acc;
!(index == 1);
retValue_acc = __ste_Client_AddressBook1_Address1;
return retValue_acc;
!(index == 2);
retValue_acc = __ste_Client_AddressBook1_Address2;
return retValue_acc;
retValue_acc = 0;
return retValue_acc;
!(handle == 3);
!(index == 0);
retValue_acc = __ste_Client_AddressBook2_Address0;
return retValue_acc;
!(index == 1);
retValue_acc = __ste_Client_AddressBook2_Address1;
return retValue_acc;
!(index == 2);
retValue_acc = __ste_Client_AddressBook2_Address2;
return retValue_acc;
retValue_acc = 0;
return retValue_acc;
retValue_acc = 0;
return retValue_acc;
signed int tmp;
signed int tmp___0;
signed int tmp___1;
puts("Please enter a subject and a message body.\n");
__iv__current_func_call = 141;
sendEmail(bob, rjh);
__iv__current_func_call = 142;
tmp___1=is_queue_empty();
tmp___1 != 0;
__iv__current_func_call = 143;
tmp=get_queued_email();
__iv__current_func_call = 144;
tmp___0=get_queued_client();
__iv__current_func_call = 145;
outgoing(tmp___0, tmp);
signed int retValue_acc;
retValue_acc = queue_empty;
return retValue_acc;
signed int retValue_acc;
retValue_acc = 1;
return retValue_acc;
signed int tmp;
__iv__current_func_call = 130;
tmp=getClientId(client);
__iv__current_func_call = 131;
setEmailFrom(msg, tmp);
__iv__current_func_call = 132;
mail(client, msg);
signed int receiver;
signed int pubkey;
__iv__current_func_call = 125;
receiver=getEmailTo(msg);
__iv__current_func_call = 126;
pubkey=findPublicKey(client, receiver);
!(pubkey != 0);
__iv__current_func_call = 127;
setEmailEncryptionKey(msg, pubkey);
__iv__current_func_call = 128;
setEmailIsEncrypted(msg, 1);
__iv__current_func_call = 129;
outgoing__before__Encrypt(client, msg);
signed int retValue_acc;
!(handle == 1);
retValue_acc = __ste_email_isEncrypted0;
return retValue_acc;
!(handle == 2);
retValue_acc = __ste_email_isEncrypted1;
return retValue_acc;
retValue_acc = 0;
return retValue_acc;
signed int tmp;
signed int tmp___0;
char *__cil_tmp4;
char *__cil_tmp5;
__iv__current_func_call = 119;
printMail__before__Encrypt(msg);
__iv__current_func_call = 120;
tmp=isEncrypted(msg);
__cil_tmp4 = (char *)"ENCRYPTED\n  %d\n";
printf(__cil_tmp4, tmp);
__iv__current_func_call = 122;
tmp___0=getEmailEncryptionKey(msg);
__cil_tmp5 = (char *)"ENCRYPTION KEY\n  %d\n";
printf(__cil_tmp5, tmp___0);
signed int tmp;
__iv__current_func_call = 112;
incoming__before__AutoResponder(client, msg);
__iv__current_func_call = 113;
tmp=getClientAutoResponse(client);
!(tmp != 0);
__iv__current_func_call = 114;
autoRespond(client, msg);
signed int retValue_acc;
signed int retval;
char *__cil_tmp4;
__cil_tmp4 = (char *)"%s\n";
printf(__cil_tmp4, msg);
retValue_acc = retval;
return retValue_acc;
char *__cil_tmp1;
char *__cil_tmp2;
char *__cil_tmp3;
bob = 1;
__iv__current_func_call = 101;
setup_bob(bob);
__cil_tmp1 = (char *)"bob: %d\n";
printf(__cil_tmp1, bob);
rjh = 2;
__iv__current_func_call = 103;
setup_rjh(rjh);
__cil_tmp2 = (char *)"rjh: %d\n";
printf(__cil_tmp2, rjh);
chuck = 3;
__iv__current_func_call = 105;
setup_chuck(chuck);
__cil_tmp3 = (char *)"chuck: %d\n";
printf(__cil_tmp3, chuck);
signed int fwreceiver;
__iv__current_func_call = 97;
incoming__before__Forward(client, msg);
__iv__current_func_call = 98;
fwreceiver=getClientForwardReceiver(client);
!(fwreceiver != 0);
__iv__current_func_call = 99;
setEmailTo(msg, fwreceiver);
__iv__current_func_call = 100;
forward(client, msg);
signed int tmp;
puts("mail sent");
__iv__current_func_call = 93;
tmp=getEmailTo(msg);
__iv__current_func_call = 94;
incoming(tmp, msg);
signed int retValue_acc;
!(handle == 1);
retValue_acc = __ste_email_id0;
return retValue_acc;
!(handle == 2);
retValue_acc = __ste_email_id1;
return retValue_acc;
retValue_acc = 0;
return retValue_acc;
signed int size;
signed int receiver;
signed int second;
signed int tmp___2;
__iv__current_func_call = 78;
size=getClientAddressBookSize(client);
!(size != 0);
__iv__current_func_call = 79;
sendToAddressBook(client, msg);
puts("sending to alias in address book\n");
__iv__current_func_call = 81;
receiver=getEmailTo(msg);
puts("sending to second receipient\n");
__iv__current_func_call = 83;
second=getClientAddressBookAddress(client, 1);
__iv__current_func_call = 84;
setEmailTo(msg, second);
__iv__current_func_call = 85;
outgoing__before__AddressBook(client, msg);
__iv__current_func_call = 86;
tmp___2=getClientAddressBookAddress(client, 0);
__iv__current_func_call = 87;
setEmailTo(msg, tmp___2);
__iv__current_func_call = 88;
outgoing__before__AddressBook(client, msg);
__iv__current_func_call = 89;
outgoing__before__AddressBook(client, msg);
signed int retValue_acc;
signed int size;
signed int __cil_tmp5;
__iv__current_func_call = 72;
size=getClientAddressBookSize(handle);
!(size < 3);
__cil_tmp5 = size + 1;
__iv__current_func_call = 73;
setClientAddressBookSize(handle, __cil_tmp5);
retValue_acc = size + 1;
return retValue_acc;
retValue_acc = -1;
return retValue_acc;
signed int retValue_acc;
retValue_acc = queued_client;
return retValue_acc;
signed int retValue_acc;
retValue_acc = queued_message;
return retValue_acc;
signed int sender;
puts("sending autoresponse\n");
__iv__current_func_call = 62;
sender=getEmailFrom(msg);
__iv__current_func_call = 63;
setEmailTo(msg, sender);
__iv__current_func_call = 64;
queue(client, msg);
signed int tmp;
signed int tmp___0;
char *__cil_tmp4;
char *__cil_tmp5;
__iv__current_func_call = 56;
printMail__before__Sign(msg);
__iv__current_func_call = 57;
tmp=isSigned(msg);
__cil_tmp4 = (char *)"SIGNED\n  %i\n";
printf(__cil_tmp4, tmp);
__iv__current_func_call = 59;
tmp___0=getEmailSignKey(msg);
__cil_tmp5 = (char *)"SIGNATURE\n  %i\n";
printf(__cil_tmp5, tmp___0);
signed int tmp;
char *__cil_tmp3;
__iv__current_func_call = 53;
printMail__before__Verify(msg);
__iv__current_func_call = 54;
tmp=isVerified(msg);
__cil_tmp3 = (char *)"SIGNATURE VERIFIED\n  %d\n";
printf(__cil_tmp3, tmp);
signed int __utac__ad__arg1;
signed int tmp;
signed int tmp___0;
signed int pubkey;
signed int tmp___1;
signed int tmp___3;
signed int tmp___4;
__utac__ad__arg1 = msg;
__iv__current_func_call = 45;
__utac_acc__EncryptVerify_spec__1(__utac__ad__arg1);
__iv__current_func_call = 46;
tmp=isReadable(msg);
!(tmp != 0);
__iv__current_func_call = 47;
tmp___0=isSigned(msg);
tmp___0 != 0;
__iv__current_func_call = 48;
tmp___1=getEmailFrom(msg);
__iv__current_func_call = 49;
pubkey=findPublicKey(client, tmp___1);
!(pubkey != 0);
__iv__current_func_call = 50;
tmp___3=getEmailSignKey(msg);
__iv__current_func_call = 51;
tmp___4=isKeyPairValid(tmp___3, pubkey);
!(tmp___4 != 0);
__iv__current_func_call = 52;
setEmailIsSignatureVerified(msg, 1);
signed int retValue_acc;
!(handle == 1);
!(userid == __ste_Client_Keyring0_User0);
retValue_acc = __ste_Client_Keyring0_PublicKey0;
return retValue_acc;
!(userid == __ste_Client_Keyring0_User1);
retValue_acc = __ste_Client_Keyring0_PublicKey1;
return retValue_acc;
retValue_acc = 0;
return retValue_acc;
!(handle == 2);
!(userid == __ste_Client_Keyring1_User0);
retValue_acc = __ste_Client_Keyring1_PublicKey0;
return retValue_acc;
!(userid == __ste_Client_Keyring1_User1);
retValue_acc = __ste_Client_Keyring1_PublicKey1;
return retValue_acc;
retValue_acc = 0;
return retValue_acc;
!(handle == 3);
!(userid == __ste_Client_Keyring2_User0);
retValue_acc = __ste_Client_Keyring2_PublicKey0;
return retValue_acc;
!(userid == __ste_Client_Keyring2_User1);
retValue_acc = __ste_Client_Keyring2_PublicKey1;
return retValue_acc;
retValue_acc = 0;
return retValue_acc;
retValue_acc = 0;
return retValue_acc;
signed int op1;
signed int op2;
signed int op3;
signed int op4;
signed int op5;
signed int op6;
signed int op7;
signed int op8;
signed int op9;
signed int op10;
signed int op11;
signed int splverifierCounter;
signed int tmp;
signed int tmp___0;
signed int tmp___1;
signed int tmp___2;
signed int tmp___3;
signed int tmp___4;
signed int tmp___5;
signed int tmp___6;
signed int tmp___7;
signed int tmp___8;
signed int tmp___9;
op1 = 0;
op2 = 0;
op3 = 0;
op4 = 0;
op5 = 0;
op6 = 0;
op7 = 0;
op8 = 0;
op9 = 0;
op10 = 0;
op11 = 0;
splverifierCounter = 0;
!(1 != 0);
!(splverifierCounter < 4);
splverifierCounter = splverifierCounter + 1;
op1 != 0;
tmp___9 = __VERIFIER_nondet_signed_int();
!(tmp___9 != 0);
!(__SELECTED_FEATURE_Keys != 0);
__iv__current_func_call = 23;
bobKeyAdd();
op1 = 1;
op2 != 0;
tmp___8 = __VERIFIER_nondet_signed_int();
!(tmp___8 != 0);
!(__SELECTED_FEATURE_AutoResponder != 0);
__iv__current_func_call = 25;
rjhSetAutoRespond();
op2 = 1;
op3 != 0;
tmp___7 = __VERIFIER_nondet_signed_int();
!(tmp___7 != 0);
!(__SELECTED_FEATURE_Keys != 0);
__iv__current_func_call = 27;
rjhDeletePrivateKey();
op3 = 1;
op4 != 0;
tmp___6 = __VERIFIER_nondet_signed_int();
!(tmp___6 != 0);
!(__SELECTED_FEATURE_Keys != 0);
__iv__current_func_call = 29;
rjhKeyAdd();
op4 = 1;
op5 != 0;
tmp___5 = __VERIFIER_nondet_signed_int();
!(tmp___5 != 0);
!(__SELECTED_FEATURE_Keys != 0);
__iv__current_func_call = 31;
chuckKeyAddRjh();
op5 = 1;
op6 != 0;
tmp___4 = __VERIFIER_nondet_signed_int();
!(tmp___4 != 0);
!(__SELECTED_FEATURE_Forward != 0);
__iv__current_func_call = 33;
rjhEnableForwarding();
op6 = 1;
op7 != 0;
tmp___3 = __VERIFIER_nondet_signed_int();
!(tmp___3 != 0);
!(__SELECTED_FEATURE_Keys != 0);
__iv__current_func_call = 35;
rjhKeyChange();
op7 = 1;
op8 != 0;
tmp___2 = __VERIFIER_nondet_signed_int();
!(tmp___2 != 0);
!(__SELECTED_FEATURE_AddressBook != 0);
__iv__current_func_call = 37;
bobSetAddressBook();
op8 = 1;
op9 != 0;
tmp___1 = __VERIFIER_nondet_signed_int();
!(tmp___1 != 0);
!(__SELECTED_FEATURE_Keys != 0);
__iv__current_func_call = 39;
chuckKeyAdd();
op9 = 1;
op10 != 0;
tmp___0 = __VERIFIER_nondet_signed_int();
!(tmp___0 != 0);
!(__SELECTED_FEATURE_Keys != 0);
__iv__current_func_call = 41;
bobKeyChange();
op10 = 1;
op11 != 0;
tmp = __VERIFIER_nondet_signed_int();
!(tmp != 0);
!(__SELECTED_FEATURE_Keys != 0);
__iv__current_func_call = 43;
chuckKeyAdd();
op11 = 1;
!(1 != 0);
!(splverifierCounter < 4);
splverifierCounter = splverifierCounter + 1;
op1 != 0;
tmp___9 = __VERIFIER_nondet_signed_int();
!(tmp___9 != 0);
!(__SELECTED_FEATURE_Keys != 0);
__iv__current_func_call = 23;
bobKeyAdd();
op1 = 1;
op2 != 0;
tmp___8 = __VERIFIER_nondet_signed_int();
!(tmp___8 != 0);
!(__SELECTED_FEATURE_AutoResponder != 0);
__iv__current_func_call = 25;
rjhSetAutoRespond();
op2 = 1;
op3 != 0;
tmp___7 = __VERIFIER_nondet_signed_int();
!(tmp___7 != 0);
!(__SELECTED_FEATURE_Keys != 0);
__iv__current_func_call = 27;
rjhDeletePrivateKey();
op3 = 1;
op4 != 0;
tmp___6 = __VERIFIER_nondet_signed_int();
!(tmp___6 != 0);
!(__SELECTED_FEATURE_Keys != 0);
__iv__current_func_call = 29;
rjhKeyAdd();
op4 = 1;
op5 != 0;
tmp___5 = __VERIFIER_nondet_signed_int();
!(tmp___5 != 0);
!(__SELECTED_FEATURE_Keys != 0);
__iv__current_func_call = 31;
chuckKeyAddRjh();
op5 = 1;
op6 != 0;
tmp___4 = __VERIFIER_nondet_signed_int();
!(tmp___4 != 0);
!(__SELECTED_FEATURE_Forward != 0);
__iv__current_func_call = 33;
rjhEnableForwarding();
op6 = 1;
op7 != 0;
tmp___3 = __VERIFIER_nondet_signed_int();
!(tmp___3 != 0);
!(__SELECTED_FEATURE_Keys != 0);
__iv__current_func_call = 35;
rjhKeyChange();
op7 = 1;
op8 != 0;
tmp___2 = __VERIFIER_nondet_signed_int();
!(tmp___2 != 0);
!(__SELECTED_FEATURE_AddressBook != 0);
__iv__current_func_call = 37;
bobSetAddressBook();
op8 = 1;
op9 != 0;
tmp___1 = __VERIFIER_nondet_signed_int();
!(tmp___1 != 0);
!(__SELECTED_FEATURE_Keys != 0);
__iv__current_func_call = 39;
chuckKeyAdd();
op9 = 1;
op10 != 0;
tmp___0 = __VERIFIER_nondet_signed_int();
!(tmp___0 != 0);
!(__SELECTED_FEATURE_Keys != 0);
__iv__current_func_call = 41;
bobKeyChange();
op10 = 1;
op11 != 0;
tmp = __VERIFIER_nondet_signed_int();
!(tmp != 0);
!(__SELECTED_FEATURE_Keys != 0);
__iv__current_func_call = 43;
chuckKeyAdd();
op11 = 1;
__CPROVER_assume(FALSE);
__iv__current_func_call = 44;
bobToRjh();
signed int retValue_acc;
!(handle == 1);
!(userid == __ste_Client_AddressBook0_Alias0);
retValue_acc = 0;
return retValue_acc;
!(userid == __ste_Client_AddressBook0_Alias1);
retValue_acc = 1;
return retValue_acc;
!(userid == __ste_Client_AddressBook0_Alias2);
retValue_acc = 2;
return retValue_acc;
retValue_acc = -1;
return retValue_acc;
!(handle == 2);
!(userid == __ste_Client_AddressBook1_Alias0);
retValue_acc = 0;
return retValue_acc;
!(userid == __ste_Client_AddressBook1_Alias1);
retValue_acc = 1;
return retValue_acc;
!(userid == __ste_Client_AddressBook1_Alias2);
retValue_acc = 2;
return retValue_acc;
retValue_acc = -1;
return retValue_acc;
!(handle == 3);
!(userid == __ste_Client_AddressBook2_Alias0);
retValue_acc = 0;
return retValue_acc;
!(userid == __ste_Client_AddressBook2_Alias1);
retValue_acc = 1;
return retValue_acc;
!(userid == __ste_Client_AddressBook2_Alias2);
retValue_acc = 2;
return retValue_acc;
retValue_acc = -1;
return retValue_acc;
retValue_acc = -1;
return retValue_acc;
signed int retValue_acc;
signed int tmp;
__SELECTED_FEATURE_Encrypt != 0;
!(__SELECTED_FEATURE_Decrypt != 0);
__SELECTED_FEATURE_Decrypt != 0;
!(__SELECTED_FEATURE_Encrypt != 0);
__SELECTED_FEATURE_Encrypt != 0;
!(__SELECTED_FEATURE_Keys != 0);
__SELECTED_FEATURE_Sign != 0;
!(__SELECTED_FEATURE_Verify != 0);
__SELECTED_FEATURE_Verify != 0;
!(__SELECTED_FEATURE_Sign != 0);
__SELECTED_FEATURE_Sign != 0;
!(__SELECTED_FEATURE_Keys != 0);
!(__SELECTED_FEATURE_Base != 0);
tmp = 1;
tmp = 0;
tmp = 0;
tmp = 0;
tmp = 0;
tmp = 0;
tmp = 0;
tmp = 0;
retValue_acc = tmp;
return retValue_acc;
struct __UTAC__EXCEPTION *excep;
struct __UTAC__CFLOW_FUNC *cf;
void *tmp;
unsigned long int __cil_tmp7;
unsigned long int __cil_tmp8;
unsigned long int __cil_tmp9;
unsigned long int __cil_tmp10;
unsigned long int __cil_tmp11;
unsigned long int __cil_tmp12;
unsigned long int __cil_tmp13;
unsigned long int __cil_tmp14;
signed int (**mem_15)(signed int, signed int);
signed int *mem_16;
struct __UTAC__CFLOW_FUNC **mem_17;
struct __UTAC__CFLOW_FUNC **mem_18;
struct __UTAC__CFLOW_FUNC **mem_19;
excep = (struct __UTAC__EXCEPTION *)exception;
tmp=malloc((size_t)24ul);
cf = (struct __UTAC__CFLOW_FUNC *)tmp;
mem_15 = (signed int (**)(signed int, signed int))cf;
*mem_15 = cflow_func;
__cil_tmp7 = (unsigned long int)cf;
__cil_tmp8 = __cil_tmp7 + (unsigned long int)8;
mem_16 = (signed int *)__cil_tmp8;
*mem_16 = val;
__cil_tmp9 = (unsigned long int)cf;
__cil_tmp10 = __cil_tmp9 + (unsigned long int)16;
__cil_tmp11 = (unsigned long int)excep;
__cil_tmp12 = __cil_tmp11 + (unsigned long int)24;
mem_17 = (struct __UTAC__CFLOW_FUNC **)__cil_tmp10;
mem_18 = (struct __UTAC__CFLOW_FUNC **)__cil_tmp12;
*mem_17 = *mem_18;
__cil_tmp13 = (unsigned long int)excep;
__cil_tmp14 = __cil_tmp13 + (unsigned long int)24;
mem_19 = (struct __UTAC__CFLOW_FUNC **)__cil_tmp14;
*mem_19 = cf;
signed int retValue_acc;
signed int choice;
choice = __VERIFIER_nondet_signed_int();
retValue_acc = choice;
return retValue_acc;
struct __UTAC__EXCEPTION *excep;
struct __UTAC__CFLOW_FUNC *cf;
unsigned long int __cil_tmp5;
unsigned long int __cil_tmp6;
struct __UTAC__CFLOW_FUNC *__cil_tmp7;
unsigned long int __cil_tmp8;
unsigned long int __cil_tmp9;
signed int (*__cil_tmp10)(signed int, signed int);
unsigned long int __cil_tmp11;
unsigned long int __cil_tmp12;
signed int __cil_tmp13;
unsigned long int __cil_tmp14;
unsigned long int __cil_tmp15;
struct __UTAC__CFLOW_FUNC **mem_16;
signed int (**mem_17)(signed int, signed int);
signed int *mem_18;
struct __UTAC__CFLOW_FUNC **mem_19;
excep = (struct __UTAC__EXCEPTION *)exception;
__cil_tmp5 = (unsigned long int)excep;
__cil_tmp6 = __cil_tmp5 + (unsigned long int)24;
mem_16 = (struct __UTAC__CFLOW_FUNC **)__cil_tmp6;
cf = *mem_16;
!(1 != 0);
__cil_tmp7 = (struct __UTAC__CFLOW_FUNC *)0;
__cil_tmp8 = (unsigned long int)__cil_tmp7;
__cil_tmp9 = (unsigned long int)cf;
!(__cil_tmp9 != __cil_tmp8);
mem_17 = (signed int (**)(signed int, signed int))cf;
__cil_tmp10 = *mem_17;
__cil_tmp11 = (unsigned long int)cf;
__cil_tmp12 = __cil_tmp11 + (unsigned long int)8;
mem_18 = (signed int *)__cil_tmp12;
__cil_tmp13 = *mem_18;
__cil_tmp10(4, __cil_tmp13);
__cil_tmp14 = (unsigned long int)cf;
__cil_tmp15 = __cil_tmp14 + (unsigned long int)16;
mem_19 = (struct __UTAC__CFLOW_FUNC **)__cil_tmp15;
cf = *mem_19;
!(1 != 0);
__cil_tmp7 = (struct __UTAC__CFLOW_FUNC *)0;
__cil_tmp8 = (unsigned long int)__cil_tmp7;
__cil_tmp9 = (unsigned long int)cf;
!(__cil_tmp9 != __cil_tmp8);
mem_17 = (signed int (**)(signed int, signed int))cf;
__cil_tmp10 = *mem_17;
__cil_tmp11 = (unsigned long int)cf;
__cil_tmp12 = __cil_tmp11 + (unsigned long int)8;
mem_18 = (signed int *)__cil_tmp12;
__cil_tmp13 = *mem_18;
__cil_tmp10(4, __cil_tmp13);
__cil_tmp14 = (unsigned long int)cf;
__cil_tmp15 = __cil_tmp14 + (unsigned long int)16;
mem_19 = (struct __UTAC__CFLOW_FUNC **)__cil_tmp15;
cf = *mem_19;
__CPROVER_assume(FALSE);
__iv__current_func_call = 19;
__utac__exception__cf_handler_free(exception);
__GUIDSL_ROOT_PRODUCTION = 1;
__iv__current_func_call = 200;
__SELECTED_FEATURE_Base=select_one();
__iv__current_func_call = 201;
__SELECTED_FEATURE_Keys=select_one();
__iv__current_func_call = 202;
__SELECTED_FEATURE_Encrypt=select_one();
__iv__current_func_call = 203;
__SELECTED_FEATURE_AutoResponder=select_one();
__iv__current_func_call = 204;
__SELECTED_FEATURE_AddressBook=select_one();
__iv__current_func_call = 205;
__SELECTED_FEATURE_Sign=select_one();
__iv__current_func_call = 206;
__SELECTED_FEATURE_Forward=select_one();
__SELECTED_FEATURE_Verify = 1;
__iv__current_func_call = 207;
__SELECTED_FEATURE_Decrypt=select_one();
puts("Please enter a subject and a message body.\n");
__iv__current_func_call = 110;
sendEmail(rjh, bob);
__iv__current_func_call = 225;
setClientAutoResponse(rjh, 1);
__iv__current_func_call = 151;
generateKeyPair(rjh, 666);
__iv__current_func_call = 219;
createClientKeyringEntry(rjh);
__iv__current_func_call = 220;
setClientKeyringUser(rjh, 0, 3);
__iv__current_func_call = 221;
setClientKeyringPublicKey(rjh, 0, 789);
__iv__current_func_call = 216;
createClientKeyringEntry(rjh);
__iv__current_func_call = 217;
setClientKeyringUser(rjh, 0, 1);
__iv__current_func_call = 218;
setClientKeyringPublicKey(rjh, 0, 123);
__iv__current_func_call = 226;
setClientForwardReceiver(rjh, chuck);
__iv__current_func_call = 150;
setClientPrivateKey(rjh, 0);
assert(0 != 0);
signed int retValue_acc;
!(handle == 1);
retValue_acc = __ste_client_forwardReceiver0;
return retValue_acc;
!(handle == 2);
retValue_acc = __ste_client_forwardReceiver1;
return retValue_acc;
!(handle == 3);
retValue_acc = __ste_client_forwardReceiver2;
return retValue_acc;
retValue_acc = 0;
return retValue_acc;
queue_empty = 0;
queued_message = msg;
queued_client = client;
signed int retValue_acc;
!(handle == 1);
retValue_acc = __ste_email_isSigned0;
return retValue_acc;
!(handle == 2);
retValue_acc = __ste_email_isSigned1;
return retValue_acc;
retValue_acc = 0;
return retValue_acc;
!(__SELECTED_FEATURE_Sign != 0);
__iv__current_func_call = 107;
printMail__role__Sign(msg);
__iv__current_func_call = 108;
printMail__before__Sign(msg);
!(__SELECTED_FEATURE_Encrypt != 0);
__iv__current_func_call = 115;
printMail__role__Encrypt(msg);
__iv__current_func_call = 116;
printMail__before__Encrypt(msg);
!(__SELECTED_FEATURE_Verify != 0);
__iv__current_func_call = 157;
printMail__role__Verify(msg);
__iv__current_func_call = 158;
printMail__before__Verify(msg);
__iv__current_func_call = 168;
sign(client, msg);
__iv__current_func_call = 169;
outgoing__before__Sign(client, msg);
signed int retValue_acc;
!(handle == 1);
retValue_acc = __ste_client_idCounter0;
return retValue_acc;
!(handle == 2);
retValue_acc = __ste_client_idCounter1;
return retValue_acc;
!(handle == 3);
retValue_acc = __ste_client_idCounter2;
return retValue_acc;
retValue_acc = 0;
return retValue_acc;
!(__SELECTED_FEATURE_Encrypt != 0);
__iv__current_func_call = 90;
outgoing__role__Encrypt(client, msg);
__iv__current_func_call = 91;
outgoing__before__Encrypt(client, msg);
!(__SELECTED_FEATURE_Sign != 0);
__iv__current_func_call = 117;
outgoing__role__Sign(client, msg);
__iv__current_func_call = 118;
outgoing__before__Sign(client, msg);
void *retValue_acc;
struct __ACC__ERR *new;
void *tmp;
struct __ACC__ERR *temp;
struct __ACC__ERR *next;
void *excep;
unsigned long int __cil_tmp10;
unsigned long int __cil_tmp11;
unsigned long int __cil_tmp12;
unsigned long int __cil_tmp13;
void *__cil_tmp14;
unsigned long int __cil_tmp15;
unsigned long int __cil_tmp16;
void *__cil_tmp17;
void **mem_18;
struct __ACC__ERR **mem_19;
struct __ACC__ERR **mem_20;
void **mem_21;
struct __ACC__ERR **mem_22;
void **mem_23;
void **mem_24;
!(count == 0);
return retValue_acc;
!(mode == 0);
tmp=malloc((size_t)16ul);
new = (struct __ACC__ERR *)tmp;
mem_18 = (void **)new;
*mem_18 = env;
__cil_tmp10 = (unsigned long int)new;
__cil_tmp11 = __cil_tmp10 + (unsigned long int)8;
mem_19 = (struct __ACC__ERR **)__cil_tmp11;
*mem_19 = head;
head = new;
retValue_acc = (void *)new;
return retValue_acc;
!(mode == 1);
temp = head;
!(1 != 0);
!(count > 1);
__cil_tmp12 = (unsigned long int)temp;
__cil_tmp13 = __cil_tmp12 + (unsigned long int)8;
mem_20 = (struct __ACC__ERR **)__cil_tmp13;
next = *mem_20;
mem_21 = (void **)temp;
excep = *mem_21;
__cil_tmp14 = (void *)temp;
free(__cil_tmp14);
__iv__current_func_call = 15;
__utac__exception__cf_handler_reset(excep);
temp = next;
count = count - 1;
!(1 != 0);
!(count > 1);
__cil_tmp12 = (unsigned long int)temp;
__cil_tmp13 = __cil_tmp12 + (unsigned long int)8;
mem_20 = (struct __ACC__ERR **)__cil_tmp13;
next = *mem_20;
mem_21 = (void **)temp;
excep = *mem_21;
__cil_tmp14 = (void *)temp;
free(__cil_tmp14);
__iv__current_func_call = 15;
__utac__exception__cf_handler_reset(excep);
temp = next;
count = count - 1;
__CPROVER_assume(FALSE);
__cil_tmp15 = (unsigned long int)temp;
__cil_tmp16 = __cil_tmp15 + (unsigned long int)8;
mem_22 = (struct __ACC__ERR **)__cil_tmp16;
head = *mem_22;
mem_23 = (void **)temp;
excep = *mem_23;
__cil_tmp17 = (void *)temp;
free(__cil_tmp17);
__iv__current_func_call = 17;
__utac__exception__cf_handler_reset(excep);
retValue_acc = excep;
return retValue_acc;
!(mode == 2);
!(head != (struct __ACC__ERR *)(void *)0);
mem_24 = (void **)head;
retValue_acc = *mem_24;
return retValue_acc;
retValue_acc = (void *)0;
return retValue_acc;
return retValue_acc;
__iv__current_func_call = 152;
verify(client, msg);
__iv__current_func_call = 153;
incoming__before__Verify(client, msg);
signed int retValue_acc;
!(handle == 1);
retValue_acc = __ste_ClientAddressBook_size0;
return retValue_acc;
!(handle == 2);
retValue_acc = __ste_ClientAddressBook_size1;
return retValue_acc;
!(handle == 3);
retValue_acc = __ste_ClientAddressBook_size2;
return retValue_acc;
retValue_acc = 0;
return retValue_acc;
signed int privkey;
signed int tmp___0;
signed int tmp___1;
signed int tmp___2;
__iv__current_func_call = 65;
privkey=getClientPrivateKey(client);
!(privkey != 0);
__iv__current_func_call = 66;
tmp___0=isEncrypted(msg);
!(tmp___0 != 0);
__iv__current_func_call = 67;
tmp___1=getEmailEncryptionKey(msg);
__iv__current_func_call = 68;
tmp___2=isKeyPairValid(tmp___1, privkey);
!(tmp___2 != 0);
__iv__current_func_call = 69;
setEmailIsEncrypted(msg, 0);
__iv__current_func_call = 70;
setEmailEncryptionKey(msg, 0);
__iv__current_func_call = 71;
incoming__before__Decrypt(client, msg);
!(__SELECTED_FEATURE_Forward != 0);
__iv__current_func_call = 74;
incoming__role__Forward(client, msg);
__iv__current_func_call = 75;
incoming__before__Forward(client, msg);
!(__SELECTED_FEATURE_AutoResponder != 0);
__iv__current_func_call = 146;
incoming__role__AutoResponder(client, msg);
__iv__current_func_call = 147;
incoming__before__AutoResponder(client, msg);
!(__SELECTED_FEATURE_Verify != 0);
__iv__current_func_call = 166;
incoming__role__Verify(client, msg);
__iv__current_func_call = 167;
incoming__before__Verify(client, msg);
__iv__current_func_call = 77;
deliver(client, msg);
!(__SELECTED_FEATURE_Decrypt != 0);
__iv__current_func_call = 198;
incoming__role__Decrypt(client, msg);
__iv__current_func_call = 199;
incoming__before__Decrypt(client, msg);
signed int retValue_acc;
!(handle == 1);
retValue_acc = __ste_email_signKey0;
return retValue_acc;
!(handle == 2);
retValue_acc = __ste_email_signKey1;
return retValue_acc;
retValue_acc = 0;
return retValue_acc;
signed int retValue_acc;
!(handle == 1);
retValue_acc = __ste_email_encryptionKey0;
return retValue_acc;
!(handle == 2);
retValue_acc = __ste_email_encryptionKey1;
return retValue_acc;
retValue_acc = 0;
return retValue_acc;
void *retValue_acc;
unsigned long int __cil_tmp4;
unsigned long int __cil_tmp5;
signed int __cil_tmp6;
signed int __cil_tmp7;
unsigned long int __cil_tmp8;
unsigned long int __cil_tmp9;
void **__cil_tmp10;
void **__cil_tmp11;
signed int *mem_12;
void ***mem_13;
assert(i > 0);
!(i > 0);
__cil_tmp4 = (unsigned long int)this;
__cil_tmp5 = __cil_tmp4 + (unsigned long int)16;
mem_12 = (signed int *)__cil_tmp5;
__cil_tmp6 = *mem_12;
assert(i <= __cil_tmp6);
__cil_tmp7 = i - 1;
__cil_tmp8 = (unsigned long int)this;
__cil_tmp9 = __cil_tmp8 + (unsigned long int)8;
mem_13 = (void ***)__cil_tmp9;
__cil_tmp10 = *mem_13;
__cil_tmp11 = __cil_tmp10 + (signed long int)__cil_tmp7;
retValue_acc = *__cil_tmp11;
return retValue_acc;
signed int retValue_acc;
!(handle == 1);
retValue_acc = __ste_email_from0;
return retValue_acc;
!(handle == 2);
retValue_acc = __ste_email_from1;
return retValue_acc;
retValue_acc = 0;
return retValue_acc;
char *retValue_acc;
void *__cil_tmp3;
!(handle == 1);
retValue_acc = __ste_client_name0;
return retValue_acc;
!(handle == 2);
retValue_acc = __ste_client_name1;
return retValue_acc;
!(handle == 3);
retValue_acc = __ste_client_name2;
return retValue_acc;
__cil_tmp3 = (void *)0;
retValue_acc = (char *)__cil_tmp3;
return retValue_acc;
signed int retValue_acc;
!(handle == 1);
!(index == 0);
retValue_acc = __ste_Client_Keyring0_User0;
return retValue_acc;
!(index == 1);
retValue_acc = __ste_Client_Keyring0_User1;
return retValue_acc;
retValue_acc = 0;
return retValue_acc;
!(handle == 2);
!(index == 0);
retValue_acc = __ste_Client_Keyring1_User0;
return retValue_acc;
!(index == 1);
retValue_acc = __ste_Client_Keyring1_User1;
return retValue_acc;
retValue_acc = 0;
return retValue_acc;
!(handle == 3);
!(index == 0);
retValue_acc = __ste_Client_Keyring2_User0;
return retValue_acc;
!(index == 1);
retValue_acc = __ste_Client_Keyring2_User1;
return retValue_acc;
retValue_acc = 0;
return retValue_acc;
retValue_acc = 0;
return retValue_acc;
struct __UTAC__EXCEPTION *excep;
struct __UTAC__CFLOW_FUNC *cf;
struct __UTAC__CFLOW_FUNC *tmp;
unsigned long int __cil_tmp5;
unsigned long int __cil_tmp6;
struct __UTAC__CFLOW_FUNC *__cil_tmp7;
unsigned long int __cil_tmp8;
unsigned long int __cil_tmp9;
unsigned long int __cil_tmp10;
unsigned long int __cil_tmp11;
void *__cil_tmp12;
unsigned long int __cil_tmp13;
unsigned long int __cil_tmp14;
struct __UTAC__CFLOW_FUNC **mem_15;
struct __UTAC__CFLOW_FUNC **mem_16;
struct __UTAC__CFLOW_FUNC **mem_17;
excep = (struct __UTAC__EXCEPTION *)exception;
__cil_tmp5 = (unsigned long int)excep;
__cil_tmp6 = __cil_tmp5 + (unsigned long int)24;
mem_15 = (struct __UTAC__CFLOW_FUNC **)__cil_tmp6;
cf = *mem_15;
!(1 != 0);
__cil_tmp7 = (struct __UTAC__CFLOW_FUNC *)0;
__cil_tmp8 = (unsigned long int)__cil_tmp7;
__cil_tmp9 = (unsigned long int)cf;
!(__cil_tmp9 != __cil_tmp8);
tmp = cf;
__cil_tmp10 = (unsigned long int)cf;
__cil_tmp11 = __cil_tmp10 + (unsigned long int)16;
mem_16 = (struct __UTAC__CFLOW_FUNC **)__cil_tmp11;
cf = *mem_16;
__cil_tmp12 = (void *)tmp;
free(__cil_tmp12);
!(1 != 0);
__cil_tmp7 = (struct __UTAC__CFLOW_FUNC *)0;
__cil_tmp8 = (unsigned long int)__cil_tmp7;
__cil_tmp9 = (unsigned long int)cf;
!(__cil_tmp9 != __cil_tmp8);
tmp = cf;
__cil_tmp10 = (unsigned long int)cf;
__cil_tmp11 = __cil_tmp10 + (unsigned long int)16;
mem_16 = (struct __UTAC__CFLOW_FUNC **)__cil_tmp11;
cf = *mem_16;
__cil_tmp12 = (void *)tmp;
free(__cil_tmp12);
__CPROVER_assume(FALSE);
__cil_tmp13 = (unsigned long int)excep;
__cil_tmp14 = __cil_tmp13 + (unsigned long int)24;
mem_17 = (struct __UTAC__CFLOW_FUNC **)__cil_tmp14;
*mem_17 = (struct __UTAC__CFLOW_FUNC *)0;
signed int tmp;
signed int tmp___0;
char *__cil_tmp3;
char *__cil_tmp4;
__iv__current_func_call = 170;
createClientKeyringEntry(bob);
__iv__current_func_call = 171;
setClientKeyringUser(bob, 0, 2);
__iv__current_func_call = 172;
setClientKeyringPublicKey(bob, 0, 456);
puts("bob added rjhs key");
__iv__current_func_call = 174;
tmp=getClientKeyringUser(bob, 0);
__cil_tmp3 = (char *)"%d\n";
printf(__cil_tmp3, tmp);
__iv__current_func_call = 176;
tmp___0=getClientKeyringPublicKey(bob, 0);
__cil_tmp4 = (char *)"%d\n";
printf(__cil_tmp4, tmp___0);
!(handle == 1);
!(index == 0);
__ste_Client_AddressBook0_Alias0 = value;
!(index == 1);
__ste_Client_AddressBook0_Alias1 = value;
!(index == 2);
__ste_Client_AddressBook0_Alias2 = value;
!(handle == 2);
!(index == 0);
__ste_Client_AddressBook1_Alias0 = value;
!(index == 1);
__ste_Client_AddressBook1_Alias1 = value;
!(index == 2);
__ste_Client_AddressBook1_Alias2 = value;
!(handle == 3);
!(index == 0);
__ste_Client_AddressBook2_Alias0 = value;
!(index == 1);
__ste_Client_AddressBook2_Alias1 = value;
!(index == 2);
__ste_Client_AddressBook2_Alias2 = value;
!(handle == 1);
!(index == 0);
__ste_Client_Keyring0_PublicKey0 = value;
!(index == 1);
__ste_Client_Keyring0_PublicKey1 = value;
!(handle == 2);
!(index == 0);
__ste_Client_Keyring1_PublicKey0 = value;
!(index == 1);
__ste_Client_Keyring1_PublicKey1 = value;
!(handle == 3);
!(index == 0);
__ste_Client_Keyring2_PublicKey0 = value;
!(index == 1);
__ste_Client_Keyring2_PublicKey1 = value;
!(__SELECTED_FEATURE_AddressBook != 0);
__iv__current_func_call = 159;
outgoing__role__AddressBook(client, msg);
__iv__current_func_call = 160;
outgoing__before__AddressBook(client, msg);
__iv__current_func_call = 163;
generateKeyPair(bob, 777);
signed int retValue_acc;
!(handle == 1);
retValue_acc = __ste_email_isSignatureVerified0;
return retValue_acc;
!(handle == 2);
retValue_acc = __ste_email_isSignatureVerified1;
return retValue_acc;
retValue_acc = 0;
return retValue_acc;
!(handle == 1);
__ste_client_forwardReceiver0 = value;
!(handle == 2);
__ste_client_forwardReceiver1 = value;
!(handle == 3);
__ste_client_forwardReceiver2 = value;
!(handle == 1);
__ste_client_autoResponse0 = value;
!(handle == 2);
__ste_client_autoResponse1 = value;
!(handle == 3);
__ste_client_autoResponse2 = value;
signed int retValue_acc;
signed int tmp;
__iv__current_func_call = 230;
tmp=isEncrypted(msg);
!(tmp != 0);
retValue_acc = 0;
return retValue_acc;
__iv__current_func_call = 231;
retValue_acc=isReadable__before__Encrypt(msg);
return retValue_acc;
signed int retValue_acc;
!(handle == 1);
!(index == 0);
retValue_acc = __ste_Client_Keyring0_PublicKey0;
return retValue_acc;
!(index == 1);
retValue_acc = __ste_Client_Keyring0_PublicKey1;
return retValue_acc;
retValue_acc = 0;
return retValue_acc;
!(handle == 2);
!(index == 0);
retValue_acc = __ste_Client_Keyring1_PublicKey0;
return retValue_acc;
!(index == 1);
retValue_acc = __ste_Client_Keyring1_PublicKey1;
return retValue_acc;
retValue_acc = 0;
return retValue_acc;
!(handle == 3);
!(index == 0);
retValue_acc = __ste_Client_Keyring2_PublicKey0;
return retValue_acc;
!(index == 1);
retValue_acc = __ste_Client_Keyring2_PublicKey1;
return retValue_acc;
retValue_acc = 0;
return retValue_acc;
retValue_acc = 0;
return retValue_acc;
!(handle == 1);
__ste_ClientAddressBook_size0 = value;
!(handle == 2);
__ste_ClientAddressBook_size1 = value;
!(handle == 3);
__ste_ClientAddressBook_size2 = value;
!(handle == 1);
__ste_email_isSigned0 = value;
!(handle == 2);
__ste_email_isSigned1 = value;
puts("mail delivered\n");
char *retValue_acc;
unsigned long int __cil_tmp4;
unsigned long int __cil_tmp5;
signed int __cil_tmp6;
signed int __cil_tmp7;
unsigned long int __cil_tmp8;
unsigned long int __cil_tmp9;
char **__cil_tmp10;
char **__cil_tmp11;
signed int *mem_12;
char ***mem_13;
assert(i > 0);
!(i > 0);
__cil_tmp4 = (unsigned long int)this;
__cil_tmp5 = __cil_tmp4 + (unsigned long int)16;
mem_12 = (signed int *)__cil_tmp5;
__cil_tmp6 = *mem_12;
assert(i <= __cil_tmp6);
__cil_tmp7 = i - 1;
__cil_tmp8 = (unsigned long int)this;
__cil_tmp9 = __cil_tmp8 + (unsigned long int)24;
mem_13 = (char ***)__cil_tmp9;
__cil_tmp10 = *mem_13;
__cil_tmp11 = __cil_tmp10 + (signed long int)__cil_tmp7;
retValue_acc = *__cil_tmp11;
return retValue_acc;
__iv__current_func_call = 180;
reach_error();
abort();
signed int retValue_acc;
signed int msg;
msg = 1;
__iv__current_func_call = 161;
setEmailFrom(msg, from);
__iv__current_func_call = 162;
setEmailTo(msg, to);
retValue_acc = msg;
return retValue_acc;
signed int retValue_acc;
char *__cil_tmp4;
__cil_tmp4 = (char *)"keypair valid %d %d";
printf(__cil_tmp4, publicKey, privateKey);
publicKey != 0;
retValue_acc = 0;
return retValue_acc;
privateKey != 0;
retValue_acc = 0;
return retValue_acc;
retValue_acc = (signed int)(privateKey == publicKey);
return retValue_acc;
!(handle == 1);
__ste_client_idCounter0 = value;
!(handle == 2);
__ste_client_idCounter1 = value;
!(handle == 3);
__ste_client_idCounter2 = value;
__iv__current_func_call = 208;
setClientPrivateKey(client, seed);
signed int tmp;
__iv__current_func_call = 95;
tmp=isReadable(msg);
tmp != 0;
__iv__current_func_call = 96;
__automaton_fail();
__iv__current_func_call = 213;
createClientKeyringEntry(bob);
__iv__current_func_call = 214;
setClientKeyringUser(bob, 1, 3);
__iv__current_func_call = 215;
setClientKeyringPublicKey(bob, 1, 789);
__iv__current_func_call = 133;
setClientAddressBookSize(bob, 1);
__iv__current_func_call = 134;
setClientAddressBookAlias(bob, 0, rjh);
__iv__current_func_call = 135;
setClientAddressBookAddress(bob, 0, rjh);
__iv__current_func_call = 136;
setClientAddressBookAddress(bob, 1, chuck);
__iv__current_func_call = 154;
createClientKeyringEntry(chuck);
__iv__current_func_call = 155;
setClientKeyringUser(chuck, 0, 1);
__iv__current_func_call = 156;
setClientKeyringPublicKey(chuck, 0, 123);
__iv__current_func_call = 222;
createClientKeyringEntry(chuck);
__iv__current_func_call = 223;
setClientKeyringUser(chuck, 0, 2);
__iv__current_func_call = 224;
setClientKeyringPublicKey(chuck, 0, 456);
signed int retValue_acc;
signed int size;
signed int __cil_tmp5;
__iv__current_func_call = 164;
size=getClientKeyringSize(handle);
!(size < 2);
__cil_tmp5 = size + 1;
__iv__current_func_call = 165;
setClientKeyringSize(handle, __cil_tmp5);
retValue_acc = size + 1;
return retValue_acc;
retValue_acc = -1;
return retValue_acc;
puts("Forwarding message.\n");
__iv__current_func_call = 138;
printMail(msg);
__iv__current_func_call = 139;
queue(client, msg);
!(handle == 1);
!(index == 0);
__ste_Client_AddressBook0_Address0 = value;
!(index == 1);
__ste_Client_AddressBook0_Address1 = value;
!(index == 2);
__ste_Client_AddressBook0_Address2 = value;
!(handle == 2);
!(index == 0);
__ste_Client_AddressBook1_Address0 = value;
!(index == 1);
__ste_Client_AddressBook1_Address1 = value;
!(index == 2);
__ste_Client_AddressBook1_Address2 = value;
!(handle == 3);
!(index == 0);
__ste_Client_AddressBook2_Address0 = value;
!(index == 1);
__ste_Client_AddressBook2_Address1 = value;
!(index == 2);
__ste_Client_AddressBook2_Address2 = value;
!(handle == 1);
__ste_ClientKeyring_size0 = value;
!(handle == 2);
__ste_ClientKeyring_size1 = value;
!(handle == 3);
__ste_ClientKeyring_size2 = value;
!(handle == 1);
!(index == 0);
__ste_Client_Keyring0_User0 = value;
!(index == 1);
__ste_Client_Keyring0_User1 = value;
!(handle == 2);
!(index == 0);
__ste_Client_Keyring1_User0 = value;
!(index == 1);
__ste_Client_Keyring1_User1 = value;
!(handle == 3);
!(index == 0);
__ste_Client_Keyring2_User0 = value;
!(index == 1);
__ste_Client_Keyring2_User1 = value;
!(handle == 1);
__ste_client_name0 = value;
!(handle == 2);
__ste_client_name1 = value;
!(handle == 3);
__ste_client_name2 = value;
!(handle == 1);
__ste_client_outbuffer0 = value;
!(handle == 2);
__ste_client_outbuffer1 = value;
!(handle == 3);
__ste_client_outbuffer2 = value;
!(handle == 1);
__ste_client_privateKey0 = value;
!(handle == 2);
__ste_client_privateKey1 = value;
!(handle == 3);
__ste_client_privateKey2 = value;
!(handle == 1);
__ste_email_body0 = value;
!(handle == 2);
__ste_email_body1 = value;
!(handle == 1);
__ste_email_encryptionKey0 = value;
!(handle == 2);
__ste_email_encryptionKey1 = value;
!(handle == 1);
__ste_email_from0 = value;
!(handle == 2);
__ste_email_from1 = value;
!(handle == 1);
__ste_email_id0 = value;
!(handle == 2);
__ste_email_id1 = value;
!(handle == 1);
__ste_email_isEncrypted0 = value;
!(handle == 2);
__ste_email_isEncrypted1 = value;
!(handle == 1);
__ste_email_isSignatureVerified0 = value;
!(handle == 2);
__ste_email_isSignatureVerified1 = value;
!(handle == 1);
__ste_email_signKey0 = value;
!(handle == 2);
__ste_email_signKey1 = value;
!(handle == 1);
__ste_email_subject0 = value;
!(handle == 2);
__ste_email_subject1 = value;
!(handle == 1);
__ste_email_to0 = value;
!(handle == 2);
__ste_email_to1 = value;
!(__SELECTED_FEATURE_Keys != 0);
__iv__current_func_call = 209;
setup_bob__role__Keys(bob___0);
__iv__current_func_call = 210;
setup_bob__before__Keys(bob___0);
__iv__current_func_call = 227;
setClientId(bob___0, bob___0);
__iv__current_func_call = 228;
setup_bob__before__Keys(bob___0);
__iv__current_func_call = 229;
setClientPrivateKey(bob___0, 123);
!(__SELECTED_FEATURE_Keys != 0);
__iv__current_func_call = 148;
setup_chuck__role__Keys(chuck___0);
__iv__current_func_call = 149;
setup_chuck__before__Keys(chuck___0);
__iv__current_func_call = 178;
setClientId(chuck___0, chuck___0);
__iv__current_func_call = 190;
setup_chuck__before__Keys(chuck___0);
__iv__current_func_call = 191;
setClientPrivateKey(chuck___0, 789);
!(__SELECTED_FEATURE_Keys != 0);
__iv__current_func_call = 211;
setup_rjh__role__Keys(rjh___0);
__iv__current_func_call = 212;
setup_rjh__before__Keys(rjh___0);
__iv__current_func_call = 196;
setClientId(rjh___0, rjh___0);
__iv__current_func_call = 232;
setup_rjh__before__Keys(rjh___0);
__iv__current_func_call = 233;
setClientPrivateKey(rjh___0, 456);

}