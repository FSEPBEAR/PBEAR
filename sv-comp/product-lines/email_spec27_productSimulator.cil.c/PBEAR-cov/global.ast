int __iv__current_func_call;
struct JoinPoint;
struct __ACC__ERR;
struct __UTAC__CFLOW_FUNC;
struct __UTAC__EXCEPTION;
void __automaton_fail(void);
void * __utac__error_stack_mgt(void *env, signed int mode, signed int count);
void __utac__exception__cf_handler_free(void *exception);
void __utac__exception__cf_handler_reset(void *exception);
void __utac__exception__cf_handler_set(void *exception, signed int (*cflow_func)(signed int, signed int), signed int val);
void * __utac__get_this_arg(signed int i, struct JoinPoint *this);
 char * __utac__get_this_argtype(signed int i, struct JoinPoint *this);
static inline void __utac_acc__VerifyForward_spec__1(signed int client, signed int msg);
void autoRespond(signed int client, signed int msg);
void bobKeyAdd(void);
void bobKeyAddChuck(void);
void bobKeyChange(void);
void bobSetAddressBook(void);
void bobToRjh(void);
void chuckKeyAdd(void);
void chuckKeyAddRjh(void);
signed int cloneEmail(signed int msg);
signed int createClient(char *name);
signed int createClientAddressBookEntry(signed int handle);
signed int createClientKeyringEntry(signed int handle);
signed int createEmail(signed int from, signed int to);
void deliver(signed int client, signed int msg);
signed int findClientAddressBookAlias(signed int handle, signed int userid);
signed int findPublicKey(signed int handle, signed int userid);
void forward(signed int client, signed int msg);
void generateKeyPair(signed int client, signed int seed);
signed int getClientAddressBookAddress(signed int handle, signed int index);
signed int getClientAddressBookAlias(signed int handle, signed int index);
signed int getClientAddressBookSize(signed int handle);
signed int getClientAutoResponse(signed int handle);
signed int getClientForwardReceiver(signed int handle);
signed int getClientId(signed int handle);
signed int getClientKeyringPublicKey(signed int handle, signed int index);
signed int getClientKeyringSize(signed int handle);
signed int getClientKeyringUser(signed int handle, signed int index);
char * getClientName(signed int handle);
signed int getClientOutbuffer(signed int handle);
signed int getClientPrivateKey(signed int handle);
char * getEmailBody(signed int handle);
signed int getEmailEncryptionKey(signed int handle);
signed int getEmailFrom(signed int handle);
signed int getEmailId(signed int handle);
signed int getEmailSignKey(signed int handle);
char * getEmailSubject(signed int handle);
signed int getEmailTo(signed int handle);
signed int get_queued_client(void);
signed int get_queued_email(void);
void incoming(signed int client, signed int msg);
void incoming__before__AutoResponder(signed int client, signed int msg);
void incoming__before__Decrypt(signed int client, signed int msg);
void incoming__before__Forward(signed int client, signed int msg);
void incoming__before__Verify(signed int client, signed int msg);
void incoming__role__AutoResponder(signed int client, signed int msg);
void incoming__role__Decrypt(signed int client, signed int msg);
void incoming__role__Forward(signed int client, signed int msg);
void incoming__role__Verify(signed int client, signed int msg);
signed int initClient(void);
signed int initEmail(void);
signed int isEncrypted(signed int handle);
signed int isKeyPairValid(signed int publicKey, signed int privateKey);
signed int isReadable(signed int msg);
signed int isReadable__before__Encrypt(signed int msg);
signed int isReadable__role__Encrypt(signed int msg);
signed int isSigned(signed int handle);
signed int isVerified(signed int handle);
signed int is_queue_empty(void);
void mail(signed int client, signed int msg);
void outgoing(signed int client, signed int msg);
void outgoing__before__AddressBook(signed int client, signed int msg);
void outgoing__before__Encrypt(signed int client, signed int msg);
void outgoing__before__Sign(signed int client, signed int msg);
void outgoing__role__AddressBook(signed int client, signed int msg);
void outgoing__role__Encrypt(signed int client, signed int msg);
void outgoing__role__Sign(signed int client, signed int msg);
void printMail(signed int msg);
void printMail__before__Encrypt(signed int msg);
void printMail__before__Sign(signed int msg);
void printMail__before__Verify(signed int msg);
void printMail__role__Encrypt(signed int msg);
void printMail__role__Sign(signed int msg);
void printMail__role__Verify(signed int msg);
signed int prompt(char *msg);
void queue(signed int client, signed int msg);
void reach_error();
void rjhDeletePrivateKey(void);
void rjhEnableForwarding(void);
void rjhKeyAdd(void);
void rjhKeyAddChuck(void);
void rjhKeyChange(void);
void rjhSetAutoRespond(void);
void rjhToBob(void);
void select_features(void);
void select_helpers(void);
signed int select_one(void);
void sendEmail(signed int sender, signed int receiver);
void sendToAddressBook(signed int client, signed int msg);
void setClientAddressBookAddress(signed int handle, signed int index, signed int value);
void setClientAddressBookAlias(signed int handle, signed int index, signed int value);
void setClientAddressBookSize(signed int handle, signed int value);
void setClientAutoResponse(signed int handle, signed int value);
void setClientForwardReceiver(signed int handle, signed int value);
void setClientId(signed int handle, signed int value);
void setClientKeyringPublicKey(signed int handle, signed int index, signed int value);
void setClientKeyringSize(signed int handle, signed int value);
void setClientKeyringUser(signed int handle, signed int index, signed int value);
void setClientName(signed int handle, char *value);
void setClientOutbuffer(signed int handle, signed int value);
void setClientPrivateKey(signed int handle, signed int value);
void setEmailBody(signed int handle, char *value);
void setEmailEncryptionKey(signed int handle, signed int value);
void setEmailFrom(signed int handle, signed int value);
void setEmailId(signed int handle, signed int value);
void setEmailIsEncrypted(signed int handle, signed int value);
void setEmailIsSignatureVerified(signed int handle, signed int value);
void setEmailIsSigned(signed int handle, signed int value);
void setEmailSignKey(signed int handle, signed int value);
void setEmailSubject(signed int handle, char *value);
void setEmailTo(signed int handle, signed int value);
void setup(void);
void setup_bob(signed int bob___0);
void setup_bob__before__Keys(signed int bob___0);
void setup_bob__role__Keys(signed int bob___0);
void setup_chuck(signed int chuck___0);
void setup_chuck__before__Keys(signed int chuck___0);
void setup_chuck__role__Keys(signed int chuck___0);
void setup_rjh(signed int rjh___0);
void setup_rjh__before__Keys(signed int rjh___0);
void setup_rjh__role__Keys(signed int rjh___0);
void sign(signed int client, signed int msg);
void test(void);
signed int valid_product(void);
void verify(signed int client, signed int msg);
struct JoinPoint
{
  void ** (*fp)(struct JoinPoint *);
  void **args;
  signed int argsCount;
   char **argsType;
  void * (*arg)(signed int, struct JoinPoint *);
   char * (*argType)(signed int, struct JoinPoint *);
  void **retValue;
   char *retType;
   char *funcName;
   char *targetName;
   char *fileName;
   char *kind;
  void *excep_return;
};
struct __ACC__ERR
{
  void *v;
  struct __ACC__ERR *next;
};
struct __UTAC__CFLOW_FUNC
{
  signed int (*func)(signed int, signed int);
  signed int val;
  struct __UTAC__CFLOW_FUNC *next;
};
struct __UTAC__EXCEPTION
{
  void *jumpbuf;
  unsigned long long int prtValue;
  signed int pops;
  struct __UTAC__CFLOW_FUNC *cflowfuncs;
};
signed int __GUIDSL_ROOT_PRODUCTION;
signed int __SELECTED_FEATURE_AddressBook;
signed int __SELECTED_FEATURE_AutoResponder;
signed int __SELECTED_FEATURE_Base;
signed int __SELECTED_FEATURE_Decrypt;
signed int __SELECTED_FEATURE_Encrypt;
signed int __SELECTED_FEATURE_Forward;
signed int __SELECTED_FEATURE_Keys;
signed int __SELECTED_FEATURE_Sign;
signed int __SELECTED_FEATURE_Verify;
signed int __ste_ClientAddressBook_size0=0;
signed int __ste_ClientAddressBook_size1=0;
signed int __ste_ClientAddressBook_size2=0;
signed int __ste_ClientKeyring_size0=0;
signed int __ste_ClientKeyring_size1=0;
signed int __ste_ClientKeyring_size2=0;
signed int __ste_Client_AddressBook0_Address0=0;
signed int __ste_Client_AddressBook0_Address1=0;
signed int __ste_Client_AddressBook0_Address2=0;
signed int __ste_Client_AddressBook0_Alias0=0;
signed int __ste_Client_AddressBook0_Alias1=0;
signed int __ste_Client_AddressBook0_Alias2=0;
signed int __ste_Client_AddressBook1_Address0=0;
signed int __ste_Client_AddressBook1_Address1=0;
signed int __ste_Client_AddressBook1_Address2=0;
signed int __ste_Client_AddressBook1_Alias0=0;
signed int __ste_Client_AddressBook1_Alias1=0;
signed int __ste_Client_AddressBook1_Alias2=0;
signed int __ste_Client_AddressBook2_Address0=0;
signed int __ste_Client_AddressBook2_Address1=0;
signed int __ste_Client_AddressBook2_Address2=0;
signed int __ste_Client_AddressBook2_Alias0=0;
signed int __ste_Client_AddressBook2_Alias1=0;
signed int __ste_Client_AddressBook2_Alias2=0;
signed int __ste_Client_Keyring0_PublicKey0=0;
signed int __ste_Client_Keyring0_PublicKey1=0;
signed int __ste_Client_Keyring0_PublicKey2=0;
signed int __ste_Client_Keyring0_User0=0;
signed int __ste_Client_Keyring0_User1=0;
signed int __ste_Client_Keyring0_User2=0;
signed int __ste_Client_Keyring1_PublicKey0=0;
signed int __ste_Client_Keyring1_PublicKey1=0;
signed int __ste_Client_Keyring1_PublicKey2=0;
signed int __ste_Client_Keyring1_User0=0;
signed int __ste_Client_Keyring1_User1=0;
signed int __ste_Client_Keyring1_User2=0;
signed int __ste_Client_Keyring2_PublicKey0=0;
signed int __ste_Client_Keyring2_PublicKey1=0;
signed int __ste_Client_Keyring2_PublicKey2=0;
signed int __ste_Client_Keyring2_User0=0;
signed int __ste_Client_Keyring2_User1=0;
signed int __ste_Client_Keyring2_User2=0;
signed int __ste_Client_counter=0;
signed int __ste_Email_counter=0;
signed int __ste_client_autoResponse0=0;
signed int __ste_client_autoResponse1=0;
signed int __ste_client_autoResponse2=0;
signed int __ste_client_forwardReceiver0=0;
signed int __ste_client_forwardReceiver1=0;
signed int __ste_client_forwardReceiver2=0;
signed int __ste_client_forwardReceiver3=0;
signed int __ste_client_idCounter0=0;
signed int __ste_client_idCounter1=0;
signed int __ste_client_idCounter2=0;
char *__ste_client_name0=((char *)NULL);
char *__ste_client_name1=((char *)NULL);
char *__ste_client_name2=((char *)NULL);
signed int __ste_client_outbuffer0=0;
signed int __ste_client_outbuffer1=0;
signed int __ste_client_outbuffer2=0;
signed int __ste_client_outbuffer3=0;
signed int __ste_client_privateKey0=0;
signed int __ste_client_privateKey1=0;
signed int __ste_client_privateKey2=0;
char *__ste_email_body0=((char *)NULL);
char *__ste_email_body1=((char *)NULL);
signed int __ste_email_encryptionKey0=0;
signed int __ste_email_encryptionKey1=0;
signed int __ste_email_from0=0;
signed int __ste_email_from1=0;
signed int __ste_email_id0=0;
signed int __ste_email_id1=0;
signed int __ste_email_isEncrypted0=0;
signed int __ste_email_isEncrypted1=0;
signed int __ste_email_isSignatureVerified0;
signed int __ste_email_isSignatureVerified1;
signed int __ste_email_isSigned0=0;
signed int __ste_email_isSigned1=0;
signed int __ste_email_signKey0=0;
signed int __ste_email_signKey1=0;
char *__ste_email_subject0;
char *__ste_email_subject1;
signed int __ste_email_to0=0;
signed int __ste_email_to1=0;
signed int bob;
signed int chuck;
static struct __ACC__ERR *head=((struct __ACC__ERR *)NULL);
signed int queue_empty=1;
signed int queued_client;
signed int queued_message;
signed int rjh;
