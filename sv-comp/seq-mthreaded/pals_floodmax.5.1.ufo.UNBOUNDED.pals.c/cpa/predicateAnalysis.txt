Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Language C detected and set for analysis (CPAMain.detectFrontendLanguageIfNecessary, INFO)

Using the following resource limits: CPU-time limit of 900s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker 2.1 / predicateAnalysis (OpenJDK 64-Bit Server VM 14.0.2) started (CPAchecker.run, INFO)

Parsing CFA from file(s) "data/sv-benchmarks/c/seq-mthreaded/pals_floodmax.5.1.ufo.UNBOUNDED.pals.c" (CPAchecker.parse, INFO)

line 2764: Dead code detected: return 0; (CFACreationUtils.addEdgeToCFA, INFO)

Using predicate analysis with MathSAT5 version 5.6.6 (218275631c24) (Apr 23 2021 08:35:29, gmp 6.1.2, gcc 7.5.0, 64-bit, reentrant) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

WARNING: Function assert() without body detected. Please run the C preprocessor on this file to enable assertion checking. (AssertionAutomaton:AutomatonTransition.executeActions, INFO)

WARNING: Function assert() without body detected. Please run the C preprocessor on this file to enable assertion checking. (AssertionAutomaton:AutomatonTransition.executeActions, INFO)

WARNING: Function assert() without body detected. Please run the C preprocessor on this file to enable assertion checking. (AssertionAutomaton:AutomatonTransition.executeActions, INFO)

WARNING: Function assert() without body detected. Please run the C preprocessor on this file to enable assertion checking. (AssertionAutomaton:AutomatonTransition.executeActions, INFO)

WARNING: Function assert() without body detected. Please run the C preprocessor on this file to enable assertion checking. (AssertionAutomaton:AutomatonTransition.executeActions, INFO)

WARNING: Function assert() without body detected. Please run the C preprocessor on this file to enable assertion checking. (AssertionAutomaton:AutomatonTransition.executeActions, INFO)

WARNING: Function assert() without body detected. Please run the C preprocessor on this file to enable assertion checking. (AssertionAutomaton:AutomatonTransition.executeActions, INFO)

WARNING: Function assert() without body detected. Please run the C preprocessor on this file to enable assertion checking. (AssertionAutomaton:AutomatonTransition.executeActions, INFO)

WARNING: Function assert() without body detected. Please run the C preprocessor on this file to enable assertion checking. (AssertionAutomaton:AutomatonTransition.executeActions, INFO)

WARNING: Function assert() without body detected. Please run the C preprocessor on this file to enable assertion checking. (AssertionAutomaton:AutomatonTransition.executeActions, INFO)

WARNING: Function assert() without body detected. Please run the C preprocessor on this file to enable assertion checking. (AssertionAutomaton:AutomatonTransition.executeActions, INFO)

WARNING: Function assert() without body detected. Please run the C preprocessor on this file to enable assertion checking. (AssertionAutomaton:AutomatonTransition.executeActions, INFO)

WARNING: Function assert() without body detected. Please run the C preprocessor on this file to enable assertion checking. (AssertionAutomaton:AutomatonTransition.executeActions, INFO)

WARNING: Function assert() without body detected. Please run the C preprocessor on this file to enable assertion checking. (AssertionAutomaton:AutomatonTransition.executeActions, INFO)

WARNING: Function assert() without body detected. Please run the C preprocessor on this file to enable assertion checking. (AssertionAutomaton:AutomatonTransition.executeActions, INFO)

WARNING: Function assert() without body detected. Please run the C preprocessor on this file to enable assertion checking. (AssertionAutomaton:AutomatonTransition.executeActions, INFO)

WARNING: Function assert() without body detected. Please run the C preprocessor on this file to enable assertion checking. (AssertionAutomaton:AutomatonTransition.executeActions, INFO)

WARNING: Function assert() without body detected. Please run the C preprocessor on this file to enable assertion checking. (AssertionAutomaton:AutomatonTransition.executeActions, INFO)

WARNING: Function assert() without body detected. Please run the C preprocessor on this file to enable assertion checking. (AssertionAutomaton:AutomatonTransition.executeActions, INFO)

WARNING: Function assert() without body detected. Please run the C preprocessor on this file to enable assertion checking. (AssertionAutomaton:AutomatonTransition.executeActions, INFO)

WARNING: Function assert() without body detected. Please run the C preprocessor on this file to enable assertion checking. (AssertionAutomaton:AutomatonTransition.executeActions, INFO)

WARNING: Function assert() without body detected. Please run the C preprocessor on this file to enable assertion checking. (AssertionAutomaton:AutomatonTransition.executeActions, INFO)

WARNING: Function assert() without body detected. Please run the C preprocessor on this file to enable assertion checking. (AssertionAutomaton:AutomatonTransition.executeActions, INFO)

WARNING: Function assert() without body detected. Please run the C preprocessor on this file to enable assertion checking. (AssertionAutomaton:AutomatonTransition.executeActions, INFO)

WARNING: Function assert() without body detected. Please run the C preprocessor on this file to enable assertion checking. (AssertionAutomaton:AutomatonTransition.executeActions, INFO)

WARNING: Function assert() without body detected. Please run the C preprocessor on this file to enable assertion checking. (AssertionAutomaton:AutomatonTransition.executeActions, INFO)

WARNING: Function assert() without body detected. Please run the C preprocessor on this file to enable assertion checking. (AssertionAutomaton:AutomatonTransition.executeActions, INFO)

WARNING: Function assert() without body detected. Please run the C preprocessor on this file to enable assertion checking. (AssertionAutomaton:AutomatonTransition.executeActions, INFO)

WARNING: Function assert() without body detected. Please run the C preprocessor on this file to enable assertion checking. (AssertionAutomaton:AutomatonTransition.executeActions, INFO)

WARNING: Function assert() without body detected. Please run the C preprocessor on this file to enable assertion checking. (AssertionAutomaton:AutomatonTransition.executeActions, INFO)

WARNING: Function assert() without body detected. Please run the C preprocessor on this file to enable assertion checking. (AssertionAutomaton:AutomatonTransition.executeActions, INFO)

WARNING: Function assert() without body detected. Please run the C preprocessor on this file to enable assertion checking. (AssertionAutomaton:AutomatonTransition.executeActions, INFO)

Stopping analysis ... (CPAchecker.runAlgorithm, INFO)


PredicateCPA statistics
-----------------------
Number of abstractions:            44 (0% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  0 (0%)
  Because of loop head:            22 (50%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         22 (50%)
  Times precision was empty:       3 (7%)
  Times precision was {false}:     0 (0%)
  Times result was cached:         0 (0%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      41 (93%)
  Times result was 'false':        16 (36%)
Number of strengthen sat checks:   0
Number of coverage checks:         8056
  BDD entailment checks:           100
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       861
Avg ABE block size:                                290.14 (sum: 12766, count: 44, min: 200, max: 861)
Number of predicates discovered:          89
Number of abstraction locations:          2
Max number of predicates per location:    87
Avg number of predicates per location:    44
Total predicates per abstraction:         1403
Max number of predicates per abstraction: 87
Avg number of predicates per abstraction: 34.22
Number of irrelevant predicates:          20 (1%)
Number of preds handled by boolean abs:   1383 (99%)
  Total number of models for allsat:      25
  Max number of models for allsat:        1
  Avg number of models for allsat:        0.61

Time for post operator:                                0.265s
  Time for path formula creation:                      0.255s
Time for strengthen operator:                          0.031s
Time for prec operator:                                1.860s
  Time for abstraction:                  1.846s (Max:     0.092s, Count: 44)
    Boolean abstraction:                 1.557s
    Solving time:                        1.361s (Max:     0.053s)
    Model enumeration time:              0.179s
    Time for BDD construction:           0.016s (Max:     0.004s)
Time for merge operator:                               0.056s
Time for coverage checks:                              0.004s
  Time for BDD entailment checks:                      0.002s
Total time for SMT solver (w/o itp):     1.540s

Number of path formula cache hits:   14537 (59%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:     0.267s

Total number of created targets for pointer analysis: 0


Number of BDD nodes:                               24413
Size of BDD node table:                            524309
Size of BDD cache:                                 52433
Size of BDD node cleanup queue:                    1.78 (sum: 3445, count: 1936, min: 0, max: 1412)
Time for BDD node cleanup:                             0.000s
Time for BDD garbage collection:                       0.000s (in 0 runs)

KeyValue statistics
-------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (AssertionAutomaton) statistics
-------------------------------------------------
Number of states:                                  1
Total time for successor computation:                  0.027s
Total time for strengthen operator:                    0.017s
Automaton transfers with branching:                0
Automaton transfer successors:                     1.00 (sum: 19610, count: 19610, min: 1, max: 1) [1 x 19610]
Number of states with assumption transitions:      0

AutomatonAnalysis (ErrorLabelAutomaton) statistics
--------------------------------------------------
Number of states:                                  1
Total time for successor computation:                  0.013s
Automaton transfers with branching:                0
Automaton transfer successors:                     1.00 (sum: 19610, count: 19610, min: 1, max: 1) [1 x 19610]
Number of states with assumption transitions:      0

AutomatonAnalysis (TerminatingFunctions) statistics
---------------------------------------------------
Number of states:                                  1
Total time for successor computation:                  0.023s
Automaton transfers with branching:                0
Automaton transfer successors:                     1.00 (sum: 19608, count: 19610, min: 0, max: 1) [0 x 2, 1 x 19608]
Number of states with assumption transitions:      0

CPA algorithm statistics
------------------------
Number of iterations:            13258
Max size of waitlist:            41
Average size of waitlist:        3
ReversePostorderSortedWaitlist:                    0.00 (sum: 0, count: 1090, min: 0, max: 0)
CallstackSortedWaitlist:                           6335.67 (sum: 38014, count: 6, min: 1954, max: 12168)
Number of computed successors:   17258
Max successors for one state:    2
Number of times merged:          3978
Number of times stopped:         3978
Number of times breaked:         6

Total time for CPA algorithm:         2.602s (Max:     0.814s)
  Time for choose from waitlist:      0.012s
  Time for precision adjustment:      1.890s
  Time for transfer relation:         0.512s
  Time for merge operator:            0.100s
  Time for stop operator:             0.021s
  Time for adding to reached set:     0.024s

Static Predicate Refiner statistics
-----------------------------------
Number of predicates found statically:                    1 (count: 1, min: 1, max: 1, avg: 1.00)

Total time for static refinement:                      0.154s
  Time for path feasibility check:                     0.106s
  Time for predicate extraction from CFA:              0.010s
  Time for ARG update:                                 0.009s

PredicateCPARefiner statistics
------------------------------
Number of predicate refinements:                   5
Avg. length of target path (in blocks):            5.20 (sum: 26, count: 5, min: 2, max: 9)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                 409.895s
  Counterexample analysis:                           409.388s (Max:   406.321s, Calls: 6)
    Refinement sat check:                             41.220s
    Interpolant computation:                           0.087s
  Path-formulas extraction:                            0.000s
  Error path post-processing:                          0.451s

Predicate-Abstraction Refiner statistics
----------------------------------------
  Predicate creation:                                  0.010s
  Precision update:                                    0.009s
  ARG update:                                          0.010s

Length of refined path (in blocks):                4.25 (sum: 17, count: 4, min: 2, max: 7)
Number of affected states:                               13 (count: 4, min: 1, max: 6, avg: 3.25)
Length (states) of path with itp 'true':                  0 (count: 4, min: 0, max: 0, avg: 0.00)
Length (states) of path with itp non-trivial itp:        13 (count: 4, min: 1, max: 6, avg: 3.25)
Length (states) of path with itp 'false':                 0 (count: 4, min: 0, max: 0, avg: 0.00)
Different non-trivial interpolants along paths:           9 (count: 4, min: 0, max: 5, avg: 2.25)
Equal non-trivial interpolants along paths:               0 (count: 4, min: 0, max: 0, avg: 0.00)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of CEGAR refinements:          6
Number of successful refinements:     5
Number of failed refinements:         0
Max. size of reached set before ref.: 5282
Max. size of reached set after ref.:  1675
Avg. size of reached set before ref.: 3327.67
Avg. size of reached set after ref.:  1340.20

Total time for CEGAR algorithm:     412.663s
Time for refinements:               410.060s
Average time for refinement:         68.343s
Max time for refinement:            406.803s

CPAchecker general statistics
-----------------------------
Number of program locations:                       2709
Number of CFA edges (per node):                        3310 (count: 2709, min: 1, max: 2, avg: 1.22)
Number of relevant variables:                      224
Number of functions:                               11
Number of loops (and loop nodes):                         1 (sum: 49, min: 49, max: 49, avg: 49.00)
Size of reached set:             5282
  Number of reached locations:   2127 (79%)
    Avg states per location:     2
    Max states per location:     8 (at node N10)
  Number of reached functions:   10 (91%)
  Number of partitions:          5275
    Avg size of partitions:      1
    Max size of partitions:      8 (with key [N2835 (before line 2712), Function main called from node N2732, stack depth 1 [6573d2f7], stack [main]])
  Number of target states:       1
  Size of final wait list:       2

Time for analysis setup:          0.991s
  Time for loading CPAs:          0.261s
  Time for loading parser:        0.100s
  Time for CFA construction:      0.580s
    Time for parsing file(s):     0.214s
    Time for AST to CFA:          0.197s
    Time for CFA sanity check:    0.001s
    Time for post-processing:     0.131s
      Time for function pointers resolving:            0.004s
        Function calls via function pointers:             0 (count: 1, min: 0, max: 0, avg: 0.00)
        Instrumented function pointer calls:              0 (count: 1, min: 0, max: 0, avg: 0.00)
        Function calls with function pointer arguments:        0 (count: 1, min: 0, max: 0, avg: 0.00)
        Instrumented function pointer arguments:          0 (count: 1, min: 0, max: 0, avg: 0.00)
      Time for classifying variables:                  0.083s
        Time for collecting variables:                 0.044s
        Time for solving dependencies:                 0.002s
        Time for building hierarchy:                   0.000s
        Time for building classification:              0.037s
        Time for exporting data:                       0.000s
Time for Analysis:              412.663s
CPU time for analysis:          422.100s
Time for analyzing result:        0.006s
Total time for CPAchecker:      413.655s
Total CPU time for CPAchecker:  427.000s
Time for statistics:              0.045s

Time for Garbage Collector:       0.047s (in 7 runs)
Garbage Collector(s) used:    G1 Old Generation, G1 Young Generation

Verification result: FALSE. Property violation (error label in line 2773) found by chosen configuration.
More details about the verification run can be found in the directory "./output".
peak memory usage: 874.06 MB
