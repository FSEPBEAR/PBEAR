Running CPAchecker with default stack size (1024k). Specify a larger value with -stack if needed.
Language C detected and set for analysis (CPAMain.detectFrontendLanguageIfNecessary, INFO)

Using the following resource limits: CPU-time limit of 900s (ResourceLimitChecker.fromConfiguration, INFO)

CPAchecker 2.1 / predicateAnalysis (OpenJDK 64-Bit Server VM 14.0.2) started (CPAchecker.run, INFO)

Parsing CFA from file(s) "data/sv-benchmarks/c/seq-mthreaded/pals_floodmax.5.4.ufo.BOUNDED-10.pals.c" (CPAchecker.parse, INFO)

Using predicate analysis with MathSAT5 version 5.6.6 (218275631c24) (Apr 23 2021 08:35:29, gmp 6.1.2, gcc 7.5.0, 64-bit, reentrant) and JFactory 1.21. (PredicateCPA:PredicateCPA.<init>, INFO)

Using refinement for predicate analysis with PredicateAbstractionRefinementStrategy strategy. (PredicateCPA:PredicateCPARefiner.<init>, INFO)

Starting analysis ... (CPAchecker.runAlgorithm, INFO)

WARNING: Function assert() without body detected. Please run the C preprocessor on this file to enable assertion checking. (AssertionAutomaton:AutomatonTransition.executeActions, INFO)

WARNING: Function assert() without body detected. Please run the C preprocessor on this file to enable assertion checking. (AssertionAutomaton:AutomatonTransition.executeActions, INFO)

WARNING: Function assert() without body detected. Please run the C preprocessor on this file to enable assertion checking. (AssertionAutomaton:AutomatonTransition.executeActions, INFO)

WARNING: Function assert() without body detected. Please run the C preprocessor on this file to enable assertion checking. (AssertionAutomaton:AutomatonTransition.executeActions, INFO)

WARNING: Function assert() without body detected. Please run the C preprocessor on this file to enable assertion checking. (AssertionAutomaton:AutomatonTransition.executeActions, INFO)

WARNING: Function assert() without body detected. Please run the C preprocessor on this file to enable assertion checking. (AssertionAutomaton:AutomatonTransition.executeActions, INFO)

WARNING: Function assert() without body detected. Please run the C preprocessor on this file to enable assertion checking. (AssertionAutomaton:AutomatonTransition.executeActions, INFO)

WARNING: Function assert() without body detected. Please run the C preprocessor on this file to enable assertion checking. (AssertionAutomaton:AutomatonTransition.executeActions, INFO)

WARNING: Function assert() without body detected. Please run the C preprocessor on this file to enable assertion checking. (AssertionAutomaton:AutomatonTransition.executeActions, INFO)

WARNING: Function assert() without body detected. Please run the C preprocessor on this file to enable assertion checking. (AssertionAutomaton:AutomatonTransition.executeActions, INFO)

WARNING: Function assert() without body detected. Please run the C preprocessor on this file to enable assertion checking. (AssertionAutomaton:AutomatonTransition.executeActions, INFO)

WARNING: Function assert() without body detected. Please run the C preprocessor on this file to enable assertion checking. (AssertionAutomaton:AutomatonTransition.executeActions, INFO)

WARNING: Function assert() without body detected. Please run the C preprocessor on this file to enable assertion checking. (AssertionAutomaton:AutomatonTransition.executeActions, INFO)

WARNING: Function assert() without body detected. Please run the C preprocessor on this file to enable assertion checking. (AssertionAutomaton:AutomatonTransition.executeActions, INFO)

WARNING: Function assert() without body detected. Please run the C preprocessor on this file to enable assertion checking. (AssertionAutomaton:AutomatonTransition.executeActions, INFO)

WARNING: Function assert() without body detected. Please run the C preprocessor on this file to enable assertion checking. (AssertionAutomaton:AutomatonTransition.executeActions, INFO)

WARNING: Function assert() without body detected. Please run the C preprocessor on this file to enable assertion checking. (AssertionAutomaton:AutomatonTransition.executeActions, INFO)

WARNING: Function assert() without body detected. Please run the C preprocessor on this file to enable assertion checking. (AssertionAutomaton:AutomatonTransition.executeActions, INFO)

WARNING: Function assert() without body detected. Please run the C preprocessor on this file to enable assertion checking. (AssertionAutomaton:AutomatonTransition.executeActions, INFO)

WARNING: Function assert() without body detected. Please run the C preprocessor on this file to enable assertion checking. (AssertionAutomaton:AutomatonTransition.executeActions, INFO)

WARNING: Function assert() without body detected. Please run the C preprocessor on this file to enable assertion checking. (AssertionAutomaton:AutomatonTransition.executeActions, INFO)

WARNING: Function assert() without body detected. Please run the C preprocessor on this file to enable assertion checking. (AssertionAutomaton:AutomatonTransition.executeActions, INFO)

WARNING: Function assert() without body detected. Please run the C preprocessor on this file to enable assertion checking. (AssertionAutomaton:AutomatonTransition.executeActions, INFO)

WARNING: Function assert() without body detected. Please run the C preprocessor on this file to enable assertion checking. (AssertionAutomaton:AutomatonTransition.executeActions, INFO)

WARNING: Function assert() without body detected. Please run the C preprocessor on this file to enable assertion checking. (AssertionAutomaton:AutomatonTransition.executeActions, INFO)

WARNING: Function assert() without body detected. Please run the C preprocessor on this file to enable assertion checking. (AssertionAutomaton:AutomatonTransition.executeActions, INFO)

WARNING: Function assert() without body detected. Please run the C preprocessor on this file to enable assertion checking. (AssertionAutomaton:AutomatonTransition.executeActions, INFO)

WARNING: Function assert() without body detected. Please run the C preprocessor on this file to enable assertion checking. (AssertionAutomaton:AutomatonTransition.executeActions, INFO)

WARNING: Function assert() without body detected. Please run the C preprocessor on this file to enable assertion checking. (AssertionAutomaton:AutomatonTransition.executeActions, INFO)

WARNING: Function assert() without body detected. Please run the C preprocessor on this file to enable assertion checking. (AssertionAutomaton:AutomatonTransition.executeActions, INFO)

WARNING: Function assert() without body detected. Please run the C preprocessor on this file to enable assertion checking. (AssertionAutomaton:AutomatonTransition.executeActions, INFO)

WARNING: Function assert() without body detected. Please run the C preprocessor on this file to enable assertion checking. (AssertionAutomaton:AutomatonTransition.executeActions, INFO)

WARNING: Function assert() without body detected. Please run the C preprocessor on this file to enable assertion checking. (AssertionAutomaton:AutomatonTransition.executeActions, INFO)

WARNING: Function assert() without body detected. Please run the C preprocessor on this file to enable assertion checking. (AssertionAutomaton:AutomatonTransition.executeActions, INFO)

WARNING: Function assert() without body detected. Please run the C preprocessor on this file to enable assertion checking. (AssertionAutomaton:AutomatonTransition.executeActions, INFO)

WARNING: Function assert() without body detected. Please run the C preprocessor on this file to enable assertion checking. (AssertionAutomaton:AutomatonTransition.executeActions, INFO)

Stopping analysis ... (CPAchecker.runAlgorithm, INFO)


PredicateCPA statistics
-----------------------
Number of abstractions:            50 (0% of all post computations)
  Times abstraction was reused:    0
  Because of function entry/exit:  0 (0%)
  Because of loop head:            25 (50%)
  Because of join nodes:           0 (0%)
  Because of threshold:            0 (0%)
  Because of target state:         25 (50%)
  Times precision was empty:       3 (6%)
  Times precision was {false}:     0 (0%)
  Times result was cached:         0 (0%)
  Times cartesian abs was used:    0 (0%)
  Times boolean abs was used:      47 (94%)
  Times result was 'false':        18 (36%)
Number of strengthen sat checks:   0
Number of coverage checks:         8726
  BDD entailment checks:           106
Number of SMT sat checks:          0
  trivial:                         0
  cached:                          0

Max ABE block size:                       961
Avg ABE block size:                                303.46 (sum: 15173, count: 50, min: 196, max: 961)
Number of predicates discovered:          76
Number of abstraction locations:          2
Max number of predicates per location:    74
Avg number of predicates per location:    38
Total predicates per abstraction:         1476
Max number of predicates per abstraction: 74
Avg number of predicates per abstraction: 31.40
Number of irrelevant predicates:          23 (2%)
Number of preds handled by boolean abs:   1453 (98%)
  Total number of models for allsat:      37
  Max number of models for allsat:        2
  Avg number of models for allsat:        0.79

Time for post operator:                                0.288s
  Time for path formula creation:                      0.277s
Time for strengthen operator:                          0.042s
Time for prec operator:                                2.437s
  Time for abstraction:                  2.417s (Max:     0.124s, Count: 50)
    Boolean abstraction:                 1.990s
    Solving time:                        1.849s (Max:     0.080s)
    Model enumeration time:              0.113s
    Time for BDD construction:           0.031s (Max:     0.012s)
Time for merge operator:                               0.084s
Time for coverage checks:                              0.002s
  Time for BDD entailment checks:                      0.001s
Total time for SMT solver (w/o itp):     1.962s

Number of path formula cache hits:   16668 (63%)

Inside post operator:                  
  Inside path formula creation:        
    Time for path formula computation:     0.265s

Total number of created targets for pointer analysis: 0


Number of BDD nodes:                               34139
Size of BDD node table:                            524309
Size of BDD cache:                                 52433
Size of BDD node cleanup queue:                    1.42 (sum: 3046, count: 2146, min: 0, max: 1227)
Time for BDD node cleanup:                             0.000s
Time for BDD garbage collection:                       0.000s (in 0 runs)

KeyValue statistics
-------------------
Init. function predicates:                         0
Init. global predicates:                           0
Init. location predicates:                         0

Invariant Generation statistics
-------------------------------

AutomatonAnalysis (AssertionAutomaton) statistics
-------------------------------------------------
Number of states:                                  1
Total time for successor computation:                  0.042s
Total time for strengthen operator:                    0.028s
Automaton transfers with branching:                0
Automaton transfer successors:                     1.00 (sum: 21363, count: 21363, min: 1, max: 1) [1 x 21363]
Number of states with assumption transitions:      0

AutomatonAnalysis (ErrorLabelAutomaton) statistics
--------------------------------------------------
Number of states:                                  1
Total time for successor computation:                  0.014s
Automaton transfers with branching:                0
Automaton transfer successors:                     1.00 (sum: 21363, count: 21363, min: 1, max: 1) [1 x 21363]
Number of states with assumption transitions:      0

AutomatonAnalysis (TerminatingFunctions) statistics
---------------------------------------------------
Number of states:                                  1
Total time for successor computation:                  0.015s
Automaton transfers with branching:                0
Automaton transfer successors:                     1.00 (sum: 21361, count: 21363, min: 0, max: 1) [0 x 2, 1 x 21361]
Number of states with assumption transitions:      0

CPA algorithm statistics
------------------------
Number of iterations:            14462
Max size of waitlist:            61
Average size of waitlist:        4
ReversePostorderSortedWaitlist:                    0.00 (sum: 0, count: 1220, min: 0, max: 0)
CallstackSortedWaitlist:                           6839.00 (sum: 47873, count: 7, min: 2021, max: 13242)
Number of computed successors:   18797
Max successors for one state:    2
Number of times merged:          4310
Number of times stopped:         4310
Number of times breaked:         7

Total time for CPA algorithm:         3.343s (Max:     0.837s)
  Time for choose from waitlist:      0.012s
  Time for precision adjustment:      2.481s
  Time for transfer relation:         0.601s
  Time for merge operator:            0.149s
  Time for stop operator:             0.033s
  Time for adding to reached set:     0.025s

Static Predicate Refiner statistics
-----------------------------------
Number of predicates found statically:                    1 (count: 1, min: 1, max: 1, avg: 1.00)

Total time for static refinement:                      0.167s
  Time for path feasibility check:                     0.097s
  Time for predicate extraction from CFA:              0.009s
  Time for ARG update:                                 0.011s

PredicateCPARefiner statistics
------------------------------
Number of predicate refinements:                   6
Avg. length of target path (in blocks):            5.00 (sum: 30, count: 6, min: 2, max: 9)
Number of infeasible sliced prefixes:                     0 (count: 0, min: 0, max: 0, avg: 0.00)

Time for refinement:                                 429.264s
  Counterexample analysis:                           428.651s (Max:   425.072s, Calls: 7)
    Refinement sat check:                            427.103s
    Interpolant computation:                           0.068s
  Path-formulas extraction:                            0.000s
  Error path post-processing:                          0.471s

Predicate-Abstraction Refiner statistics
----------------------------------------
  Predicate creation:                                  0.011s
  Precision update:                                    0.025s
  ARG update:                                          0.031s

Length of refined path (in blocks):                4.20 (sum: 21, count: 5, min: 2, max: 7)
Number of affected states:                               16 (count: 5, min: 1, max: 6, avg: 3.20)
Length (states) of path with itp 'true':                  0 (count: 5, min: 0, max: 0, avg: 0.00)
Length (states) of path with itp non-trivial itp:        16 (count: 5, min: 1, max: 6, avg: 3.20)
Length (states) of path with itp 'false':                 0 (count: 5, min: 0, max: 0, avg: 0.00)
Different non-trivial interpolants along paths:          11 (count: 5, min: 0, max: 5, avg: 2.20)
Equal non-trivial interpolants along paths:               0 (count: 5, min: 0, max: 0, avg: 0.00)
Number of refs with location-based cutoff:                0

CEGAR algorithm statistics
--------------------------
Number of CEGAR refinements:          7
Number of successful refinements:     6
Number of failed refinements:         0
Max. size of reached set before ref.: 5265
Max. size of reached set after ref.:  1755
Avg. size of reached set before ref.: 3320.86
Avg. size of reached set after ref.:  1462.67

Total time for CEGAR algorithm:     432.789s
Time for refinements:               429.446s
Average time for refinement:         61.349s
Max time for refinement:            425.576s

CPAchecker general statistics
-----------------------------
Number of program locations:                       2778
Number of CFA edges (per node):                        3394 (count: 2778, min: 0, max: 2, avg: 1.22)
Number of relevant variables:                      264
Number of functions:                               11
Number of loops (and loop nodes):                         1 (sum: 52, min: 52, max: 52, avg: 52.00)
Size of reached set:             5265
  Number of reached locations:   2195 (79%)
    Avg states per location:     2
    Max states per location:     8 (at node N10)
  Number of reached functions:   10 (91%)
  Number of partitions:          5258
    Avg size of partitions:      1
    Max size of partitions:      8 (with key [N2900 (before line 2776), Function main called from node N2797, stack depth 1 [2630dbc4], stack [main]])
  Number of target states:       1
  Size of final wait list:       2

Time for analysis setup:          1.037s
  Time for loading CPAs:          0.281s
  Time for loading parser:        0.106s
  Time for CFA construction:      0.597s
    Time for parsing file(s):     0.216s
    Time for AST to CFA:          0.194s
    Time for CFA sanity check:    0.000s
    Time for post-processing:     0.151s
      Time for function pointers resolving:            0.005s
        Function calls via function pointers:             0 (count: 1, min: 0, max: 0, avg: 0.00)
        Instrumented function pointer calls:              0 (count: 1, min: 0, max: 0, avg: 0.00)
        Function calls with function pointer arguments:        0 (count: 1, min: 0, max: 0, avg: 0.00)
        Instrumented function pointer arguments:          0 (count: 1, min: 0, max: 0, avg: 0.00)
      Time for classifying variables:                  0.102s
        Time for collecting variables:                 0.051s
        Time for solving dependencies:                 0.002s
        Time for building hierarchy:                   0.000s
        Time for building classification:              0.049s
        Time for exporting data:                       0.000s
Time for Analysis:              432.789s
CPU time for analysis:          443.560s
Time for analyzing result:        0.006s
Total time for CPAchecker:      433.827s
Total CPU time for CPAchecker:  448.360s
Time for statistics:              0.044s

Time for Garbage Collector:       0.075s (in 8 runs)
Garbage Collector(s) used:    G1 Old Generation, G1 Young Generation

Verification result: FALSE. Property violation (error label in line 2838) found by chosen configuration.
More details about the verification run can be found in the directory "./output".
peak memory usage: 762.12 MB
