outputs: __iv__return_expr_fibonacci 
logs: 
{"Func":"fibonacci","Input":[{"Var":"n","Val":12}],"Output":[{"Var":"__iv__return_expr_fibonacci","Val":144}],"InitOutput":[],}
{"Func":"fibonacci","Input":[{"Var":"n","Val":10}],"Output":[{"Var":"__iv__return_expr_fibonacci","Val":55}],"InitOutput":[],}
{"Func":"fibonacci","Input":[{"Var":"n","Val":16}],"Output":[{"Var":"__iv__return_expr_fibonacci","Val":987}],"InitOutput":[],}
{"Func":"fibonacci","Input":[{"Var":"n","Val":1}],"Output":[{"Var":"__iv__return_expr_fibonacci","Val":1}],"InitOutput":[],}
{"Func":"fibonacci","Input":[{"Var":"n","Val":13}],"Output":[{"Var":"__iv__return_expr_fibonacci","Val":233}],"InitOutput":[],}
{"Func":"fibonacci","Input":[{"Var":"n","Val":5}],"Output":[{"Var":"__iv__return_expr_fibonacci","Val":5}],"InitOutput":[],}
{"Func":"fibonacci","Input":[{"Var":"n","Val":4}],"Output":[{"Var":"__iv__return_expr_fibonacci","Val":3}],"InitOutput":[],}
{"Func":"fibonacci","Input":[{"Var":"n","Val":3}],"Output":[{"Var":"__iv__return_expr_fibonacci","Val":2}],"InitOutput":[],}
logs end
SyGuS code:
__iv__return_expr_fibonacci:ite >= 2 - * 5 3 ) __iv__input_0_ ) ) ite = 5 - __iv__input_0_ + 5 3 ) ) ) + * __iv__input_0_ + 5 3 ) ) + * 3 + 5 __iv__input_0_ ) ) * 5 * 5 3 ) ) ) ) * - 1 * 3 __iv__input_0_ ) ) - 0 + 5 __iv__input_0_ ) ) ) ) ite = __iv__input_0_ + 5 5 ) ) + 5 * 5 __iv__input_0_ ) ) ite and >= __iv__input_0_ 2 ) < __iv__input_0_ 5 ) ) - __iv__input_0_ 1 ) ite or >= 1 __iv__input_0_ ) = 5 __iv__input_0_ ) ) __iv__input_0_ * __iv__input_0_ __iv__input_0_ ) ) ) ) )
SyGuS end
assumes:
__iv__return_expr_fibonacci:1
assumes end:
signed int __iv__return_expr_fibonacci;
if(2>=(15-n)) if(5==(n-8)) __iv__return_expr_fibonacci = ((n*8)+((3*(5+n))+75)); else __iv__return_expr_fibonacci = ((1-(3*n))*(0-(5+n))); else if(n==10) __iv__return_expr_fibonacci = (5+(5*n)); else if((n>=2)&&(n<5)) __iv__return_expr_fibonacci = (n-1); else if((1>=n)||(5==n)) __iv__return_expr_fibonacci = n; else __iv__return_expr_fibonacci = (n*n); 
return __iv__return_expr_fibonacci;
complexity: 5
accuracy: 1.84%
coverage: 52.94%
max_comp_size: 5
