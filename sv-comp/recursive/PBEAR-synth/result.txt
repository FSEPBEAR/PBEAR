--src data/sv-benchmarks/c/recursive/Fibonacci04.c --wd results/recursive/ --unwind 1000 --synth-mode --synth-timeout 300 --synth-max-size 256 --synth-max-height 10 
code parsing time: 0.515 sec

select target function calls:
fibonacci(x) (call id 1) influences 1 external nodes
internal node ratio: 2.44% (1 of 41)

fibonacci((n - 1)) (call id 4) is deterministic.
fibonacci((n - 1)) (call id 4) is independent call
internal node ratio: 14.63% (6 of 41)

fibonacci((n - 2)) (call id 5) is deterministic.
fibonacci((n - 2)) (call id 5) is independent call
internal node ratio: 14.63% (6 of 41)

predict complexity: (unwind 1000)
criterion unwind: 1
fibonacci(x): original cmplx: 6
total cmplx: 7

loading I/O examples:
each logs of functions:
fibonacci: 543, output range: 17

total number of I/O examples: 543
loading time: 0.11 sec

synthesize stub:
function fibonacci: 
signed int __iv__return_expr_fibonacci;
if(2>=(15-n)) if(5==(n-8)) __iv__return_expr_fibonacci = ((n*8)+((3*(5+n))+75)); else __iv__return_expr_fibonacci = ((1-(3*n))*(0-(5+n))); else if(n==10) __iv__return_expr_fibonacci = (5+(5*n)); else if((n>=2)&&(n<5)) __iv__return_expr_fibonacci = (n-1); else if((1>=n)||(5==n)) __iv__return_expr_fibonacci = n; else __iv__return_expr_fibonacci = (n*n); 
return __iv__return_expr_fibonacci;
complexity: 5
accuracy: 1.84%
coverage: 52.94%
# constraints: 8

synthesizing time: 3600.01 sec