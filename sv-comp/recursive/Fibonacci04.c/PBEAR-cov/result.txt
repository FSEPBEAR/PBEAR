--src data/sv-benchmarks/c/recursive/Fibonacci04.c --wd results/recursive/Fibonacci04.c/acc --unwind 1000 --synth-dir results/recursive/acc/synth --synth-only-acc --synth-timeout 600 --synth-max-size 512 --synth-max-height 15 --sv-comp-mode 
code parsing time: 0.497 sec

select target function calls:
fibonacci(x) (call id 1) influences 1 external nodes
internal node ratio: 2.44% (1 of 41)

fibonacci((n - 1)) (call id 4) is deterministic.
fibonacci((n - 1)) (call id 4) is independent call
internal node ratio: 14.63% (6 of 41)

fibonacci((n - 2)) (call id 5) is deterministic.
fibonacci((n - 2)) (call id 5) is independent call
internal node ratio: 14.63% (6 of 41)

find the best target combination:
predict complexity: (unwind 1000)
criterion unwind: 1
fibonacci(x): original cmplx: 6, stub cmplx: 5
total cmplx: 7

Sep 22, 2023 3:21:05 PM iv_checker.select.TargetFunctionSelector printRank
INFO: 
1. fibonacci(x);  fitness: 1.000

call fibonacci(x) (call id 1)
Iteration 0:
signed int __iv__fibonacci_stub(signed int n) {
	signed int __iv__return_expr_fibonacci;
	if((n>=5)||(1==n)) if(2>=(15-n)) if(5==(n-8)) __iv__return_expr_fibonacci = ((n*8)+((3*(5+n))+75)); else __iv__return_expr_fibonacci = (((-1)-(n+n))*(1-n)); else if(2==(n-9)) __iv__return_expr_fibonacci = ((3*n)+((5*n)-(-1))); else __iv__return_expr_fibonacci = (n*n); else if((5>=n)&&(n>=2)) __iv__return_expr_fibonacci = (n-1); else __iv__return_expr_fibonacci = 0; 
	return __iv__return_expr_fibonacci;
}
complexity: 5
accuracy: 98.34%
coverage: 47.06%
# constraints: 8

run cbmc: (unwind: 10, timeout: 86400 sec)
cbmc running time: 0.099 sec

verification results: 
property 'assert(FALSE);' is TRUE alarm.

total CBMC running time: 0.099 sec
total true alarm finding time: 0.0 sec
total refinement time: 0.0 sec, # of refinements: 0
peak memory usage: 7.89 MB