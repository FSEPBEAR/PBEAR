typedef unsigned char __CPROVER_bool;
typedef unsigned int __CPROVER_size_t;
typedef unsigned int size_t;
typedef unsigned int time_t;
typedef unsigned short int wchar_t;
typedef enum FSM State;
void _iv_() {initialize();
!(1 != 0);
(signed int)machineState == 0;
(signed int)machineState == 1;
(signed int)machineState == 2;
(signed int)machineState == 3;
(signed int)machineState == 4;
(signed int)machineState == 5;
(signed int)machineState == 7;
(signed int)machineState == 6;
(signed int)machineState == 8;
(signed int)machineState == 9;
machineState=standingBy();
machineState=primaryScan();
machineState=secondaryScan();
machineState=onPatrol();
machineState=longRangeApproach();
machineState=closeRangeApproach();
machineState=acquireTarget();
machineState=findAWall();
machineState=disposeOfTarget();
machineState=taskComplete();
update_prop_automata();
check_property();
return __VERIFIER_nondet_signed_int();
signed int res;
signed int return_value___VERIFIER_nondet_unsigned_int;
signed int return_value_nondet_signed_int;
return_value_nondet_signed_int = __VERIFIER_nondet_signed_int();
return_value___VERIFIER_nondet_unsigned_int = return_value_nondet_signed_int;
res = return_value___VERIFIER_nondet_unsigned_int;
__CPROVER_assume(0 <= res && res <= 65535);
return res;
stopWheels();
signed int return_value_SensorValue;
signed int return_value_SensorValue;
return_value_SensorValue=SensorValue(3);
return_value_SensorValue == 0;
return (State)1;
return (State)0;
IRMax = 0;
clearTimer(0);
signed int return_value_time1;
return_value_time1=time1(0);
return_value_time1 >= 3000;
signed int return_value_SensorValue;
signed int return_value_SensorValue;
return_value_SensorValue=SensorValue(2);
IRMax >= return_value_SensorValue;
IRMax=SensorValue(2);
motor[0l] = (float)(25.0 * 1.3);
motor[1l] = (float)-25;
1 != 0;
stopWheels();
wait1Msec(200);
clearTimer(0);
signed int return_value_time1_0;
return_value_time1_0=time1(0);
return_value_time1_0 >= 6000;
signed int return_value_SensorValue_0;
signed int return_value_SensorValue_0;
return_value_SensorValue_0=SensorValue(2);
!(return_value_SensorValue_0 >= IRMax);
IRMax=SensorValue(2);
motor[0l] = (float)-(25.0 * 1.3);
motor[1l] = 25.0f;
1 != 0;
stopWheels();
wait1Msec(200);
clearTimer(0);
signed int return_value_time1_1;
return_value_time1_1=time1(0);
return_value_time1_1 >= 6000;
signed int return_value_SensorValue_1;
signed int return_value_SensorValue_1;
return_value_SensorValue_1=SensorValue(2);
IRMax + -20 >= return_value_SensorValue_1;
stopWheels();
return (State)5;
motor[0l] = (float)(25.0 * 1.3);
motor[1l] = (float)-25;
brobot_signal_loss = brobot_signal_loss + 1;
__CPROVER_assume(brobot_signal_loss <= brobot_max_loss);
1 != 0;
stopWheels();
return (State)3;
IRMax = 0;
sonarMax = 0;
clearTimer(0);
signed int return_value_time1;
return_value_time1=time1(0);
return_value_time1 >= 4000;
signed int return_value_SensorValue;
signed int return_value_SensorValue;
return_value_SensorValue=SensorValue(2);
IRMax >= return_value_SensorValue;
IRMax=SensorValue(2);
signed int return_value_SensorValue_0;
signed int return_value_SensorValue_0;
return_value_SensorValue_0=SensorValue(2);
return_value_SensorValue_0 >= ambientIR;
ambientIR=SensorValue(2);
motor[0l] = (float)-(30.0 * 1.3);
motor[1l] = 30.0f;
1 != 0;
clearTimer(0);
signed int return_value_time1_0;
return_value_time1_0=time1(0);
return_value_time1_0 >= 4000;
signed int return_value_SensorValue_1;
signed int return_value_SensorValue_1;
return_value_SensorValue_1=SensorValue(2);
ambientIR + 50 >= return_value_SensorValue_1;
stopWheels();
return (State)4;
motor[0l] = (float)-(25.0 * 1.3);
motor[1l] = 25.0f;
brobot_signal_loss = brobot_signal_loss + 1;
__CPROVER_assume(brobot_signal_loss <= brobot_max_loss);
1 != 0;
stopWheels();
return (State)3;
sonarMax = 0;
clearTimer(0);
signed int return_value_time1;
return_value_time1=time1(0);
return_value_time1 >= 6000;
signed int return_value_SensorValue;
signed int return_value_SensorValue;
return_value_SensorValue=SensorValue(1);
!(return_value_SensorValue >= sonarMax);
sonarMax=SensorValue(1);
motor[0l] = (float)-(25.0 * 1.3);
motor[1l] = 25.0f;
1 != 0;
clearTimer(0);
signed int return_value_SensorValue_0;
return_value_SensorValue_0=SensorValue(1);
!(sonarMax + -100 >= return_value_SensorValue_0);
motor[0l] = (float)-(25.0 * 1.3);
motor[1l] = 25.0f;
1 != 0;
stopWheels();
motor[0l] = (float)(40.0 * 1.3);
motor[1l] = 40.0f;
wait1Msec(2500);
stopWheels();
return (State)1;
signed int return_value_medianFilter;
signed int return_value_medianFilter;
return_value_medianFilter=medianFilter();
signed int return_value_medianFilter_0;
signed int return_value_SensorValue;
signed int return_value_SensorValue_1;
return_value_medianFilter >= 601;
return (State)5;
brobot_signal_loss = brobot_signal_loss + 1;
__CPROVER_assume(brobot_signal_loss <= brobot_max_loss);
return_value_medianFilter_0=medianFilter();
!(return_value_medianFilter_0 >= 601);
return_value_SensorValue=SensorValue(2);
ambientIR + 50 >= return_value_SensorValue;
motor[0l] = (float)(40.0 * 1.3);
motor[1l] = 40.0f;
brobot_signal_loss = brobot_signal_loss + 1;
__CPROVER_assume(brobot_signal_loss <= brobot_max_loss);
signed int return_value_SensorValue_0;
signed int return_value_SensorValue;
return_value_SensorValue=SensorValue(4);
return_value_SensorValue_0 = return_value_SensorValue;
__CPROVER_bool tmp_if_expr;
return_value_SensorValue_0 == 0;
tmp_if_expr = 1 != 0;
return_value_SensorValue_1=SensorValue(5);
tmp_if_expr = (return_value_SensorValue_1 != 0 ? 1 : 0) != 0;
!tmp_if_expr;
backUp();
stopWheels();
return (State)2;
1 != 0;
return (State)2;
signed int return_value_medianFilter;
signed int return_value_SensorValue;
signed int return_value_SensorValue_1;
return_value_medianFilter=medianFilter();
!(return_value_medianFilter >= 141);
return_value_SensorValue=SensorValue(2);
ambientIR + 20 >= return_value_SensorValue;
motor[0l] = (float)(20.0 * 1.3);
motor[1l] = 20.0f;
brobot_signal_loss = brobot_signal_loss + 1;
__CPROVER_assume(brobot_signal_loss <= brobot_max_loss);
signed int return_value_SensorValue_0;
signed int return_value_SensorValue;
return_value_SensorValue=SensorValue(4);
return_value_SensorValue_0 = return_value_SensorValue;
__CPROVER_bool tmp_if_expr;
return_value_SensorValue_0 == 0;
tmp_if_expr = 1 != 0;
return_value_SensorValue_1=SensorValue(5);
tmp_if_expr = (return_value_SensorValue_1 != 0 ? 1 : 0) != 0;
!tmp_if_expr;
backUp();
stopWheels();
return (State)2;
1 != 0;
return (State)7;
signed int res;
signed int return_value___VERIFIER_nondet_unsigned_int;
signed int return_value_nondet_signed_int;
return_value_nondet_signed_int = __VERIFIER_nondet_signed_int();
return_value___VERIFIER_nondet_unsigned_int = return_value_nondet_signed_int;
res = return_value___VERIFIER_nondet_unsigned_int;
__CPROVER_assume(0 <= res && res <= 65535);
return res;
backUp();
turnAround();
signed int return_value_medianFilter;
signed int return_value_medianFilter_0;
signed int return_value_medianFilter_1;
return_value_medianFilter=medianFilter();
!(return_value_medianFilter >= 141);
motor[0l] = (float)(40.0 * 1.3);
motor[1l] = 40.0f;
signed int return_value_SensorValue;
signed int return_value_SensorValue;
return_value_SensorValue=SensorValue(4);
return_value_SensorValue == 0;
motor[0l] = (float)-(25.0 * 1.3);
motor[1l] = (float)-25;
wait1Msec(400);
return_value_medianFilter_0=medianFilter();
!(return_value_medianFilter_0 >= 141);
motor[0l] = (float)-(20.0 * 1.3);
motor[1l] = 20.0f;
1 != 0;
signed int return_value_SensorValue_0;
signed int return_value_SensorValue_0;
return_value_SensorValue_0=SensorValue(5);
return_value_SensorValue_0 == 0;
motor[0l] = (float)-(25.0 * 1.3);
motor[1l] = (float)-25;
wait1Msec(400);
return_value_medianFilter_1=medianFilter();
!(return_value_medianFilter_1 >= 141);
motor[0l] = (float)(20.0 * 1.3);
motor[1l] = (float)-20;
1 != 0;
1 != 0;
stopWheels();
return (State)8;
motor[2l] = (float)-10;
wait1Msec(800);
motor[3l] = 20.0f;
wait1Msec(1200);
float tmp_assign;
tmp_assign = 0.0f;
motor[2l] = tmp_assign;
motor[3l] = tmp_assign;
return (State)9;
(void)sizeof(signed int)  ;
(void)sizeof(signed int)  ;
assert(state != 2);
stopWheels();
motor[2l] = (float)-20;
wait1Msec(1500);
motor[2l] = 0.0f;
motor[3l] = (float)-10;
wait1Msec(1000);
motor[3l] = (float)-30;
wait1Msec(500);
motor[3l] = (float)-10;
wait1Msec(200);
motor[2l] = 30.0f;
wait1Msec(900);
motor[2l] = 10.0f;
return (State)6;
signed int first;
first = 0;
signed int second;
second = 0;
signed int third;
third = 0;
first=SensorValue(1);
wait1Msec(70);
second=SensorValue(1);
wait1Msec(70);
third=SensorValue(1);
wait1Msec(70);
!(first >= second && third >= first || second >= first && first >= third);
return first;
!(second >= first && third >= second || first >= second && second >= third);
return second;
return third;
stopWheels();
wait1Msec(400);
motor[0l] = (float)-(25.0 * 1.3);
motor[1l] = (float)-25;
wait1Msec(1500);
stopWheels();
brobot_max_loss = 5;
float tmp_assign;
tmp_assign = 0.0f;
motor[1l] = tmp_assign;
motor[0l] = tmp_assign;
stopWheels();
backUp();
signed int i;
i = 0;
i >= 3;
motor[2l] = 30.0f;
wait1Msec(2000);
motor[2l] = (float)-30;
wait1Msec(1000);
turnAround();
i = i + 1;
return (State)0;
stopWheels();
motor[0l] = (float)-(30.0 * 1.3);
motor[1l] = 30.0f;
wait1Msec(1000);
stopWheels();
!(state == 0);
cycle = 0;
!((signed int)machineState == 4 || (signed int)machineState == 5);
state = 1;
!(state == 1);
cycle = cycle + 1;
!((signed int)machineState == 9);
state = 0;
!(cycle >= 20);
state = 2;

}