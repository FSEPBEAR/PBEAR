--src data/elev/src/p2/elev.c --wd results/elevator/p2/no_alarm --unwind 1000 --object-bits 14 --no-alarm-filtering --synth-dir results/elevator/synth --synth-timeout 600 --synth-max-size 512 --synth-max-height 15 
code parsing time: 0.793 sec

select target function calls:
elev_get_button_signal((elev_button_type_t)(button), floorNum) (call id 49) influences 5 external nodes
internal node ratio: 0.85% (6 of 709)

floorIsOrdered(previousMainFloor, motorDirection) (call id 20) influences 13 external nodes
internal node ratio: 19.32% (137 of 709)

isButtonPressed() (call id 11) influences 7 external nodes
internal node ratio: 2.96% (21 of 709)

floorIsOrdered(previousMainFloor, motorDirection) (call id 14) influences 13 external nodes
internal node ratio: 12.69% (90 of 709)

find the best target combination:
predict complexity: (unwind 1000)
criterion unwind: 8
elev_get_button_signal((elev_button_type_t)(button), floorNum): original cmplx: 1, stub cmplx: 0
floorIsOrdered(previousMainFloor, motorDirection): original cmplx: 157, stub cmplx: 3
isButtonPressed(): original cmplx: 136, stub cmplx: 3
total cmplx: 8198

Aug 01, 2023 11:47:24 PM iv_checker.select.TargetFunctionSelector printRank
INFO: 
1. elev_get_button_signal((elev_button_type_t)(button), floorNum); floorIsOrdered(previousMainFloor, motorDirection); isButtonPressed(); floorIsOrdered(previousMainFloor, motorDirection);  fitness: 5.959
2. elev_get_button_signal((elev_button_type_t)(button), floorNum); floorIsOrdered(previousMainFloor, motorDirection); floorIsOrdered(previousMainFloor, motorDirection);  fitness: 5.367
3. floorIsOrdered(previousMainFloor, motorDirection); isButtonPressed(); floorIsOrdered(previousMainFloor, motorDirection);  fitness: 4.803
4. elev_get_button_signal((elev_button_type_t)(button), floorNum); isButtonPressed();  fitness: 4.592
5. floorIsOrdered(previousMainFloor, motorDirection); floorIsOrdered(previousMainFloor, motorDirection);  fitness: 4.107

call elev_get_button_signal((elev_button_type_t)(button), floorNum) (call id 49)
call floorIsOrdered(previousMainFloor, motorDirection) (call id 20)
call isButtonPressed() (call id 11)
call floorIsOrdered(previousMainFloor, motorDirection) (call id 14)
Iteration 0:
signed int __iv__elev_get_button_signal_stub(elev_button_type_t button, signed int floor) {
	signed int __iv__return_expr_elev_get_button_signal;
	signed int __iv__nondet_input_elev_get_button_signal_1 = __VERIFIER_nondet_signed_int();
	__iv__return_expr_elev_get_button_signal = __iv__nondet_input_elev_get_button_signal_1;
	__CPROVER_assume(__iv__return_expr_elev_get_button_signal == 0 || __iv__return_expr_elev_get_button_signal == 1);
	return __iv__return_expr_elev_get_button_signal;
}
complexity: 0
accuracy: 100.00%
coverage: 100.00%
# constraints: 2

signed int __iv__floorIsOrdered_stub(signed int floorNum, signed int motorDir) {
	signed int __iv__return_expr_floorIsOrdered;
	if(1==orderMatrix[2][0]) __iv__return_expr_floorIsOrdered = 1; else if(motorDir>=2) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[0][3]==motorDir) __iv__return_expr_floorIsOrdered = 1; else __iv__return_expr_floorIsOrdered = 0; 
	__CPROVER_assume(__iv__return_expr_floorIsOrdered == 0 || __iv__return_expr_floorIsOrdered == 1);
	return __iv__return_expr_floorIsOrdered;
}
complexity: 3
accuracy: 77.56%
coverage: 100.00%
# constraints: 9

signed int __iv__isButtonPressed_stub() {
	signed int __iv__return_expr_isButtonPressed;
	if(1==orderMatrix[0][0]) __iv__return_expr_isButtonPressed = orderMatrix[0][0]; else if(1==orderMatrix[0][3]) __iv__return_expr_isButtonPressed = 1; else if(1==orderMatrix[2][1]) __iv__return_expr_isButtonPressed = 1; else __iv__return_expr_isButtonPressed = 0; 
	__CPROVER_assume(__iv__return_expr_isButtonPressed == 0 || __iv__return_expr_isButtonPressed == 1);
	return __iv__return_expr_isButtonPressed;
}
complexity: 3
accuracy: 83.83%
coverage: 100.00%
# constraints: 10

run cbmc: (unwind: 10, timeout: 86400 sec)
cbmc running time: 1.507 sec

verification results: 
property 'assert((state != 2));' is not violated.

total CBMC running time: 1.507 sec
total true alarm finding time: 0.0 sec
total refinement time: 0.0 sec, # of refinements: 0
peak memory usage: 134.08 MB

call elev_get_button_signal((elev_button_type_t)(button), floorNum) (call id 49)
call floorIsOrdered(previousMainFloor, motorDirection) (call id 20)
call isButtonPressed() (call id 11)
call floorIsOrdered(previousMainFloor, motorDirection) (call id 14)
Iteration 0:
signed int __iv__elev_get_button_signal_stub(elev_button_type_t button, signed int floor) {
	signed int __iv__return_expr_elev_get_button_signal;
	signed int __iv__nondet_input_elev_get_button_signal_1 = __VERIFIER_nondet_signed_int();
	__iv__return_expr_elev_get_button_signal = __iv__nondet_input_elev_get_button_signal_1;
	__CPROVER_assume(__iv__return_expr_elev_get_button_signal == 0 || __iv__return_expr_elev_get_button_signal == 1);
	return __iv__return_expr_elev_get_button_signal;
}
complexity: 0
accuracy: 100.00%
coverage: 100.00%
# constraints: 2

signed int __iv__floorIsOrdered_stub(signed int floorNum, signed int motorDir) {
	signed int __iv__return_expr_floorIsOrdered;
	if(1==orderMatrix[2][0]) __iv__return_expr_floorIsOrdered = 1; else if(motorDir>=2) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[0][3]==motorDir) __iv__return_expr_floorIsOrdered = 1; else __iv__return_expr_floorIsOrdered = 0; 
	__CPROVER_assume(__iv__return_expr_floorIsOrdered == 0 || __iv__return_expr_floorIsOrdered == 1);
	return __iv__return_expr_floorIsOrdered;
}
complexity: 3
accuracy: 77.56%
coverage: 100.00%
# constraints: 9

signed int __iv__isButtonPressed_stub() {
	signed int __iv__return_expr_isButtonPressed;
	if(1==orderMatrix[0][0]) __iv__return_expr_isButtonPressed = orderMatrix[0][0]; else if(1==orderMatrix[0][3]) __iv__return_expr_isButtonPressed = 1; else if(1==orderMatrix[2][1]) __iv__return_expr_isButtonPressed = 1; else __iv__return_expr_isButtonPressed = 0; 
	__CPROVER_assume(__iv__return_expr_isButtonPressed == 0 || __iv__return_expr_isButtonPressed == 1);
	return __iv__return_expr_isButtonPressed;
}
complexity: 3
accuracy: 83.83%
coverage: 100.00%
# constraints: 10

run cbmc: (unwind: 20, timeout: 86400 sec)
cbmc running time: 3.866 sec

verification results: 
property 'assert((state != 2));' is not violated.

total CBMC running time: 5.373 sec
total true alarm finding time: 0.0 sec
total refinement time: 0.0 sec, # of refinements: 0
peak memory usage: 252.23 MB

call elev_get_button_signal((elev_button_type_t)(button), floorNum) (call id 49)
call floorIsOrdered(previousMainFloor, motorDirection) (call id 20)
call isButtonPressed() (call id 11)
call floorIsOrdered(previousMainFloor, motorDirection) (call id 14)
Iteration 0:
signed int __iv__elev_get_button_signal_stub(elev_button_type_t button, signed int floor) {
	signed int __iv__return_expr_elev_get_button_signal;
	signed int __iv__nondet_input_elev_get_button_signal_1 = __VERIFIER_nondet_signed_int();
	__iv__return_expr_elev_get_button_signal = __iv__nondet_input_elev_get_button_signal_1;
	__CPROVER_assume(__iv__return_expr_elev_get_button_signal == 0 || __iv__return_expr_elev_get_button_signal == 1);
	return __iv__return_expr_elev_get_button_signal;
}
complexity: 0
accuracy: 100.00%
coverage: 100.00%
# constraints: 2

signed int __iv__floorIsOrdered_stub(signed int floorNum, signed int motorDir) {
	signed int __iv__return_expr_floorIsOrdered;
	if(1==orderMatrix[2][0]) __iv__return_expr_floorIsOrdered = 1; else if(motorDir>=2) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[0][3]==motorDir) __iv__return_expr_floorIsOrdered = 1; else __iv__return_expr_floorIsOrdered = 0; 
	__CPROVER_assume(__iv__return_expr_floorIsOrdered == 0 || __iv__return_expr_floorIsOrdered == 1);
	return __iv__return_expr_floorIsOrdered;
}
complexity: 3
accuracy: 77.56%
coverage: 100.00%
# constraints: 9

signed int __iv__isButtonPressed_stub() {
	signed int __iv__return_expr_isButtonPressed;
	if(1==orderMatrix[0][0]) __iv__return_expr_isButtonPressed = orderMatrix[0][0]; else if(1==orderMatrix[0][3]) __iv__return_expr_isButtonPressed = 1; else if(1==orderMatrix[2][1]) __iv__return_expr_isButtonPressed = 1; else __iv__return_expr_isButtonPressed = 0; 
	__CPROVER_assume(__iv__return_expr_isButtonPressed == 0 || __iv__return_expr_isButtonPressed == 1);
	return __iv__return_expr_isButtonPressed;
}
complexity: 3
accuracy: 83.83%
coverage: 100.00%
# constraints: 10

run cbmc: (unwind: 30, timeout: 86400 sec)
cbmc running time: 6.91 sec

verification results: 
property 'assert((state != 2));' is not violated.

total CBMC running time: 12.283 sec
total true alarm finding time: 0.0 sec
total refinement time: 0.0 sec, # of refinements: 0
peak memory usage: 379.83 MB

call elev_get_button_signal((elev_button_type_t)(button), floorNum) (call id 49)
call floorIsOrdered(previousMainFloor, motorDirection) (call id 20)
call isButtonPressed() (call id 11)
call floorIsOrdered(previousMainFloor, motorDirection) (call id 14)
Iteration 0:
signed int __iv__elev_get_button_signal_stub(elev_button_type_t button, signed int floor) {
	signed int __iv__return_expr_elev_get_button_signal;
	signed int __iv__nondet_input_elev_get_button_signal_1 = __VERIFIER_nondet_signed_int();
	__iv__return_expr_elev_get_button_signal = __iv__nondet_input_elev_get_button_signal_1;
	__CPROVER_assume(__iv__return_expr_elev_get_button_signal == 0 || __iv__return_expr_elev_get_button_signal == 1);
	return __iv__return_expr_elev_get_button_signal;
}
complexity: 0
accuracy: 100.00%
coverage: 100.00%
# constraints: 2

signed int __iv__floorIsOrdered_stub(signed int floorNum, signed int motorDir) {
	signed int __iv__return_expr_floorIsOrdered;
	if(1==orderMatrix[2][0]) __iv__return_expr_floorIsOrdered = 1; else if(motorDir>=2) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[0][3]==motorDir) __iv__return_expr_floorIsOrdered = 1; else __iv__return_expr_floorIsOrdered = 0; 
	__CPROVER_assume(__iv__return_expr_floorIsOrdered == 0 || __iv__return_expr_floorIsOrdered == 1);
	return __iv__return_expr_floorIsOrdered;
}
complexity: 3
accuracy: 77.56%
coverage: 100.00%
# constraints: 9

signed int __iv__isButtonPressed_stub() {
	signed int __iv__return_expr_isButtonPressed;
	if(1==orderMatrix[0][0]) __iv__return_expr_isButtonPressed = orderMatrix[0][0]; else if(1==orderMatrix[0][3]) __iv__return_expr_isButtonPressed = 1; else if(1==orderMatrix[2][1]) __iv__return_expr_isButtonPressed = 1; else __iv__return_expr_isButtonPressed = 0; 
	__CPROVER_assume(__iv__return_expr_isButtonPressed == 0 || __iv__return_expr_isButtonPressed == 1);
	return __iv__return_expr_isButtonPressed;
}
complexity: 3
accuracy: 83.83%
coverage: 100.00%
# constraints: 10

run cbmc: (unwind: 40, timeout: 86400 sec)
cbmc running time: 9.726 sec

verification results: 
property 'assert((state != 2));' is not violated.

total CBMC running time: 22.009 sec
total true alarm finding time: 0.0 sec
total refinement time: 0.0 sec, # of refinements: 0
peak memory usage: 556.82 MB

call elev_get_button_signal((elev_button_type_t)(button), floorNum) (call id 49)
call floorIsOrdered(previousMainFloor, motorDirection) (call id 20)
call isButtonPressed() (call id 11)
call floorIsOrdered(previousMainFloor, motorDirection) (call id 14)
Iteration 0:
signed int __iv__elev_get_button_signal_stub(elev_button_type_t button, signed int floor) {
	signed int __iv__return_expr_elev_get_button_signal;
	signed int __iv__nondet_input_elev_get_button_signal_1 = __VERIFIER_nondet_signed_int();
	__iv__return_expr_elev_get_button_signal = __iv__nondet_input_elev_get_button_signal_1;
	__CPROVER_assume(__iv__return_expr_elev_get_button_signal == 0 || __iv__return_expr_elev_get_button_signal == 1);
	return __iv__return_expr_elev_get_button_signal;
}
complexity: 0
accuracy: 100.00%
coverage: 100.00%
# constraints: 2

signed int __iv__floorIsOrdered_stub(signed int floorNum, signed int motorDir) {
	signed int __iv__return_expr_floorIsOrdered;
	if(1==orderMatrix[2][0]) __iv__return_expr_floorIsOrdered = 1; else if(motorDir>=2) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[0][3]==motorDir) __iv__return_expr_floorIsOrdered = 1; else __iv__return_expr_floorIsOrdered = 0; 
	__CPROVER_assume(__iv__return_expr_floorIsOrdered == 0 || __iv__return_expr_floorIsOrdered == 1);
	return __iv__return_expr_floorIsOrdered;
}
complexity: 3
accuracy: 77.56%
coverage: 100.00%
# constraints: 9

signed int __iv__isButtonPressed_stub() {
	signed int __iv__return_expr_isButtonPressed;
	if(1==orderMatrix[0][0]) __iv__return_expr_isButtonPressed = orderMatrix[0][0]; else if(1==orderMatrix[0][3]) __iv__return_expr_isButtonPressed = 1; else if(1==orderMatrix[2][1]) __iv__return_expr_isButtonPressed = 1; else __iv__return_expr_isButtonPressed = 0; 
	__CPROVER_assume(__iv__return_expr_isButtonPressed == 0 || __iv__return_expr_isButtonPressed == 1);
	return __iv__return_expr_isButtonPressed;
}
complexity: 3
accuracy: 83.83%
coverage: 100.00%
# constraints: 10

run cbmc: (unwind: 50, timeout: 86400 sec)
cbmc running time: 12.299 sec

verification results: 
property 'assert((state != 2));' is not violated.

total CBMC running time: 34.308 sec
total true alarm finding time: 0.0 sec
total refinement time: 0.0 sec, # of refinements: 0
peak memory usage: 651.23 MB

call elev_get_button_signal((elev_button_type_t)(button), floorNum) (call id 49)
call floorIsOrdered(previousMainFloor, motorDirection) (call id 20)
call isButtonPressed() (call id 11)
call floorIsOrdered(previousMainFloor, motorDirection) (call id 14)
Iteration 0:
signed int __iv__elev_get_button_signal_stub(elev_button_type_t button, signed int floor) {
	signed int __iv__return_expr_elev_get_button_signal;
	signed int __iv__nondet_input_elev_get_button_signal_1 = __VERIFIER_nondet_signed_int();
	__iv__return_expr_elev_get_button_signal = __iv__nondet_input_elev_get_button_signal_1;
	__CPROVER_assume(__iv__return_expr_elev_get_button_signal == 0 || __iv__return_expr_elev_get_button_signal == 1);
	return __iv__return_expr_elev_get_button_signal;
}
complexity: 0
accuracy: 100.00%
coverage: 100.00%
# constraints: 2

signed int __iv__floorIsOrdered_stub(signed int floorNum, signed int motorDir) {
	signed int __iv__return_expr_floorIsOrdered;
	if(1==orderMatrix[2][0]) __iv__return_expr_floorIsOrdered = 1; else if(motorDir>=2) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[0][3]==motorDir) __iv__return_expr_floorIsOrdered = 1; else __iv__return_expr_floorIsOrdered = 0; 
	__CPROVER_assume(__iv__return_expr_floorIsOrdered == 0 || __iv__return_expr_floorIsOrdered == 1);
	return __iv__return_expr_floorIsOrdered;
}
complexity: 3
accuracy: 77.56%
coverage: 100.00%
# constraints: 9

signed int __iv__isButtonPressed_stub() {
	signed int __iv__return_expr_isButtonPressed;
	if(1==orderMatrix[0][0]) __iv__return_expr_isButtonPressed = orderMatrix[0][0]; else if(1==orderMatrix[0][3]) __iv__return_expr_isButtonPressed = 1; else if(1==orderMatrix[2][1]) __iv__return_expr_isButtonPressed = 1; else __iv__return_expr_isButtonPressed = 0; 
	__CPROVER_assume(__iv__return_expr_isButtonPressed == 0 || __iv__return_expr_isButtonPressed == 1);
	return __iv__return_expr_isButtonPressed;
}
complexity: 3
accuracy: 83.83%
coverage: 100.00%
# constraints: 10

run cbmc: (unwind: 60, timeout: 86400 sec)
cbmc running time: 15.978 sec

verification results: 
property 'assert((state != 2));' is not violated.

total CBMC running time: 50.286 sec
total true alarm finding time: 0.0 sec
total refinement time: 0.0 sec, # of refinements: 0
peak memory usage: 777.61 MB

call elev_get_button_signal((elev_button_type_t)(button), floorNum) (call id 49)
call floorIsOrdered(previousMainFloor, motorDirection) (call id 20)
call isButtonPressed() (call id 11)
call floorIsOrdered(previousMainFloor, motorDirection) (call id 14)
Iteration 0:
signed int __iv__elev_get_button_signal_stub(elev_button_type_t button, signed int floor) {
	signed int __iv__return_expr_elev_get_button_signal;
	signed int __iv__nondet_input_elev_get_button_signal_1 = __VERIFIER_nondet_signed_int();
	__iv__return_expr_elev_get_button_signal = __iv__nondet_input_elev_get_button_signal_1;
	__CPROVER_assume(__iv__return_expr_elev_get_button_signal == 0 || __iv__return_expr_elev_get_button_signal == 1);
	return __iv__return_expr_elev_get_button_signal;
}
complexity: 0
accuracy: 100.00%
coverage: 100.00%
# constraints: 2

signed int __iv__floorIsOrdered_stub(signed int floorNum, signed int motorDir) {
	signed int __iv__return_expr_floorIsOrdered;
	if(1==orderMatrix[2][0]) __iv__return_expr_floorIsOrdered = 1; else if(motorDir>=2) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[0][3]==motorDir) __iv__return_expr_floorIsOrdered = 1; else __iv__return_expr_floorIsOrdered = 0; 
	__CPROVER_assume(__iv__return_expr_floorIsOrdered == 0 || __iv__return_expr_floorIsOrdered == 1);
	return __iv__return_expr_floorIsOrdered;
}
complexity: 3
accuracy: 77.56%
coverage: 100.00%
# constraints: 9

signed int __iv__isButtonPressed_stub() {
	signed int __iv__return_expr_isButtonPressed;
	if(1==orderMatrix[0][0]) __iv__return_expr_isButtonPressed = orderMatrix[0][0]; else if(1==orderMatrix[0][3]) __iv__return_expr_isButtonPressed = 1; else if(1==orderMatrix[2][1]) __iv__return_expr_isButtonPressed = 1; else __iv__return_expr_isButtonPressed = 0; 
	__CPROVER_assume(__iv__return_expr_isButtonPressed == 0 || __iv__return_expr_isButtonPressed == 1);
	return __iv__return_expr_isButtonPressed;
}
complexity: 3
accuracy: 83.83%
coverage: 100.00%
# constraints: 10

run cbmc: (unwind: 70, timeout: 86400 sec)
cbmc running time: 20.621 sec

verification results: 
property 'assert((state != 2));' is not violated.

total CBMC running time: 70.907 sec
total true alarm finding time: 0.0 sec
total refinement time: 0.0 sec, # of refinements: 0
peak memory usage: 937.31 MB

call elev_get_button_signal((elev_button_type_t)(button), floorNum) (call id 49)
call floorIsOrdered(previousMainFloor, motorDirection) (call id 20)
call isButtonPressed() (call id 11)
call floorIsOrdered(previousMainFloor, motorDirection) (call id 14)
Iteration 0:
signed int __iv__elev_get_button_signal_stub(elev_button_type_t button, signed int floor) {
	signed int __iv__return_expr_elev_get_button_signal;
	signed int __iv__nondet_input_elev_get_button_signal_1 = __VERIFIER_nondet_signed_int();
	__iv__return_expr_elev_get_button_signal = __iv__nondet_input_elev_get_button_signal_1;
	__CPROVER_assume(__iv__return_expr_elev_get_button_signal == 0 || __iv__return_expr_elev_get_button_signal == 1);
	return __iv__return_expr_elev_get_button_signal;
}
complexity: 0
accuracy: 100.00%
coverage: 100.00%
# constraints: 2

signed int __iv__floorIsOrdered_stub(signed int floorNum, signed int motorDir) {
	signed int __iv__return_expr_floorIsOrdered;
	if(1==orderMatrix[2][0]) __iv__return_expr_floorIsOrdered = 1; else if(motorDir>=2) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[0][3]==motorDir) __iv__return_expr_floorIsOrdered = 1; else __iv__return_expr_floorIsOrdered = 0; 
	__CPROVER_assume(__iv__return_expr_floorIsOrdered == 0 || __iv__return_expr_floorIsOrdered == 1);
	return __iv__return_expr_floorIsOrdered;
}
complexity: 3
accuracy: 77.56%
coverage: 100.00%
# constraints: 9

signed int __iv__isButtonPressed_stub() {
	signed int __iv__return_expr_isButtonPressed;
	if(1==orderMatrix[0][0]) __iv__return_expr_isButtonPressed = orderMatrix[0][0]; else if(1==orderMatrix[0][3]) __iv__return_expr_isButtonPressed = 1; else if(1==orderMatrix[2][1]) __iv__return_expr_isButtonPressed = 1; else __iv__return_expr_isButtonPressed = 0; 
	__CPROVER_assume(__iv__return_expr_isButtonPressed == 0 || __iv__return_expr_isButtonPressed == 1);
	return __iv__return_expr_isButtonPressed;
}
complexity: 3
accuracy: 83.83%
coverage: 100.00%
# constraints: 10

run cbmc: (unwind: 80, timeout: 86400 sec)
cbmc running time: 19.098 sec

verification results: 
property 'assert((state != 2));' is not violated.

total CBMC running time: 90.005 sec
total true alarm finding time: 0.0 sec
total refinement time: 0.0 sec, # of refinements: 0
peak memory usage: 1054.29 MB

call elev_get_button_signal((elev_button_type_t)(button), floorNum) (call id 49)
call floorIsOrdered(previousMainFloor, motorDirection) (call id 20)
call isButtonPressed() (call id 11)
call floorIsOrdered(previousMainFloor, motorDirection) (call id 14)
Iteration 0:
signed int __iv__elev_get_button_signal_stub(elev_button_type_t button, signed int floor) {
	signed int __iv__return_expr_elev_get_button_signal;
	signed int __iv__nondet_input_elev_get_button_signal_1 = __VERIFIER_nondet_signed_int();
	__iv__return_expr_elev_get_button_signal = __iv__nondet_input_elev_get_button_signal_1;
	__CPROVER_assume(__iv__return_expr_elev_get_button_signal == 0 || __iv__return_expr_elev_get_button_signal == 1);
	return __iv__return_expr_elev_get_button_signal;
}
complexity: 0
accuracy: 100.00%
coverage: 100.00%
# constraints: 2

signed int __iv__floorIsOrdered_stub(signed int floorNum, signed int motorDir) {
	signed int __iv__return_expr_floorIsOrdered;
	if(1==orderMatrix[2][0]) __iv__return_expr_floorIsOrdered = 1; else if(motorDir>=2) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[0][3]==motorDir) __iv__return_expr_floorIsOrdered = 1; else __iv__return_expr_floorIsOrdered = 0; 
	__CPROVER_assume(__iv__return_expr_floorIsOrdered == 0 || __iv__return_expr_floorIsOrdered == 1);
	return __iv__return_expr_floorIsOrdered;
}
complexity: 3
accuracy: 77.56%
coverage: 100.00%
# constraints: 9

signed int __iv__isButtonPressed_stub() {
	signed int __iv__return_expr_isButtonPressed;
	if(1==orderMatrix[0][0]) __iv__return_expr_isButtonPressed = orderMatrix[0][0]; else if(1==orderMatrix[0][3]) __iv__return_expr_isButtonPressed = 1; else if(1==orderMatrix[2][1]) __iv__return_expr_isButtonPressed = 1; else __iv__return_expr_isButtonPressed = 0; 
	__CPROVER_assume(__iv__return_expr_isButtonPressed == 0 || __iv__return_expr_isButtonPressed == 1);
	return __iv__return_expr_isButtonPressed;
}
complexity: 3
accuracy: 83.83%
coverage: 100.00%
# constraints: 10

run cbmc: (unwind: 90, timeout: 86400 sec)
cbmc running time: 23.23 sec

verification results: 
property 'assert((state != 2));' is not violated.

total CBMC running time: 113.235 sec
total true alarm finding time: 0.0 sec
total refinement time: 0.0 sec, # of refinements: 0
peak memory usage: 1193.39 MB

call elev_get_button_signal((elev_button_type_t)(button), floorNum) (call id 49)
call floorIsOrdered(previousMainFloor, motorDirection) (call id 20)
call isButtonPressed() (call id 11)
call floorIsOrdered(previousMainFloor, motorDirection) (call id 14)
Iteration 0:
signed int __iv__elev_get_button_signal_stub(elev_button_type_t button, signed int floor) {
	signed int __iv__return_expr_elev_get_button_signal;
	signed int __iv__nondet_input_elev_get_button_signal_1 = __VERIFIER_nondet_signed_int();
	__iv__return_expr_elev_get_button_signal = __iv__nondet_input_elev_get_button_signal_1;
	__CPROVER_assume(__iv__return_expr_elev_get_button_signal == 0 || __iv__return_expr_elev_get_button_signal == 1);
	return __iv__return_expr_elev_get_button_signal;
}
complexity: 0
accuracy: 100.00%
coverage: 100.00%
# constraints: 2

signed int __iv__floorIsOrdered_stub(signed int floorNum, signed int motorDir) {
	signed int __iv__return_expr_floorIsOrdered;
	if(1==orderMatrix[2][0]) __iv__return_expr_floorIsOrdered = 1; else if(motorDir>=2) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[0][3]==motorDir) __iv__return_expr_floorIsOrdered = 1; else __iv__return_expr_floorIsOrdered = 0; 
	__CPROVER_assume(__iv__return_expr_floorIsOrdered == 0 || __iv__return_expr_floorIsOrdered == 1);
	return __iv__return_expr_floorIsOrdered;
}
complexity: 3
accuracy: 77.56%
coverage: 100.00%
# constraints: 9

signed int __iv__isButtonPressed_stub() {
	signed int __iv__return_expr_isButtonPressed;
	if(1==orderMatrix[0][0]) __iv__return_expr_isButtonPressed = orderMatrix[0][0]; else if(1==orderMatrix[0][3]) __iv__return_expr_isButtonPressed = 1; else if(1==orderMatrix[2][1]) __iv__return_expr_isButtonPressed = 1; else __iv__return_expr_isButtonPressed = 0; 
	__CPROVER_assume(__iv__return_expr_isButtonPressed == 0 || __iv__return_expr_isButtonPressed == 1);
	return __iv__return_expr_isButtonPressed;
}
complexity: 3
accuracy: 83.83%
coverage: 100.00%
# constraints: 10

run cbmc: (unwind: 100, timeout: 86400 sec)
cbmc running time: 25.509 sec

verification results: 
property 'assert((state != 2));' is not violated.

total CBMC running time: 138.744 sec
total true alarm finding time: 0.0 sec
total refinement time: 0.0 sec, # of refinements: 0
peak memory usage: 1435.89 MB

call elev_get_button_signal((elev_button_type_t)(button), floorNum) (call id 49)
call floorIsOrdered(previousMainFloor, motorDirection) (call id 20)
call isButtonPressed() (call id 11)
call floorIsOrdered(previousMainFloor, motorDirection) (call id 14)
Iteration 0:
signed int __iv__elev_get_button_signal_stub(elev_button_type_t button, signed int floor) {
	signed int __iv__return_expr_elev_get_button_signal;
	signed int __iv__nondet_input_elev_get_button_signal_1 = __VERIFIER_nondet_signed_int();
	__iv__return_expr_elev_get_button_signal = __iv__nondet_input_elev_get_button_signal_1;
	__CPROVER_assume(__iv__return_expr_elev_get_button_signal == 0 || __iv__return_expr_elev_get_button_signal == 1);
	return __iv__return_expr_elev_get_button_signal;
}
complexity: 0
accuracy: 100.00%
coverage: 100.00%
# constraints: 2

signed int __iv__floorIsOrdered_stub(signed int floorNum, signed int motorDir) {
	signed int __iv__return_expr_floorIsOrdered;
	if(1==orderMatrix[2][0]) __iv__return_expr_floorIsOrdered = 1; else if(motorDir>=2) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[0][3]==motorDir) __iv__return_expr_floorIsOrdered = 1; else __iv__return_expr_floorIsOrdered = 0; 
	__CPROVER_assume(__iv__return_expr_floorIsOrdered == 0 || __iv__return_expr_floorIsOrdered == 1);
	return __iv__return_expr_floorIsOrdered;
}
complexity: 3
accuracy: 77.56%
coverage: 100.00%
# constraints: 9

signed int __iv__isButtonPressed_stub() {
	signed int __iv__return_expr_isButtonPressed;
	if(1==orderMatrix[0][0]) __iv__return_expr_isButtonPressed = orderMatrix[0][0]; else if(1==orderMatrix[0][3]) __iv__return_expr_isButtonPressed = 1; else if(1==orderMatrix[2][1]) __iv__return_expr_isButtonPressed = 1; else __iv__return_expr_isButtonPressed = 0; 
	__CPROVER_assume(__iv__return_expr_isButtonPressed == 0 || __iv__return_expr_isButtonPressed == 1);
	return __iv__return_expr_isButtonPressed;
}
complexity: 3
accuracy: 83.83%
coverage: 100.00%
# constraints: 10

run cbmc: (unwind: 110, timeout: 86400 sec)
cbmc running time: 27.643 sec

verification results: 
property 'assert((state != 2));' is not violated.

total CBMC running time: 166.387 sec
total true alarm finding time: 0.0 sec
total refinement time: 0.0 sec, # of refinements: 0
peak memory usage: 1470.05 MB

call elev_get_button_signal((elev_button_type_t)(button), floorNum) (call id 49)
call floorIsOrdered(previousMainFloor, motorDirection) (call id 20)
call isButtonPressed() (call id 11)
call floorIsOrdered(previousMainFloor, motorDirection) (call id 14)
Iteration 0:
signed int __iv__elev_get_button_signal_stub(elev_button_type_t button, signed int floor) {
	signed int __iv__return_expr_elev_get_button_signal;
	signed int __iv__nondet_input_elev_get_button_signal_1 = __VERIFIER_nondet_signed_int();
	__iv__return_expr_elev_get_button_signal = __iv__nondet_input_elev_get_button_signal_1;
	__CPROVER_assume(__iv__return_expr_elev_get_button_signal == 0 || __iv__return_expr_elev_get_button_signal == 1);
	return __iv__return_expr_elev_get_button_signal;
}
complexity: 0
accuracy: 100.00%
coverage: 100.00%
# constraints: 2

signed int __iv__floorIsOrdered_stub(signed int floorNum, signed int motorDir) {
	signed int __iv__return_expr_floorIsOrdered;
	if(1==orderMatrix[2][0]) __iv__return_expr_floorIsOrdered = 1; else if(motorDir>=2) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[0][3]==motorDir) __iv__return_expr_floorIsOrdered = 1; else __iv__return_expr_floorIsOrdered = 0; 
	__CPROVER_assume(__iv__return_expr_floorIsOrdered == 0 || __iv__return_expr_floorIsOrdered == 1);
	return __iv__return_expr_floorIsOrdered;
}
complexity: 3
accuracy: 77.56%
coverage: 100.00%
# constraints: 9

signed int __iv__isButtonPressed_stub() {
	signed int __iv__return_expr_isButtonPressed;
	if(1==orderMatrix[0][0]) __iv__return_expr_isButtonPressed = orderMatrix[0][0]; else if(1==orderMatrix[0][3]) __iv__return_expr_isButtonPressed = 1; else if(1==orderMatrix[2][1]) __iv__return_expr_isButtonPressed = 1; else __iv__return_expr_isButtonPressed = 0; 
	__CPROVER_assume(__iv__return_expr_isButtonPressed == 0 || __iv__return_expr_isButtonPressed == 1);
	return __iv__return_expr_isButtonPressed;
}
complexity: 3
accuracy: 83.83%
coverage: 100.00%
# constraints: 10

run cbmc: (unwind: 120, timeout: 86400 sec)
cbmc running time: 32.402 sec

verification results: 
property 'assert((state != 2));' is not violated.

total CBMC running time: 198.789 sec
total true alarm finding time: 0.0 sec
total refinement time: 0.0 sec, # of refinements: 0
peak memory usage: 1746.68 MB

call elev_get_button_signal((elev_button_type_t)(button), floorNum) (call id 49)
call floorIsOrdered(previousMainFloor, motorDirection) (call id 20)
call isButtonPressed() (call id 11)
call floorIsOrdered(previousMainFloor, motorDirection) (call id 14)
Iteration 0:
signed int __iv__elev_get_button_signal_stub(elev_button_type_t button, signed int floor) {
	signed int __iv__return_expr_elev_get_button_signal;
	signed int __iv__nondet_input_elev_get_button_signal_1 = __VERIFIER_nondet_signed_int();
	__iv__return_expr_elev_get_button_signal = __iv__nondet_input_elev_get_button_signal_1;
	__CPROVER_assume(__iv__return_expr_elev_get_button_signal == 0 || __iv__return_expr_elev_get_button_signal == 1);
	return __iv__return_expr_elev_get_button_signal;
}
complexity: 0
accuracy: 100.00%
coverage: 100.00%
# constraints: 2

signed int __iv__floorIsOrdered_stub(signed int floorNum, signed int motorDir) {
	signed int __iv__return_expr_floorIsOrdered;
	if(1==orderMatrix[2][0]) __iv__return_expr_floorIsOrdered = 1; else if(motorDir>=2) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[0][3]==motorDir) __iv__return_expr_floorIsOrdered = 1; else __iv__return_expr_floorIsOrdered = 0; 
	__CPROVER_assume(__iv__return_expr_floorIsOrdered == 0 || __iv__return_expr_floorIsOrdered == 1);
	return __iv__return_expr_floorIsOrdered;
}
complexity: 3
accuracy: 77.56%
coverage: 100.00%
# constraints: 9

signed int __iv__isButtonPressed_stub() {
	signed int __iv__return_expr_isButtonPressed;
	if(1==orderMatrix[0][0]) __iv__return_expr_isButtonPressed = orderMatrix[0][0]; else if(1==orderMatrix[0][3]) __iv__return_expr_isButtonPressed = 1; else if(1==orderMatrix[2][1]) __iv__return_expr_isButtonPressed = 1; else __iv__return_expr_isButtonPressed = 0; 
	__CPROVER_assume(__iv__return_expr_isButtonPressed == 0 || __iv__return_expr_isButtonPressed == 1);
	return __iv__return_expr_isButtonPressed;
}
complexity: 3
accuracy: 83.83%
coverage: 100.00%
# constraints: 10

run cbmc: (unwind: 130, timeout: 86400 sec)
cbmc running time: 30.103 sec

verification results: 
property 'assert((state != 2));' is not violated.

total CBMC running time: 228.892 sec
total true alarm finding time: 0.0 sec
total refinement time: 0.0 sec, # of refinements: 0
peak memory usage: 1746.68 MB

call elev_get_button_signal((elev_button_type_t)(button), floorNum) (call id 49)
call floorIsOrdered(previousMainFloor, motorDirection) (call id 20)
call isButtonPressed() (call id 11)
call floorIsOrdered(previousMainFloor, motorDirection) (call id 14)
Iteration 0:
signed int __iv__elev_get_button_signal_stub(elev_button_type_t button, signed int floor) {
	signed int __iv__return_expr_elev_get_button_signal;
	signed int __iv__nondet_input_elev_get_button_signal_1 = __VERIFIER_nondet_signed_int();
	__iv__return_expr_elev_get_button_signal = __iv__nondet_input_elev_get_button_signal_1;
	__CPROVER_assume(__iv__return_expr_elev_get_button_signal == 0 || __iv__return_expr_elev_get_button_signal == 1);
	return __iv__return_expr_elev_get_button_signal;
}
complexity: 0
accuracy: 100.00%
coverage: 100.00%
# constraints: 2

signed int __iv__floorIsOrdered_stub(signed int floorNum, signed int motorDir) {
	signed int __iv__return_expr_floorIsOrdered;
	if(1==orderMatrix[2][0]) __iv__return_expr_floorIsOrdered = 1; else if(motorDir>=2) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[0][3]==motorDir) __iv__return_expr_floorIsOrdered = 1; else __iv__return_expr_floorIsOrdered = 0; 
	__CPROVER_assume(__iv__return_expr_floorIsOrdered == 0 || __iv__return_expr_floorIsOrdered == 1);
	return __iv__return_expr_floorIsOrdered;
}
complexity: 3
accuracy: 77.56%
coverage: 100.00%
# constraints: 9

signed int __iv__isButtonPressed_stub() {
	signed int __iv__return_expr_isButtonPressed;
	if(1==orderMatrix[0][0]) __iv__return_expr_isButtonPressed = orderMatrix[0][0]; else if(1==orderMatrix[0][3]) __iv__return_expr_isButtonPressed = 1; else if(1==orderMatrix[2][1]) __iv__return_expr_isButtonPressed = 1; else __iv__return_expr_isButtonPressed = 0; 
	__CPROVER_assume(__iv__return_expr_isButtonPressed == 0 || __iv__return_expr_isButtonPressed == 1);
	return __iv__return_expr_isButtonPressed;
}
complexity: 3
accuracy: 83.83%
coverage: 100.00%
# constraints: 10

run cbmc: (unwind: 140, timeout: 86400 sec)
cbmc running time: 34.092 sec

verification results: 
property 'assert((state != 2));' is not violated.

total CBMC running time: 262.984 sec
total true alarm finding time: 0.0 sec
total refinement time: 0.0 sec, # of refinements: 0
peak memory usage: 1895.93 MB

call elev_get_button_signal((elev_button_type_t)(button), floorNum) (call id 49)
call floorIsOrdered(previousMainFloor, motorDirection) (call id 20)
call isButtonPressed() (call id 11)
call floorIsOrdered(previousMainFloor, motorDirection) (call id 14)
Iteration 0:
signed int __iv__elev_get_button_signal_stub(elev_button_type_t button, signed int floor) {
	signed int __iv__return_expr_elev_get_button_signal;
	signed int __iv__nondet_input_elev_get_button_signal_1 = __VERIFIER_nondet_signed_int();
	__iv__return_expr_elev_get_button_signal = __iv__nondet_input_elev_get_button_signal_1;
	__CPROVER_assume(__iv__return_expr_elev_get_button_signal == 0 || __iv__return_expr_elev_get_button_signal == 1);
	return __iv__return_expr_elev_get_button_signal;
}
complexity: 0
accuracy: 100.00%
coverage: 100.00%
# constraints: 2

signed int __iv__floorIsOrdered_stub(signed int floorNum, signed int motorDir) {
	signed int __iv__return_expr_floorIsOrdered;
	if(1==orderMatrix[2][0]) __iv__return_expr_floorIsOrdered = 1; else if(motorDir>=2) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[0][3]==motorDir) __iv__return_expr_floorIsOrdered = 1; else __iv__return_expr_floorIsOrdered = 0; 
	__CPROVER_assume(__iv__return_expr_floorIsOrdered == 0 || __iv__return_expr_floorIsOrdered == 1);
	return __iv__return_expr_floorIsOrdered;
}
complexity: 3
accuracy: 77.56%
coverage: 100.00%
# constraints: 9

signed int __iv__isButtonPressed_stub() {
	signed int __iv__return_expr_isButtonPressed;
	if(1==orderMatrix[0][0]) __iv__return_expr_isButtonPressed = orderMatrix[0][0]; else if(1==orderMatrix[0][3]) __iv__return_expr_isButtonPressed = 1; else if(1==orderMatrix[2][1]) __iv__return_expr_isButtonPressed = 1; else __iv__return_expr_isButtonPressed = 0; 
	__CPROVER_assume(__iv__return_expr_isButtonPressed == 0 || __iv__return_expr_isButtonPressed == 1);
	return __iv__return_expr_isButtonPressed;
}
complexity: 3
accuracy: 83.83%
coverage: 100.00%
# constraints: 10

run cbmc: (unwind: 150, timeout: 86400 sec)
cbmc running time: 46.908 sec

verification results: 
property 'assert((state != 2));' is not violated.

total CBMC running time: 309.892 sec
total true alarm finding time: 0.0 sec
total refinement time: 0.0 sec, # of refinements: 0
peak memory usage: 2181.82 MB

call elev_get_button_signal((elev_button_type_t)(button), floorNum) (call id 49)
call floorIsOrdered(previousMainFloor, motorDirection) (call id 20)
call isButtonPressed() (call id 11)
call floorIsOrdered(previousMainFloor, motorDirection) (call id 14)
Iteration 0:
signed int __iv__elev_get_button_signal_stub(elev_button_type_t button, signed int floor) {
	signed int __iv__return_expr_elev_get_button_signal;
	signed int __iv__nondet_input_elev_get_button_signal_1 = __VERIFIER_nondet_signed_int();
	__iv__return_expr_elev_get_button_signal = __iv__nondet_input_elev_get_button_signal_1;
	__CPROVER_assume(__iv__return_expr_elev_get_button_signal == 0 || __iv__return_expr_elev_get_button_signal == 1);
	return __iv__return_expr_elev_get_button_signal;
}
complexity: 0
accuracy: 100.00%
coverage: 100.00%
# constraints: 2

signed int __iv__floorIsOrdered_stub(signed int floorNum, signed int motorDir) {
	signed int __iv__return_expr_floorIsOrdered;
	if(1==orderMatrix[2][0]) __iv__return_expr_floorIsOrdered = 1; else if(motorDir>=2) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[0][3]==motorDir) __iv__return_expr_floorIsOrdered = 1; else __iv__return_expr_floorIsOrdered = 0; 
	__CPROVER_assume(__iv__return_expr_floorIsOrdered == 0 || __iv__return_expr_floorIsOrdered == 1);
	return __iv__return_expr_floorIsOrdered;
}
complexity: 3
accuracy: 77.56%
coverage: 100.00%
# constraints: 9

signed int __iv__isButtonPressed_stub() {
	signed int __iv__return_expr_isButtonPressed;
	if(1==orderMatrix[0][0]) __iv__return_expr_isButtonPressed = orderMatrix[0][0]; else if(1==orderMatrix[0][3]) __iv__return_expr_isButtonPressed = 1; else if(1==orderMatrix[2][1]) __iv__return_expr_isButtonPressed = 1; else __iv__return_expr_isButtonPressed = 0; 
	__CPROVER_assume(__iv__return_expr_isButtonPressed == 0 || __iv__return_expr_isButtonPressed == 1);
	return __iv__return_expr_isButtonPressed;
}
complexity: 3
accuracy: 83.83%
coverage: 100.00%
# constraints: 10

run cbmc: (unwind: 160, timeout: 86400 sec)
cbmc running time: 41.769 sec

verification results: 
property 'assert((state != 2));' is not violated.

total CBMC running time: 351.661 sec
total true alarm finding time: 0.0 sec
total refinement time: 0.0 sec, # of refinements: 0
peak memory usage: 2181.82 MB

call elev_get_button_signal((elev_button_type_t)(button), floorNum) (call id 49)
call floorIsOrdered(previousMainFloor, motorDirection) (call id 20)
call isButtonPressed() (call id 11)
call floorIsOrdered(previousMainFloor, motorDirection) (call id 14)
Iteration 0:
signed int __iv__elev_get_button_signal_stub(elev_button_type_t button, signed int floor) {
	signed int __iv__return_expr_elev_get_button_signal;
	signed int __iv__nondet_input_elev_get_button_signal_1 = __VERIFIER_nondet_signed_int();
	__iv__return_expr_elev_get_button_signal = __iv__nondet_input_elev_get_button_signal_1;
	__CPROVER_assume(__iv__return_expr_elev_get_button_signal == 0 || __iv__return_expr_elev_get_button_signal == 1);
	return __iv__return_expr_elev_get_button_signal;
}
complexity: 0
accuracy: 100.00%
coverage: 100.00%
# constraints: 2

signed int __iv__floorIsOrdered_stub(signed int floorNum, signed int motorDir) {
	signed int __iv__return_expr_floorIsOrdered;
	if(1==orderMatrix[2][0]) __iv__return_expr_floorIsOrdered = 1; else if(motorDir>=2) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[0][3]==motorDir) __iv__return_expr_floorIsOrdered = 1; else __iv__return_expr_floorIsOrdered = 0; 
	__CPROVER_assume(__iv__return_expr_floorIsOrdered == 0 || __iv__return_expr_floorIsOrdered == 1);
	return __iv__return_expr_floorIsOrdered;
}
complexity: 3
accuracy: 77.56%
coverage: 100.00%
# constraints: 9

signed int __iv__isButtonPressed_stub() {
	signed int __iv__return_expr_isButtonPressed;
	if(1==orderMatrix[0][0]) __iv__return_expr_isButtonPressed = orderMatrix[0][0]; else if(1==orderMatrix[0][3]) __iv__return_expr_isButtonPressed = 1; else if(1==orderMatrix[2][1]) __iv__return_expr_isButtonPressed = 1; else __iv__return_expr_isButtonPressed = 0; 
	__CPROVER_assume(__iv__return_expr_isButtonPressed == 0 || __iv__return_expr_isButtonPressed == 1);
	return __iv__return_expr_isButtonPressed;
}
complexity: 3
accuracy: 83.83%
coverage: 100.00%
# constraints: 10

run cbmc: (unwind: 170, timeout: 86400 sec)
cbmc running time: 44.542 sec

verification results: 
property 'assert((state != 2));' is not violated.

total CBMC running time: 396.203 sec
total true alarm finding time: 0.0 sec
total refinement time: 0.0 sec, # of refinements: 0
peak memory usage: 2422.88 MB

call elev_get_button_signal((elev_button_type_t)(button), floorNum) (call id 49)
call floorIsOrdered(previousMainFloor, motorDirection) (call id 20)
call isButtonPressed() (call id 11)
call floorIsOrdered(previousMainFloor, motorDirection) (call id 14)
Iteration 0:
signed int __iv__elev_get_button_signal_stub(elev_button_type_t button, signed int floor) {
	signed int __iv__return_expr_elev_get_button_signal;
	signed int __iv__nondet_input_elev_get_button_signal_1 = __VERIFIER_nondet_signed_int();
	__iv__return_expr_elev_get_button_signal = __iv__nondet_input_elev_get_button_signal_1;
	__CPROVER_assume(__iv__return_expr_elev_get_button_signal == 0 || __iv__return_expr_elev_get_button_signal == 1);
	return __iv__return_expr_elev_get_button_signal;
}
complexity: 0
accuracy: 100.00%
coverage: 100.00%
# constraints: 2

signed int __iv__floorIsOrdered_stub(signed int floorNum, signed int motorDir) {
	signed int __iv__return_expr_floorIsOrdered;
	if(1==orderMatrix[2][0]) __iv__return_expr_floorIsOrdered = 1; else if(motorDir>=2) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[0][3]==motorDir) __iv__return_expr_floorIsOrdered = 1; else __iv__return_expr_floorIsOrdered = 0; 
	__CPROVER_assume(__iv__return_expr_floorIsOrdered == 0 || __iv__return_expr_floorIsOrdered == 1);
	return __iv__return_expr_floorIsOrdered;
}
complexity: 3
accuracy: 77.56%
coverage: 100.00%
# constraints: 9

signed int __iv__isButtonPressed_stub() {
	signed int __iv__return_expr_isButtonPressed;
	if(1==orderMatrix[0][0]) __iv__return_expr_isButtonPressed = orderMatrix[0][0]; else if(1==orderMatrix[0][3]) __iv__return_expr_isButtonPressed = 1; else if(1==orderMatrix[2][1]) __iv__return_expr_isButtonPressed = 1; else __iv__return_expr_isButtonPressed = 0; 
	__CPROVER_assume(__iv__return_expr_isButtonPressed == 0 || __iv__return_expr_isButtonPressed == 1);
	return __iv__return_expr_isButtonPressed;
}
complexity: 3
accuracy: 83.83%
coverage: 100.00%
# constraints: 10

run cbmc: (unwind: 180, timeout: 86400 sec)
cbmc running time: 51.691 sec

verification results: 
property 'assert((state != 2));' is not violated.

total CBMC running time: 447.894 sec
total true alarm finding time: 0.0 sec
total refinement time: 0.0 sec, # of refinements: 0
peak memory usage: 2434.59 MB

call elev_get_button_signal((elev_button_type_t)(button), floorNum) (call id 49)
call floorIsOrdered(previousMainFloor, motorDirection) (call id 20)
call isButtonPressed() (call id 11)
call floorIsOrdered(previousMainFloor, motorDirection) (call id 14)
Iteration 0:
signed int __iv__elev_get_button_signal_stub(elev_button_type_t button, signed int floor) {
	signed int __iv__return_expr_elev_get_button_signal;
	signed int __iv__nondet_input_elev_get_button_signal_1 = __VERIFIER_nondet_signed_int();
	__iv__return_expr_elev_get_button_signal = __iv__nondet_input_elev_get_button_signal_1;
	__CPROVER_assume(__iv__return_expr_elev_get_button_signal == 0 || __iv__return_expr_elev_get_button_signal == 1);
	return __iv__return_expr_elev_get_button_signal;
}
complexity: 0
accuracy: 100.00%
coverage: 100.00%
# constraints: 2

signed int __iv__floorIsOrdered_stub(signed int floorNum, signed int motorDir) {
	signed int __iv__return_expr_floorIsOrdered;
	if(1==orderMatrix[2][0]) __iv__return_expr_floorIsOrdered = 1; else if(motorDir>=2) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[0][3]==motorDir) __iv__return_expr_floorIsOrdered = 1; else __iv__return_expr_floorIsOrdered = 0; 
	__CPROVER_assume(__iv__return_expr_floorIsOrdered == 0 || __iv__return_expr_floorIsOrdered == 1);
	return __iv__return_expr_floorIsOrdered;
}
complexity: 3
accuracy: 77.56%
coverage: 100.00%
# constraints: 9

signed int __iv__isButtonPressed_stub() {
	signed int __iv__return_expr_isButtonPressed;
	if(1==orderMatrix[0][0]) __iv__return_expr_isButtonPressed = orderMatrix[0][0]; else if(1==orderMatrix[0][3]) __iv__return_expr_isButtonPressed = 1; else if(1==orderMatrix[2][1]) __iv__return_expr_isButtonPressed = 1; else __iv__return_expr_isButtonPressed = 0; 
	__CPROVER_assume(__iv__return_expr_isButtonPressed == 0 || __iv__return_expr_isButtonPressed == 1);
	return __iv__return_expr_isButtonPressed;
}
complexity: 3
accuracy: 83.83%
coverage: 100.00%
# constraints: 10

run cbmc: (unwind: 190, timeout: 86400 sec)
cbmc running time: 57.562 sec

verification results: 
property 'assert((state != 2));' is not violated.

total CBMC running time: 505.456 sec
total true alarm finding time: 0.0 sec
total refinement time: 0.0 sec, # of refinements: 0
peak memory usage: 2737.55 MB

call elev_get_button_signal((elev_button_type_t)(button), floorNum) (call id 49)
call floorIsOrdered(previousMainFloor, motorDirection) (call id 20)
call isButtonPressed() (call id 11)
call floorIsOrdered(previousMainFloor, motorDirection) (call id 14)
Iteration 0:
signed int __iv__elev_get_button_signal_stub(elev_button_type_t button, signed int floor) {
	signed int __iv__return_expr_elev_get_button_signal;
	signed int __iv__nondet_input_elev_get_button_signal_1 = __VERIFIER_nondet_signed_int();
	__iv__return_expr_elev_get_button_signal = __iv__nondet_input_elev_get_button_signal_1;
	__CPROVER_assume(__iv__return_expr_elev_get_button_signal == 0 || __iv__return_expr_elev_get_button_signal == 1);
	return __iv__return_expr_elev_get_button_signal;
}
complexity: 0
accuracy: 100.00%
coverage: 100.00%
# constraints: 2

signed int __iv__floorIsOrdered_stub(signed int floorNum, signed int motorDir) {
	signed int __iv__return_expr_floorIsOrdered;
	if(1==orderMatrix[2][0]) __iv__return_expr_floorIsOrdered = 1; else if(motorDir>=2) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[0][3]==motorDir) __iv__return_expr_floorIsOrdered = 1; else __iv__return_expr_floorIsOrdered = 0; 
	__CPROVER_assume(__iv__return_expr_floorIsOrdered == 0 || __iv__return_expr_floorIsOrdered == 1);
	return __iv__return_expr_floorIsOrdered;
}
complexity: 3
accuracy: 77.56%
coverage: 100.00%
# constraints: 9

signed int __iv__isButtonPressed_stub() {
	signed int __iv__return_expr_isButtonPressed;
	if(1==orderMatrix[0][0]) __iv__return_expr_isButtonPressed = orderMatrix[0][0]; else if(1==orderMatrix[0][3]) __iv__return_expr_isButtonPressed = 1; else if(1==orderMatrix[2][1]) __iv__return_expr_isButtonPressed = 1; else __iv__return_expr_isButtonPressed = 0; 
	__CPROVER_assume(__iv__return_expr_isButtonPressed == 0 || __iv__return_expr_isButtonPressed == 1);
	return __iv__return_expr_isButtonPressed;
}
complexity: 3
accuracy: 83.83%
coverage: 100.00%
# constraints: 10

run cbmc: (unwind: 200, timeout: 86400 sec)
cbmc running time: 70.06 sec

verification results: 
property 'assert((state != 2));' is not violated.

total CBMC running time: 575.516 sec
total true alarm finding time: 0.0 sec
total refinement time: 0.0 sec, # of refinements: 0
peak memory usage: 2740.20 MB

call elev_get_button_signal((elev_button_type_t)(button), floorNum) (call id 49)
call floorIsOrdered(previousMainFloor, motorDirection) (call id 20)
call isButtonPressed() (call id 11)
call floorIsOrdered(previousMainFloor, motorDirection) (call id 14)
Iteration 0:
signed int __iv__elev_get_button_signal_stub(elev_button_type_t button, signed int floor) {
	signed int __iv__return_expr_elev_get_button_signal;
	signed int __iv__nondet_input_elev_get_button_signal_1 = __VERIFIER_nondet_signed_int();
	__iv__return_expr_elev_get_button_signal = __iv__nondet_input_elev_get_button_signal_1;
	__CPROVER_assume(__iv__return_expr_elev_get_button_signal == 0 || __iv__return_expr_elev_get_button_signal == 1);
	return __iv__return_expr_elev_get_button_signal;
}
complexity: 0
accuracy: 100.00%
coverage: 100.00%
# constraints: 2

signed int __iv__floorIsOrdered_stub(signed int floorNum, signed int motorDir) {
	signed int __iv__return_expr_floorIsOrdered;
	if(1==orderMatrix[2][0]) __iv__return_expr_floorIsOrdered = 1; else if(motorDir>=2) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[0][3]==motorDir) __iv__return_expr_floorIsOrdered = 1; else __iv__return_expr_floorIsOrdered = 0; 
	__CPROVER_assume(__iv__return_expr_floorIsOrdered == 0 || __iv__return_expr_floorIsOrdered == 1);
	return __iv__return_expr_floorIsOrdered;
}
complexity: 3
accuracy: 77.56%
coverage: 100.00%
# constraints: 9

signed int __iv__isButtonPressed_stub() {
	signed int __iv__return_expr_isButtonPressed;
	if(1==orderMatrix[0][0]) __iv__return_expr_isButtonPressed = orderMatrix[0][0]; else if(1==orderMatrix[0][3]) __iv__return_expr_isButtonPressed = 1; else if(1==orderMatrix[2][1]) __iv__return_expr_isButtonPressed = 1; else __iv__return_expr_isButtonPressed = 0; 
	__CPROVER_assume(__iv__return_expr_isButtonPressed == 0 || __iv__return_expr_isButtonPressed == 1);
	return __iv__return_expr_isButtonPressed;
}
complexity: 3
accuracy: 83.83%
coverage: 100.00%
# constraints: 10

run cbmc: (unwind: 210, timeout: 86400 sec)
cbmc running time: 60.229 sec

verification results: 
property 'assert((state != 2));' is not violated.

total CBMC running time: 635.745 sec
total true alarm finding time: 0.0 sec
total refinement time: 0.0 sec, # of refinements: 0
peak memory usage: 3038.29 MB

call elev_get_button_signal((elev_button_type_t)(button), floorNum) (call id 49)
call floorIsOrdered(previousMainFloor, motorDirection) (call id 20)
call isButtonPressed() (call id 11)
call floorIsOrdered(previousMainFloor, motorDirection) (call id 14)
Iteration 0:
signed int __iv__elev_get_button_signal_stub(elev_button_type_t button, signed int floor) {
	signed int __iv__return_expr_elev_get_button_signal;
	signed int __iv__nondet_input_elev_get_button_signal_1 = __VERIFIER_nondet_signed_int();
	__iv__return_expr_elev_get_button_signal = __iv__nondet_input_elev_get_button_signal_1;
	__CPROVER_assume(__iv__return_expr_elev_get_button_signal == 0 || __iv__return_expr_elev_get_button_signal == 1);
	return __iv__return_expr_elev_get_button_signal;
}
complexity: 0
accuracy: 100.00%
coverage: 100.00%
# constraints: 2

signed int __iv__floorIsOrdered_stub(signed int floorNum, signed int motorDir) {
	signed int __iv__return_expr_floorIsOrdered;
	if(1==orderMatrix[2][0]) __iv__return_expr_floorIsOrdered = 1; else if(motorDir>=2) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[0][3]==motorDir) __iv__return_expr_floorIsOrdered = 1; else __iv__return_expr_floorIsOrdered = 0; 
	__CPROVER_assume(__iv__return_expr_floorIsOrdered == 0 || __iv__return_expr_floorIsOrdered == 1);
	return __iv__return_expr_floorIsOrdered;
}
complexity: 3
accuracy: 77.56%
coverage: 100.00%
# constraints: 9

signed int __iv__isButtonPressed_stub() {
	signed int __iv__return_expr_isButtonPressed;
	if(1==orderMatrix[0][0]) __iv__return_expr_isButtonPressed = orderMatrix[0][0]; else if(1==orderMatrix[0][3]) __iv__return_expr_isButtonPressed = 1; else if(1==orderMatrix[2][1]) __iv__return_expr_isButtonPressed = 1; else __iv__return_expr_isButtonPressed = 0; 
	__CPROVER_assume(__iv__return_expr_isButtonPressed == 0 || __iv__return_expr_isButtonPressed == 1);
	return __iv__return_expr_isButtonPressed;
}
complexity: 3
accuracy: 83.83%
coverage: 100.00%
# constraints: 10

run cbmc: (unwind: 220, timeout: 86400 sec)
cbmc running time: 69.206 sec

verification results: 
property 'assert((state != 2));' is not violated.

total CBMC running time: 704.951 sec
total true alarm finding time: 0.0 sec
total refinement time: 0.0 sec, # of refinements: 0
peak memory usage: 3233.55 MB

call elev_get_button_signal((elev_button_type_t)(button), floorNum) (call id 49)
call floorIsOrdered(previousMainFloor, motorDirection) (call id 20)
call isButtonPressed() (call id 11)
call floorIsOrdered(previousMainFloor, motorDirection) (call id 14)
Iteration 0:
signed int __iv__elev_get_button_signal_stub(elev_button_type_t button, signed int floor) {
	signed int __iv__return_expr_elev_get_button_signal;
	signed int __iv__nondet_input_elev_get_button_signal_1 = __VERIFIER_nondet_signed_int();
	__iv__return_expr_elev_get_button_signal = __iv__nondet_input_elev_get_button_signal_1;
	__CPROVER_assume(__iv__return_expr_elev_get_button_signal == 0 || __iv__return_expr_elev_get_button_signal == 1);
	return __iv__return_expr_elev_get_button_signal;
}
complexity: 0
accuracy: 100.00%
coverage: 100.00%
# constraints: 2

signed int __iv__floorIsOrdered_stub(signed int floorNum, signed int motorDir) {
	signed int __iv__return_expr_floorIsOrdered;
	if(1==orderMatrix[2][0]) __iv__return_expr_floorIsOrdered = 1; else if(motorDir>=2) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[0][3]==motorDir) __iv__return_expr_floorIsOrdered = 1; else __iv__return_expr_floorIsOrdered = 0; 
	__CPROVER_assume(__iv__return_expr_floorIsOrdered == 0 || __iv__return_expr_floorIsOrdered == 1);
	return __iv__return_expr_floorIsOrdered;
}
complexity: 3
accuracy: 77.56%
coverage: 100.00%
# constraints: 9

signed int __iv__isButtonPressed_stub() {
	signed int __iv__return_expr_isButtonPressed;
	if(1==orderMatrix[0][0]) __iv__return_expr_isButtonPressed = orderMatrix[0][0]; else if(1==orderMatrix[0][3]) __iv__return_expr_isButtonPressed = 1; else if(1==orderMatrix[2][1]) __iv__return_expr_isButtonPressed = 1; else __iv__return_expr_isButtonPressed = 0; 
	__CPROVER_assume(__iv__return_expr_isButtonPressed == 0 || __iv__return_expr_isButtonPressed == 1);
	return __iv__return_expr_isButtonPressed;
}
complexity: 3
accuracy: 83.83%
coverage: 100.00%
# constraints: 10

run cbmc: (unwind: 230, timeout: 86400 sec)
cbmc running time: 78.446 sec

verification results: 
property 'assert((state != 2));' is not violated.

total CBMC running time: 783.397 sec
total true alarm finding time: 0.0 sec
total refinement time: 0.0 sec, # of refinements: 0
peak memory usage: 3370.36 MB

call elev_get_button_signal((elev_button_type_t)(button), floorNum) (call id 49)
call floorIsOrdered(previousMainFloor, motorDirection) (call id 20)
call isButtonPressed() (call id 11)
call floorIsOrdered(previousMainFloor, motorDirection) (call id 14)
Iteration 0:
signed int __iv__elev_get_button_signal_stub(elev_button_type_t button, signed int floor) {
	signed int __iv__return_expr_elev_get_button_signal;
	signed int __iv__nondet_input_elev_get_button_signal_1 = __VERIFIER_nondet_signed_int();
	__iv__return_expr_elev_get_button_signal = __iv__nondet_input_elev_get_button_signal_1;
	__CPROVER_assume(__iv__return_expr_elev_get_button_signal == 0 || __iv__return_expr_elev_get_button_signal == 1);
	return __iv__return_expr_elev_get_button_signal;
}
complexity: 0
accuracy: 100.00%
coverage: 100.00%
# constraints: 2

signed int __iv__floorIsOrdered_stub(signed int floorNum, signed int motorDir) {
	signed int __iv__return_expr_floorIsOrdered;
	if(1==orderMatrix[2][0]) __iv__return_expr_floorIsOrdered = 1; else if(motorDir>=2) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[0][3]==motorDir) __iv__return_expr_floorIsOrdered = 1; else __iv__return_expr_floorIsOrdered = 0; 
	__CPROVER_assume(__iv__return_expr_floorIsOrdered == 0 || __iv__return_expr_floorIsOrdered == 1);
	return __iv__return_expr_floorIsOrdered;
}
complexity: 3
accuracy: 77.56%
coverage: 100.00%
# constraints: 9

signed int __iv__isButtonPressed_stub() {
	signed int __iv__return_expr_isButtonPressed;
	if(1==orderMatrix[0][0]) __iv__return_expr_isButtonPressed = orderMatrix[0][0]; else if(1==orderMatrix[0][3]) __iv__return_expr_isButtonPressed = 1; else if(1==orderMatrix[2][1]) __iv__return_expr_isButtonPressed = 1; else __iv__return_expr_isButtonPressed = 0; 
	__CPROVER_assume(__iv__return_expr_isButtonPressed == 0 || __iv__return_expr_isButtonPressed == 1);
	return __iv__return_expr_isButtonPressed;
}
complexity: 3
accuracy: 83.83%
coverage: 100.00%
# constraints: 10

run cbmc: (unwind: 240, timeout: 86400 sec)
cbmc running time: 63.049 sec

verification results: 
property 'assert((state != 2));' is not violated.

total CBMC running time: 846.446 sec
total true alarm finding time: 0.0 sec
total refinement time: 0.0 sec, # of refinements: 0
peak memory usage: 3467.98 MB

call elev_get_button_signal((elev_button_type_t)(button), floorNum) (call id 49)
call floorIsOrdered(previousMainFloor, motorDirection) (call id 20)
call isButtonPressed() (call id 11)
call floorIsOrdered(previousMainFloor, motorDirection) (call id 14)
Iteration 0:
signed int __iv__elev_get_button_signal_stub(elev_button_type_t button, signed int floor) {
	signed int __iv__return_expr_elev_get_button_signal;
	signed int __iv__nondet_input_elev_get_button_signal_1 = __VERIFIER_nondet_signed_int();
	__iv__return_expr_elev_get_button_signal = __iv__nondet_input_elev_get_button_signal_1;
	__CPROVER_assume(__iv__return_expr_elev_get_button_signal == 0 || __iv__return_expr_elev_get_button_signal == 1);
	return __iv__return_expr_elev_get_button_signal;
}
complexity: 0
accuracy: 100.00%
coverage: 100.00%
# constraints: 2

signed int __iv__floorIsOrdered_stub(signed int floorNum, signed int motorDir) {
	signed int __iv__return_expr_floorIsOrdered;
	if(1==orderMatrix[2][0]) __iv__return_expr_floorIsOrdered = 1; else if(motorDir>=2) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[0][3]==motorDir) __iv__return_expr_floorIsOrdered = 1; else __iv__return_expr_floorIsOrdered = 0; 
	__CPROVER_assume(__iv__return_expr_floorIsOrdered == 0 || __iv__return_expr_floorIsOrdered == 1);
	return __iv__return_expr_floorIsOrdered;
}
complexity: 3
accuracy: 77.56%
coverage: 100.00%
# constraints: 9

signed int __iv__isButtonPressed_stub() {
	signed int __iv__return_expr_isButtonPressed;
	if(1==orderMatrix[0][0]) __iv__return_expr_isButtonPressed = orderMatrix[0][0]; else if(1==orderMatrix[0][3]) __iv__return_expr_isButtonPressed = 1; else if(1==orderMatrix[2][1]) __iv__return_expr_isButtonPressed = 1; else __iv__return_expr_isButtonPressed = 0; 
	__CPROVER_assume(__iv__return_expr_isButtonPressed == 0 || __iv__return_expr_isButtonPressed == 1);
	return __iv__return_expr_isButtonPressed;
}
complexity: 3
accuracy: 83.83%
coverage: 100.00%
# constraints: 10

run cbmc: (unwind: 250, timeout: 86400 sec)
cbmc running time: 82.031 sec

verification results: 
property 'assert((state != 2));' is not violated.

total CBMC running time: 928.477 sec
total true alarm finding time: 0.0 sec
total refinement time: 0.0 sec, # of refinements: 0
peak memory usage: 3654.11 MB

call elev_get_button_signal((elev_button_type_t)(button), floorNum) (call id 49)
call floorIsOrdered(previousMainFloor, motorDirection) (call id 20)
call isButtonPressed() (call id 11)
call floorIsOrdered(previousMainFloor, motorDirection) (call id 14)
Iteration 0:
signed int __iv__elev_get_button_signal_stub(elev_button_type_t button, signed int floor) {
	signed int __iv__return_expr_elev_get_button_signal;
	signed int __iv__nondet_input_elev_get_button_signal_1 = __VERIFIER_nondet_signed_int();
	__iv__return_expr_elev_get_button_signal = __iv__nondet_input_elev_get_button_signal_1;
	__CPROVER_assume(__iv__return_expr_elev_get_button_signal == 0 || __iv__return_expr_elev_get_button_signal == 1);
	return __iv__return_expr_elev_get_button_signal;
}
complexity: 0
accuracy: 100.00%
coverage: 100.00%
# constraints: 2

signed int __iv__floorIsOrdered_stub(signed int floorNum, signed int motorDir) {
	signed int __iv__return_expr_floorIsOrdered;
	if(1==orderMatrix[2][0]) __iv__return_expr_floorIsOrdered = 1; else if(motorDir>=2) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[0][3]==motorDir) __iv__return_expr_floorIsOrdered = 1; else __iv__return_expr_floorIsOrdered = 0; 
	__CPROVER_assume(__iv__return_expr_floorIsOrdered == 0 || __iv__return_expr_floorIsOrdered == 1);
	return __iv__return_expr_floorIsOrdered;
}
complexity: 3
accuracy: 77.56%
coverage: 100.00%
# constraints: 9

signed int __iv__isButtonPressed_stub() {
	signed int __iv__return_expr_isButtonPressed;
	if(1==orderMatrix[0][0]) __iv__return_expr_isButtonPressed = orderMatrix[0][0]; else if(1==orderMatrix[0][3]) __iv__return_expr_isButtonPressed = 1; else if(1==orderMatrix[2][1]) __iv__return_expr_isButtonPressed = 1; else __iv__return_expr_isButtonPressed = 0; 
	__CPROVER_assume(__iv__return_expr_isButtonPressed == 0 || __iv__return_expr_isButtonPressed == 1);
	return __iv__return_expr_isButtonPressed;
}
complexity: 3
accuracy: 83.83%
coverage: 100.00%
# constraints: 10

run cbmc: (unwind: 260, timeout: 86400 sec)
cbmc running time: 96.958 sec

verification results: 
property 'assert((state != 2));' is not violated.

total CBMC running time: 1025.435 sec
total true alarm finding time: 0.0 sec
total refinement time: 0.0 sec, # of refinements: 0
peak memory usage: 3777.39 MB

call elev_get_button_signal((elev_button_type_t)(button), floorNum) (call id 49)
call floorIsOrdered(previousMainFloor, motorDirection) (call id 20)
call isButtonPressed() (call id 11)
call floorIsOrdered(previousMainFloor, motorDirection) (call id 14)
Iteration 0:
signed int __iv__elev_get_button_signal_stub(elev_button_type_t button, signed int floor) {
	signed int __iv__return_expr_elev_get_button_signal;
	signed int __iv__nondet_input_elev_get_button_signal_1 = __VERIFIER_nondet_signed_int();
	__iv__return_expr_elev_get_button_signal = __iv__nondet_input_elev_get_button_signal_1;
	__CPROVER_assume(__iv__return_expr_elev_get_button_signal == 0 || __iv__return_expr_elev_get_button_signal == 1);
	return __iv__return_expr_elev_get_button_signal;
}
complexity: 0
accuracy: 100.00%
coverage: 100.00%
# constraints: 2

signed int __iv__floorIsOrdered_stub(signed int floorNum, signed int motorDir) {
	signed int __iv__return_expr_floorIsOrdered;
	if(1==orderMatrix[2][0]) __iv__return_expr_floorIsOrdered = 1; else if(motorDir>=2) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[0][3]==motorDir) __iv__return_expr_floorIsOrdered = 1; else __iv__return_expr_floorIsOrdered = 0; 
	__CPROVER_assume(__iv__return_expr_floorIsOrdered == 0 || __iv__return_expr_floorIsOrdered == 1);
	return __iv__return_expr_floorIsOrdered;
}
complexity: 3
accuracy: 77.56%
coverage: 100.00%
# constraints: 9

signed int __iv__isButtonPressed_stub() {
	signed int __iv__return_expr_isButtonPressed;
	if(1==orderMatrix[0][0]) __iv__return_expr_isButtonPressed = orderMatrix[0][0]; else if(1==orderMatrix[0][3]) __iv__return_expr_isButtonPressed = 1; else if(1==orderMatrix[2][1]) __iv__return_expr_isButtonPressed = 1; else __iv__return_expr_isButtonPressed = 0; 
	__CPROVER_assume(__iv__return_expr_isButtonPressed == 0 || __iv__return_expr_isButtonPressed == 1);
	return __iv__return_expr_isButtonPressed;
}
complexity: 3
accuracy: 83.83%
coverage: 100.00%
# constraints: 10

run cbmc: (unwind: 270, timeout: 86400 sec)
cbmc running time: 128.077 sec

verification results: 
property 'assert((state != 2));' is not violated.

total CBMC running time: 1153.512 sec
total true alarm finding time: 0.0 sec
total refinement time: 0.0 sec, # of refinements: 0
peak memory usage: 3967.85 MB

call elev_get_button_signal((elev_button_type_t)(button), floorNum) (call id 49)
call floorIsOrdered(previousMainFloor, motorDirection) (call id 20)
call isButtonPressed() (call id 11)
call floorIsOrdered(previousMainFloor, motorDirection) (call id 14)
Iteration 0:
signed int __iv__elev_get_button_signal_stub(elev_button_type_t button, signed int floor) {
	signed int __iv__return_expr_elev_get_button_signal;
	signed int __iv__nondet_input_elev_get_button_signal_1 = __VERIFIER_nondet_signed_int();
	__iv__return_expr_elev_get_button_signal = __iv__nondet_input_elev_get_button_signal_1;
	__CPROVER_assume(__iv__return_expr_elev_get_button_signal == 0 || __iv__return_expr_elev_get_button_signal == 1);
	return __iv__return_expr_elev_get_button_signal;
}
complexity: 0
accuracy: 100.00%
coverage: 100.00%
# constraints: 2

signed int __iv__floorIsOrdered_stub(signed int floorNum, signed int motorDir) {
	signed int __iv__return_expr_floorIsOrdered;
	if(1==orderMatrix[2][0]) __iv__return_expr_floorIsOrdered = 1; else if(motorDir>=2) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[0][3]==motorDir) __iv__return_expr_floorIsOrdered = 1; else __iv__return_expr_floorIsOrdered = 0; 
	__CPROVER_assume(__iv__return_expr_floorIsOrdered == 0 || __iv__return_expr_floorIsOrdered == 1);
	return __iv__return_expr_floorIsOrdered;
}
complexity: 3
accuracy: 77.56%
coverage: 100.00%
# constraints: 9

signed int __iv__isButtonPressed_stub() {
	signed int __iv__return_expr_isButtonPressed;
	if(1==orderMatrix[0][0]) __iv__return_expr_isButtonPressed = orderMatrix[0][0]; else if(1==orderMatrix[0][3]) __iv__return_expr_isButtonPressed = 1; else if(1==orderMatrix[2][1]) __iv__return_expr_isButtonPressed = 1; else __iv__return_expr_isButtonPressed = 0; 
	__CPROVER_assume(__iv__return_expr_isButtonPressed == 0 || __iv__return_expr_isButtonPressed == 1);
	return __iv__return_expr_isButtonPressed;
}
complexity: 3
accuracy: 83.83%
coverage: 100.00%
# constraints: 10

run cbmc: (unwind: 280, timeout: 86400 sec)
cbmc running time: 124.266 sec

verification results: 
property 'assert((state != 2));' is not violated.

total CBMC running time: 1277.778 sec
total true alarm finding time: 0.0 sec
total refinement time: 0.0 sec, # of refinements: 0
peak memory usage: 3967.85 MB

call elev_get_button_signal((elev_button_type_t)(button), floorNum) (call id 49)
call floorIsOrdered(previousMainFloor, motorDirection) (call id 20)
call isButtonPressed() (call id 11)
call floorIsOrdered(previousMainFloor, motorDirection) (call id 14)
Iteration 0:
signed int __iv__elev_get_button_signal_stub(elev_button_type_t button, signed int floor) {
	signed int __iv__return_expr_elev_get_button_signal;
	signed int __iv__nondet_input_elev_get_button_signal_1 = __VERIFIER_nondet_signed_int();
	__iv__return_expr_elev_get_button_signal = __iv__nondet_input_elev_get_button_signal_1;
	__CPROVER_assume(__iv__return_expr_elev_get_button_signal == 0 || __iv__return_expr_elev_get_button_signal == 1);
	return __iv__return_expr_elev_get_button_signal;
}
complexity: 0
accuracy: 100.00%
coverage: 100.00%
# constraints: 2

signed int __iv__floorIsOrdered_stub(signed int floorNum, signed int motorDir) {
	signed int __iv__return_expr_floorIsOrdered;
	if(1==orderMatrix[2][0]) __iv__return_expr_floorIsOrdered = 1; else if(motorDir>=2) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[0][3]==motorDir) __iv__return_expr_floorIsOrdered = 1; else __iv__return_expr_floorIsOrdered = 0; 
	__CPROVER_assume(__iv__return_expr_floorIsOrdered == 0 || __iv__return_expr_floorIsOrdered == 1);
	return __iv__return_expr_floorIsOrdered;
}
complexity: 3
accuracy: 77.56%
coverage: 100.00%
# constraints: 9

signed int __iv__isButtonPressed_stub() {
	signed int __iv__return_expr_isButtonPressed;
	if(1==orderMatrix[0][0]) __iv__return_expr_isButtonPressed = orderMatrix[0][0]; else if(1==orderMatrix[0][3]) __iv__return_expr_isButtonPressed = 1; else if(1==orderMatrix[2][1]) __iv__return_expr_isButtonPressed = 1; else __iv__return_expr_isButtonPressed = 0; 
	__CPROVER_assume(__iv__return_expr_isButtonPressed == 0 || __iv__return_expr_isButtonPressed == 1);
	return __iv__return_expr_isButtonPressed;
}
complexity: 3
accuracy: 83.83%
coverage: 100.00%
# constraints: 10

run cbmc: (unwind: 290, timeout: 86400 sec)
cbmc running time: 104.36 sec

verification results: 
property 'assert((state != 2));' is not violated.

total CBMC running time: 1382.138 sec
total true alarm finding time: 0.0 sec
total refinement time: 0.0 sec, # of refinements: 0
peak memory usage: 4123.98 MB

call elev_get_button_signal((elev_button_type_t)(button), floorNum) (call id 49)
call floorIsOrdered(previousMainFloor, motorDirection) (call id 20)
call isButtonPressed() (call id 11)
call floorIsOrdered(previousMainFloor, motorDirection) (call id 14)
Iteration 0:
signed int __iv__elev_get_button_signal_stub(elev_button_type_t button, signed int floor) {
	signed int __iv__return_expr_elev_get_button_signal;
	signed int __iv__nondet_input_elev_get_button_signal_1 = __VERIFIER_nondet_signed_int();
	__iv__return_expr_elev_get_button_signal = __iv__nondet_input_elev_get_button_signal_1;
	__CPROVER_assume(__iv__return_expr_elev_get_button_signal == 0 || __iv__return_expr_elev_get_button_signal == 1);
	return __iv__return_expr_elev_get_button_signal;
}
complexity: 0
accuracy: 100.00%
coverage: 100.00%
# constraints: 2

signed int __iv__floorIsOrdered_stub(signed int floorNum, signed int motorDir) {
	signed int __iv__return_expr_floorIsOrdered;
	if(1==orderMatrix[2][0]) __iv__return_expr_floorIsOrdered = 1; else if(motorDir>=2) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[0][3]==motorDir) __iv__return_expr_floorIsOrdered = 1; else __iv__return_expr_floorIsOrdered = 0; 
	__CPROVER_assume(__iv__return_expr_floorIsOrdered == 0 || __iv__return_expr_floorIsOrdered == 1);
	return __iv__return_expr_floorIsOrdered;
}
complexity: 3
accuracy: 77.56%
coverage: 100.00%
# constraints: 9

signed int __iv__isButtonPressed_stub() {
	signed int __iv__return_expr_isButtonPressed;
	if(1==orderMatrix[0][0]) __iv__return_expr_isButtonPressed = orderMatrix[0][0]; else if(1==orderMatrix[0][3]) __iv__return_expr_isButtonPressed = 1; else if(1==orderMatrix[2][1]) __iv__return_expr_isButtonPressed = 1; else __iv__return_expr_isButtonPressed = 0; 
	__CPROVER_assume(__iv__return_expr_isButtonPressed == 0 || __iv__return_expr_isButtonPressed == 1);
	return __iv__return_expr_isButtonPressed;
}
complexity: 3
accuracy: 83.83%
coverage: 100.00%
# constraints: 10

run cbmc: (unwind: 300, timeout: 86400 sec)
cbmc running time: 112.358 sec

verification results: 
property 'assert((state != 2));' is not violated.

total CBMC running time: 1494.496 sec
total true alarm finding time: 0.0 sec
total refinement time: 0.0 sec, # of refinements: 0
peak memory usage: 4385.39 MB

call elev_get_button_signal((elev_button_type_t)(button), floorNum) (call id 49)
call floorIsOrdered(previousMainFloor, motorDirection) (call id 20)
call isButtonPressed() (call id 11)
call floorIsOrdered(previousMainFloor, motorDirection) (call id 14)
Iteration 0:
signed int __iv__elev_get_button_signal_stub(elev_button_type_t button, signed int floor) {
	signed int __iv__return_expr_elev_get_button_signal;
	signed int __iv__nondet_input_elev_get_button_signal_1 = __VERIFIER_nondet_signed_int();
	__iv__return_expr_elev_get_button_signal = __iv__nondet_input_elev_get_button_signal_1;
	__CPROVER_assume(__iv__return_expr_elev_get_button_signal == 0 || __iv__return_expr_elev_get_button_signal == 1);
	return __iv__return_expr_elev_get_button_signal;
}
complexity: 0
accuracy: 100.00%
coverage: 100.00%
# constraints: 2

signed int __iv__floorIsOrdered_stub(signed int floorNum, signed int motorDir) {
	signed int __iv__return_expr_floorIsOrdered;
	if(1==orderMatrix[2][0]) __iv__return_expr_floorIsOrdered = 1; else if(motorDir>=2) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[0][3]==motorDir) __iv__return_expr_floorIsOrdered = 1; else __iv__return_expr_floorIsOrdered = 0; 
	__CPROVER_assume(__iv__return_expr_floorIsOrdered == 0 || __iv__return_expr_floorIsOrdered == 1);
	return __iv__return_expr_floorIsOrdered;
}
complexity: 3
accuracy: 77.56%
coverage: 100.00%
# constraints: 9

signed int __iv__isButtonPressed_stub() {
	signed int __iv__return_expr_isButtonPressed;
	if(1==orderMatrix[0][0]) __iv__return_expr_isButtonPressed = orderMatrix[0][0]; else if(1==orderMatrix[0][3]) __iv__return_expr_isButtonPressed = 1; else if(1==orderMatrix[2][1]) __iv__return_expr_isButtonPressed = 1; else __iv__return_expr_isButtonPressed = 0; 
	__CPROVER_assume(__iv__return_expr_isButtonPressed == 0 || __iv__return_expr_isButtonPressed == 1);
	return __iv__return_expr_isButtonPressed;
}
complexity: 3
accuracy: 83.83%
coverage: 100.00%
# constraints: 10

run cbmc: (unwind: 310, timeout: 86400 sec)
cbmc running time: 102.74 sec

verification results: 
property 'assert((state != 2));' is not violated.

total CBMC running time: 1597.236 sec
total true alarm finding time: 0.0 sec
total refinement time: 0.0 sec, # of refinements: 0
peak memory usage: 4526.61 MB

call elev_get_button_signal((elev_button_type_t)(button), floorNum) (call id 49)
call floorIsOrdered(previousMainFloor, motorDirection) (call id 20)
call isButtonPressed() (call id 11)
call floorIsOrdered(previousMainFloor, motorDirection) (call id 14)
Iteration 0:
signed int __iv__elev_get_button_signal_stub(elev_button_type_t button, signed int floor) {
	signed int __iv__return_expr_elev_get_button_signal;
	signed int __iv__nondet_input_elev_get_button_signal_1 = __VERIFIER_nondet_signed_int();
	__iv__return_expr_elev_get_button_signal = __iv__nondet_input_elev_get_button_signal_1;
	__CPROVER_assume(__iv__return_expr_elev_get_button_signal == 0 || __iv__return_expr_elev_get_button_signal == 1);
	return __iv__return_expr_elev_get_button_signal;
}
complexity: 0
accuracy: 100.00%
coverage: 100.00%
# constraints: 2

signed int __iv__floorIsOrdered_stub(signed int floorNum, signed int motorDir) {
	signed int __iv__return_expr_floorIsOrdered;
	if(1==orderMatrix[2][0]) __iv__return_expr_floorIsOrdered = 1; else if(motorDir>=2) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[0][3]==motorDir) __iv__return_expr_floorIsOrdered = 1; else __iv__return_expr_floorIsOrdered = 0; 
	__CPROVER_assume(__iv__return_expr_floorIsOrdered == 0 || __iv__return_expr_floorIsOrdered == 1);
	return __iv__return_expr_floorIsOrdered;
}
complexity: 3
accuracy: 77.56%
coverage: 100.00%
# constraints: 9

signed int __iv__isButtonPressed_stub() {
	signed int __iv__return_expr_isButtonPressed;
	if(1==orderMatrix[0][0]) __iv__return_expr_isButtonPressed = orderMatrix[0][0]; else if(1==orderMatrix[0][3]) __iv__return_expr_isButtonPressed = 1; else if(1==orderMatrix[2][1]) __iv__return_expr_isButtonPressed = 1; else __iv__return_expr_isButtonPressed = 0; 
	__CPROVER_assume(__iv__return_expr_isButtonPressed == 0 || __iv__return_expr_isButtonPressed == 1);
	return __iv__return_expr_isButtonPressed;
}
complexity: 3
accuracy: 83.83%
coverage: 100.00%
# constraints: 10

run cbmc: (unwind: 320, timeout: 86400 sec)
cbmc running time: 141.065 sec

verification results: 
property 'assert((state != 2));' is not violated.

total CBMC running time: 1738.301 sec
total true alarm finding time: 0.0 sec
total refinement time: 0.0 sec, # of refinements: 0
peak memory usage: 4671.32 MB

call elev_get_button_signal((elev_button_type_t)(button), floorNum) (call id 49)
call floorIsOrdered(previousMainFloor, motorDirection) (call id 20)
call isButtonPressed() (call id 11)
call floorIsOrdered(previousMainFloor, motorDirection) (call id 14)
Iteration 0:
signed int __iv__elev_get_button_signal_stub(elev_button_type_t button, signed int floor) {
	signed int __iv__return_expr_elev_get_button_signal;
	signed int __iv__nondet_input_elev_get_button_signal_1 = __VERIFIER_nondet_signed_int();
	__iv__return_expr_elev_get_button_signal = __iv__nondet_input_elev_get_button_signal_1;
	__CPROVER_assume(__iv__return_expr_elev_get_button_signal == 0 || __iv__return_expr_elev_get_button_signal == 1);
	return __iv__return_expr_elev_get_button_signal;
}
complexity: 0
accuracy: 100.00%
coverage: 100.00%
# constraints: 2

signed int __iv__floorIsOrdered_stub(signed int floorNum, signed int motorDir) {
	signed int __iv__return_expr_floorIsOrdered;
	if(1==orderMatrix[2][0]) __iv__return_expr_floorIsOrdered = 1; else if(motorDir>=2) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[0][3]==motorDir) __iv__return_expr_floorIsOrdered = 1; else __iv__return_expr_floorIsOrdered = 0; 
	__CPROVER_assume(__iv__return_expr_floorIsOrdered == 0 || __iv__return_expr_floorIsOrdered == 1);
	return __iv__return_expr_floorIsOrdered;
}
complexity: 3
accuracy: 77.56%
coverage: 100.00%
# constraints: 9

signed int __iv__isButtonPressed_stub() {
	signed int __iv__return_expr_isButtonPressed;
	if(1==orderMatrix[0][0]) __iv__return_expr_isButtonPressed = orderMatrix[0][0]; else if(1==orderMatrix[0][3]) __iv__return_expr_isButtonPressed = 1; else if(1==orderMatrix[2][1]) __iv__return_expr_isButtonPressed = 1; else __iv__return_expr_isButtonPressed = 0; 
	__CPROVER_assume(__iv__return_expr_isButtonPressed == 0 || __iv__return_expr_isButtonPressed == 1);
	return __iv__return_expr_isButtonPressed;
}
complexity: 3
accuracy: 83.83%
coverage: 100.00%
# constraints: 10

run cbmc: (unwind: 330, timeout: 86400 sec)
cbmc running time: 127.287 sec

verification results: 
property 'assert((state != 2));' is not violated.

total CBMC running time: 1865.588 sec
total true alarm finding time: 0.0 sec
total refinement time: 0.0 sec, # of refinements: 0
peak memory usage: 4864.87 MB

call elev_get_button_signal((elev_button_type_t)(button), floorNum) (call id 49)
call floorIsOrdered(previousMainFloor, motorDirection) (call id 20)
call isButtonPressed() (call id 11)
call floorIsOrdered(previousMainFloor, motorDirection) (call id 14)
Iteration 0:
signed int __iv__elev_get_button_signal_stub(elev_button_type_t button, signed int floor) {
	signed int __iv__return_expr_elev_get_button_signal;
	signed int __iv__nondet_input_elev_get_button_signal_1 = __VERIFIER_nondet_signed_int();
	__iv__return_expr_elev_get_button_signal = __iv__nondet_input_elev_get_button_signal_1;
	__CPROVER_assume(__iv__return_expr_elev_get_button_signal == 0 || __iv__return_expr_elev_get_button_signal == 1);
	return __iv__return_expr_elev_get_button_signal;
}
complexity: 0
accuracy: 100.00%
coverage: 100.00%
# constraints: 2

signed int __iv__floorIsOrdered_stub(signed int floorNum, signed int motorDir) {
	signed int __iv__return_expr_floorIsOrdered;
	if(1==orderMatrix[2][0]) __iv__return_expr_floorIsOrdered = 1; else if(motorDir>=2) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[0][3]==motorDir) __iv__return_expr_floorIsOrdered = 1; else __iv__return_expr_floorIsOrdered = 0; 
	__CPROVER_assume(__iv__return_expr_floorIsOrdered == 0 || __iv__return_expr_floorIsOrdered == 1);
	return __iv__return_expr_floorIsOrdered;
}
complexity: 3
accuracy: 77.56%
coverage: 100.00%
# constraints: 9

signed int __iv__isButtonPressed_stub() {
	signed int __iv__return_expr_isButtonPressed;
	if(1==orderMatrix[0][0]) __iv__return_expr_isButtonPressed = orderMatrix[0][0]; else if(1==orderMatrix[0][3]) __iv__return_expr_isButtonPressed = 1; else if(1==orderMatrix[2][1]) __iv__return_expr_isButtonPressed = 1; else __iv__return_expr_isButtonPressed = 0; 
	__CPROVER_assume(__iv__return_expr_isButtonPressed == 0 || __iv__return_expr_isButtonPressed == 1);
	return __iv__return_expr_isButtonPressed;
}
complexity: 3
accuracy: 83.83%
coverage: 100.00%
# constraints: 10

run cbmc: (unwind: 340, timeout: 86400 sec)
cbmc running time: 152.422 sec

verification results: 
property 'assert((state != 2));' is not violated.

total CBMC running time: 2018.01 sec
total true alarm finding time: 0.0 sec
total refinement time: 0.0 sec, # of refinements: 0
peak memory usage: 4932.17 MB

call elev_get_button_signal((elev_button_type_t)(button), floorNum) (call id 49)
call floorIsOrdered(previousMainFloor, motorDirection) (call id 20)
call isButtonPressed() (call id 11)
call floorIsOrdered(previousMainFloor, motorDirection) (call id 14)
Iteration 0:
signed int __iv__elev_get_button_signal_stub(elev_button_type_t button, signed int floor) {
	signed int __iv__return_expr_elev_get_button_signal;
	signed int __iv__nondet_input_elev_get_button_signal_1 = __VERIFIER_nondet_signed_int();
	__iv__return_expr_elev_get_button_signal = __iv__nondet_input_elev_get_button_signal_1;
	__CPROVER_assume(__iv__return_expr_elev_get_button_signal == 0 || __iv__return_expr_elev_get_button_signal == 1);
	return __iv__return_expr_elev_get_button_signal;
}
complexity: 0
accuracy: 100.00%
coverage: 100.00%
# constraints: 2

signed int __iv__floorIsOrdered_stub(signed int floorNum, signed int motorDir) {
	signed int __iv__return_expr_floorIsOrdered;
	if(1==orderMatrix[2][0]) __iv__return_expr_floorIsOrdered = 1; else if(motorDir>=2) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[0][3]==motorDir) __iv__return_expr_floorIsOrdered = 1; else __iv__return_expr_floorIsOrdered = 0; 
	__CPROVER_assume(__iv__return_expr_floorIsOrdered == 0 || __iv__return_expr_floorIsOrdered == 1);
	return __iv__return_expr_floorIsOrdered;
}
complexity: 3
accuracy: 77.56%
coverage: 100.00%
# constraints: 9

signed int __iv__isButtonPressed_stub() {
	signed int __iv__return_expr_isButtonPressed;
	if(1==orderMatrix[0][0]) __iv__return_expr_isButtonPressed = orderMatrix[0][0]; else if(1==orderMatrix[0][3]) __iv__return_expr_isButtonPressed = 1; else if(1==orderMatrix[2][1]) __iv__return_expr_isButtonPressed = 1; else __iv__return_expr_isButtonPressed = 0; 
	__CPROVER_assume(__iv__return_expr_isButtonPressed == 0 || __iv__return_expr_isButtonPressed == 1);
	return __iv__return_expr_isButtonPressed;
}
complexity: 3
accuracy: 83.83%
coverage: 100.00%
# constraints: 10

run cbmc: (unwind: 350, timeout: 86400 sec)
cbmc running time: 109.174 sec

verification results: 
property 'assert((state != 2));' is not violated.

total CBMC running time: 2127.184 sec
total true alarm finding time: 0.0 sec
total refinement time: 0.0 sec, # of refinements: 0
peak memory usage: 5167.70 MB

call elev_get_button_signal((elev_button_type_t)(button), floorNum) (call id 49)
call floorIsOrdered(previousMainFloor, motorDirection) (call id 20)
call isButtonPressed() (call id 11)
call floorIsOrdered(previousMainFloor, motorDirection) (call id 14)
Iteration 0:
signed int __iv__elev_get_button_signal_stub(elev_button_type_t button, signed int floor) {
	signed int __iv__return_expr_elev_get_button_signal;
	signed int __iv__nondet_input_elev_get_button_signal_1 = __VERIFIER_nondet_signed_int();
	__iv__return_expr_elev_get_button_signal = __iv__nondet_input_elev_get_button_signal_1;
	__CPROVER_assume(__iv__return_expr_elev_get_button_signal == 0 || __iv__return_expr_elev_get_button_signal == 1);
	return __iv__return_expr_elev_get_button_signal;
}
complexity: 0
accuracy: 100.00%
coverage: 100.00%
# constraints: 2

signed int __iv__floorIsOrdered_stub(signed int floorNum, signed int motorDir) {
	signed int __iv__return_expr_floorIsOrdered;
	if(1==orderMatrix[2][0]) __iv__return_expr_floorIsOrdered = 1; else if(motorDir>=2) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[0][3]==motorDir) __iv__return_expr_floorIsOrdered = 1; else __iv__return_expr_floorIsOrdered = 0; 
	__CPROVER_assume(__iv__return_expr_floorIsOrdered == 0 || __iv__return_expr_floorIsOrdered == 1);
	return __iv__return_expr_floorIsOrdered;
}
complexity: 3
accuracy: 77.56%
coverage: 100.00%
# constraints: 9

signed int __iv__isButtonPressed_stub() {
	signed int __iv__return_expr_isButtonPressed;
	if(1==orderMatrix[0][0]) __iv__return_expr_isButtonPressed = orderMatrix[0][0]; else if(1==orderMatrix[0][3]) __iv__return_expr_isButtonPressed = 1; else if(1==orderMatrix[2][1]) __iv__return_expr_isButtonPressed = 1; else __iv__return_expr_isButtonPressed = 0; 
	__CPROVER_assume(__iv__return_expr_isButtonPressed == 0 || __iv__return_expr_isButtonPressed == 1);
	return __iv__return_expr_isButtonPressed;
}
complexity: 3
accuracy: 83.83%
coverage: 100.00%
# constraints: 10

run cbmc: (unwind: 360, timeout: 86400 sec)
cbmc running time: 154.573 sec

verification results: 
property 'assert((state != 2));' is not violated.

total CBMC running time: 2281.757 sec
total true alarm finding time: 0.0 sec
total refinement time: 0.0 sec, # of refinements: 0
peak memory usage: 5310.98 MB

call elev_get_button_signal((elev_button_type_t)(button), floorNum) (call id 49)
call floorIsOrdered(previousMainFloor, motorDirection) (call id 20)
call isButtonPressed() (call id 11)
call floorIsOrdered(previousMainFloor, motorDirection) (call id 14)
Iteration 0:
signed int __iv__elev_get_button_signal_stub(elev_button_type_t button, signed int floor) {
	signed int __iv__return_expr_elev_get_button_signal;
	signed int __iv__nondet_input_elev_get_button_signal_1 = __VERIFIER_nondet_signed_int();
	__iv__return_expr_elev_get_button_signal = __iv__nondet_input_elev_get_button_signal_1;
	__CPROVER_assume(__iv__return_expr_elev_get_button_signal == 0 || __iv__return_expr_elev_get_button_signal == 1);
	return __iv__return_expr_elev_get_button_signal;
}
complexity: 0
accuracy: 100.00%
coverage: 100.00%
# constraints: 2

signed int __iv__floorIsOrdered_stub(signed int floorNum, signed int motorDir) {
	signed int __iv__return_expr_floorIsOrdered;
	if(1==orderMatrix[2][0]) __iv__return_expr_floorIsOrdered = 1; else if(motorDir>=2) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[0][3]==motorDir) __iv__return_expr_floorIsOrdered = 1; else __iv__return_expr_floorIsOrdered = 0; 
	__CPROVER_assume(__iv__return_expr_floorIsOrdered == 0 || __iv__return_expr_floorIsOrdered == 1);
	return __iv__return_expr_floorIsOrdered;
}
complexity: 3
accuracy: 77.56%
coverage: 100.00%
# constraints: 9

signed int __iv__isButtonPressed_stub() {
	signed int __iv__return_expr_isButtonPressed;
	if(1==orderMatrix[0][0]) __iv__return_expr_isButtonPressed = orderMatrix[0][0]; else if(1==orderMatrix[0][3]) __iv__return_expr_isButtonPressed = 1; else if(1==orderMatrix[2][1]) __iv__return_expr_isButtonPressed = 1; else __iv__return_expr_isButtonPressed = 0; 
	__CPROVER_assume(__iv__return_expr_isButtonPressed == 0 || __iv__return_expr_isButtonPressed == 1);
	return __iv__return_expr_isButtonPressed;
}
complexity: 3
accuracy: 83.83%
coverage: 100.00%
# constraints: 10

run cbmc: (unwind: 370, timeout: 86400 sec)
cbmc running time: 136.084 sec

verification results: 
property 'assert((state != 2));' is not violated.

total CBMC running time: 2417.841 sec
total true alarm finding time: 0.0 sec
total refinement time: 0.0 sec, # of refinements: 0
peak memory usage: 5457.86 MB

call elev_get_button_signal((elev_button_type_t)(button), floorNum) (call id 49)
call floorIsOrdered(previousMainFloor, motorDirection) (call id 20)
call isButtonPressed() (call id 11)
call floorIsOrdered(previousMainFloor, motorDirection) (call id 14)
Iteration 0:
signed int __iv__elev_get_button_signal_stub(elev_button_type_t button, signed int floor) {
	signed int __iv__return_expr_elev_get_button_signal;
	signed int __iv__nondet_input_elev_get_button_signal_1 = __VERIFIER_nondet_signed_int();
	__iv__return_expr_elev_get_button_signal = __iv__nondet_input_elev_get_button_signal_1;
	__CPROVER_assume(__iv__return_expr_elev_get_button_signal == 0 || __iv__return_expr_elev_get_button_signal == 1);
	return __iv__return_expr_elev_get_button_signal;
}
complexity: 0
accuracy: 100.00%
coverage: 100.00%
# constraints: 2

signed int __iv__floorIsOrdered_stub(signed int floorNum, signed int motorDir) {
	signed int __iv__return_expr_floorIsOrdered;
	if(1==orderMatrix[2][0]) __iv__return_expr_floorIsOrdered = 1; else if(motorDir>=2) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[0][3]==motorDir) __iv__return_expr_floorIsOrdered = 1; else __iv__return_expr_floorIsOrdered = 0; 
	__CPROVER_assume(__iv__return_expr_floorIsOrdered == 0 || __iv__return_expr_floorIsOrdered == 1);
	return __iv__return_expr_floorIsOrdered;
}
complexity: 3
accuracy: 77.56%
coverage: 100.00%
# constraints: 9

signed int __iv__isButtonPressed_stub() {
	signed int __iv__return_expr_isButtonPressed;
	if(1==orderMatrix[0][0]) __iv__return_expr_isButtonPressed = orderMatrix[0][0]; else if(1==orderMatrix[0][3]) __iv__return_expr_isButtonPressed = 1; else if(1==orderMatrix[2][1]) __iv__return_expr_isButtonPressed = 1; else __iv__return_expr_isButtonPressed = 0; 
	__CPROVER_assume(__iv__return_expr_isButtonPressed == 0 || __iv__return_expr_isButtonPressed == 1);
	return __iv__return_expr_isButtonPressed;
}
complexity: 3
accuracy: 83.83%
coverage: 100.00%
# constraints: 10

run cbmc: (unwind: 380, timeout: 86400 sec)
cbmc running time: 163.785 sec

verification results: 
property 'assert((state != 2));' is not violated.

total CBMC running time: 2581.626 sec
total true alarm finding time: 0.0 sec
total refinement time: 0.0 sec, # of refinements: 0
peak memory usage: 5589.35 MB

call elev_get_button_signal((elev_button_type_t)(button), floorNum) (call id 49)
call floorIsOrdered(previousMainFloor, motorDirection) (call id 20)
call isButtonPressed() (call id 11)
call floorIsOrdered(previousMainFloor, motorDirection) (call id 14)
Iteration 0:
signed int __iv__elev_get_button_signal_stub(elev_button_type_t button, signed int floor) {
	signed int __iv__return_expr_elev_get_button_signal;
	signed int __iv__nondet_input_elev_get_button_signal_1 = __VERIFIER_nondet_signed_int();
	__iv__return_expr_elev_get_button_signal = __iv__nondet_input_elev_get_button_signal_1;
	__CPROVER_assume(__iv__return_expr_elev_get_button_signal == 0 || __iv__return_expr_elev_get_button_signal == 1);
	return __iv__return_expr_elev_get_button_signal;
}
complexity: 0
accuracy: 100.00%
coverage: 100.00%
# constraints: 2

signed int __iv__floorIsOrdered_stub(signed int floorNum, signed int motorDir) {
	signed int __iv__return_expr_floorIsOrdered;
	if(1==orderMatrix[2][0]) __iv__return_expr_floorIsOrdered = 1; else if(motorDir>=2) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[0][3]==motorDir) __iv__return_expr_floorIsOrdered = 1; else __iv__return_expr_floorIsOrdered = 0; 
	__CPROVER_assume(__iv__return_expr_floorIsOrdered == 0 || __iv__return_expr_floorIsOrdered == 1);
	return __iv__return_expr_floorIsOrdered;
}
complexity: 3
accuracy: 77.56%
coverage: 100.00%
# constraints: 9

signed int __iv__isButtonPressed_stub() {
	signed int __iv__return_expr_isButtonPressed;
	if(1==orderMatrix[0][0]) __iv__return_expr_isButtonPressed = orderMatrix[0][0]; else if(1==orderMatrix[0][3]) __iv__return_expr_isButtonPressed = 1; else if(1==orderMatrix[2][1]) __iv__return_expr_isButtonPressed = 1; else __iv__return_expr_isButtonPressed = 0; 
	__CPROVER_assume(__iv__return_expr_isButtonPressed == 0 || __iv__return_expr_isButtonPressed == 1);
	return __iv__return_expr_isButtonPressed;
}
complexity: 3
accuracy: 83.83%
coverage: 100.00%
# constraints: 10

run cbmc: (unwind: 390, timeout: 86400 sec)
cbmc running time: 143.068 sec

verification results: 
property 'assert((state != 2));' is not violated.

total CBMC running time: 2724.694 sec
total true alarm finding time: 0.0 sec
total refinement time: 0.0 sec, # of refinements: 0
peak memory usage: 5705.07 MB

call elev_get_button_signal((elev_button_type_t)(button), floorNum) (call id 49)
call floorIsOrdered(previousMainFloor, motorDirection) (call id 20)
call isButtonPressed() (call id 11)
call floorIsOrdered(previousMainFloor, motorDirection) (call id 14)
Iteration 0:
signed int __iv__elev_get_button_signal_stub(elev_button_type_t button, signed int floor) {
	signed int __iv__return_expr_elev_get_button_signal;
	signed int __iv__nondet_input_elev_get_button_signal_1 = __VERIFIER_nondet_signed_int();
	__iv__return_expr_elev_get_button_signal = __iv__nondet_input_elev_get_button_signal_1;
	__CPROVER_assume(__iv__return_expr_elev_get_button_signal == 0 || __iv__return_expr_elev_get_button_signal == 1);
	return __iv__return_expr_elev_get_button_signal;
}
complexity: 0
accuracy: 100.00%
coverage: 100.00%
# constraints: 2

signed int __iv__floorIsOrdered_stub(signed int floorNum, signed int motorDir) {
	signed int __iv__return_expr_floorIsOrdered;
	if(1==orderMatrix[2][0]) __iv__return_expr_floorIsOrdered = 1; else if(motorDir>=2) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[0][3]==motorDir) __iv__return_expr_floorIsOrdered = 1; else __iv__return_expr_floorIsOrdered = 0; 
	__CPROVER_assume(__iv__return_expr_floorIsOrdered == 0 || __iv__return_expr_floorIsOrdered == 1);
	return __iv__return_expr_floorIsOrdered;
}
complexity: 3
accuracy: 77.56%
coverage: 100.00%
# constraints: 9

signed int __iv__isButtonPressed_stub() {
	signed int __iv__return_expr_isButtonPressed;
	if(1==orderMatrix[0][0]) __iv__return_expr_isButtonPressed = orderMatrix[0][0]; else if(1==orderMatrix[0][3]) __iv__return_expr_isButtonPressed = 1; else if(1==orderMatrix[2][1]) __iv__return_expr_isButtonPressed = 1; else __iv__return_expr_isButtonPressed = 0; 
	__CPROVER_assume(__iv__return_expr_isButtonPressed == 0 || __iv__return_expr_isButtonPressed == 1);
	return __iv__return_expr_isButtonPressed;
}
complexity: 3
accuracy: 83.83%
coverage: 100.00%
# constraints: 10

run cbmc: (unwind: 400, timeout: 86400 sec)
cbmc running time: 182.078 sec

verification results: 
property 'assert((state != 2));' is not violated.

total CBMC running time: 2906.772 sec
total true alarm finding time: 0.0 sec
total refinement time: 0.0 sec, # of refinements: 0
peak memory usage: 5786.77 MB

call elev_get_button_signal((elev_button_type_t)(button), floorNum) (call id 49)
call floorIsOrdered(previousMainFloor, motorDirection) (call id 20)
call isButtonPressed() (call id 11)
call floorIsOrdered(previousMainFloor, motorDirection) (call id 14)
Iteration 0:
signed int __iv__elev_get_button_signal_stub(elev_button_type_t button, signed int floor) {
	signed int __iv__return_expr_elev_get_button_signal;
	signed int __iv__nondet_input_elev_get_button_signal_1 = __VERIFIER_nondet_signed_int();
	__iv__return_expr_elev_get_button_signal = __iv__nondet_input_elev_get_button_signal_1;
	__CPROVER_assume(__iv__return_expr_elev_get_button_signal == 0 || __iv__return_expr_elev_get_button_signal == 1);
	return __iv__return_expr_elev_get_button_signal;
}
complexity: 0
accuracy: 100.00%
coverage: 100.00%
# constraints: 2

signed int __iv__floorIsOrdered_stub(signed int floorNum, signed int motorDir) {
	signed int __iv__return_expr_floorIsOrdered;
	if(1==orderMatrix[2][0]) __iv__return_expr_floorIsOrdered = 1; else if(motorDir>=2) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[0][3]==motorDir) __iv__return_expr_floorIsOrdered = 1; else __iv__return_expr_floorIsOrdered = 0; 
	__CPROVER_assume(__iv__return_expr_floorIsOrdered == 0 || __iv__return_expr_floorIsOrdered == 1);
	return __iv__return_expr_floorIsOrdered;
}
complexity: 3
accuracy: 77.56%
coverage: 100.00%
# constraints: 9

signed int __iv__isButtonPressed_stub() {
	signed int __iv__return_expr_isButtonPressed;
	if(1==orderMatrix[0][0]) __iv__return_expr_isButtonPressed = orderMatrix[0][0]; else if(1==orderMatrix[0][3]) __iv__return_expr_isButtonPressed = 1; else if(1==orderMatrix[2][1]) __iv__return_expr_isButtonPressed = 1; else __iv__return_expr_isButtonPressed = 0; 
	__CPROVER_assume(__iv__return_expr_isButtonPressed == 0 || __iv__return_expr_isButtonPressed == 1);
	return __iv__return_expr_isButtonPressed;
}
complexity: 3
accuracy: 83.83%
coverage: 100.00%
# constraints: 10

run cbmc: (unwind: 410, timeout: 86400 sec)
cbmc running time: 186.981 sec

verification results: 
property 'assert((state != 2));' is not violated.

total CBMC running time: 3093.753 sec
total true alarm finding time: 0.0 sec
total refinement time: 0.0 sec, # of refinements: 0
peak memory usage: 6052.93 MB

call elev_get_button_signal((elev_button_type_t)(button), floorNum) (call id 49)
call floorIsOrdered(previousMainFloor, motorDirection) (call id 20)
call isButtonPressed() (call id 11)
call floorIsOrdered(previousMainFloor, motorDirection) (call id 14)
Iteration 0:
signed int __iv__elev_get_button_signal_stub(elev_button_type_t button, signed int floor) {
	signed int __iv__return_expr_elev_get_button_signal;
	signed int __iv__nondet_input_elev_get_button_signal_1 = __VERIFIER_nondet_signed_int();
	__iv__return_expr_elev_get_button_signal = __iv__nondet_input_elev_get_button_signal_1;
	__CPROVER_assume(__iv__return_expr_elev_get_button_signal == 0 || __iv__return_expr_elev_get_button_signal == 1);
	return __iv__return_expr_elev_get_button_signal;
}
complexity: 0
accuracy: 100.00%
coverage: 100.00%
# constraints: 2

signed int __iv__floorIsOrdered_stub(signed int floorNum, signed int motorDir) {
	signed int __iv__return_expr_floorIsOrdered;
	if(1==orderMatrix[2][0]) __iv__return_expr_floorIsOrdered = 1; else if(motorDir>=2) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[0][3]==motorDir) __iv__return_expr_floorIsOrdered = 1; else __iv__return_expr_floorIsOrdered = 0; 
	__CPROVER_assume(__iv__return_expr_floorIsOrdered == 0 || __iv__return_expr_floorIsOrdered == 1);
	return __iv__return_expr_floorIsOrdered;
}
complexity: 3
accuracy: 77.56%
coverage: 100.00%
# constraints: 9

signed int __iv__isButtonPressed_stub() {
	signed int __iv__return_expr_isButtonPressed;
	if(1==orderMatrix[0][0]) __iv__return_expr_isButtonPressed = orderMatrix[0][0]; else if(1==orderMatrix[0][3]) __iv__return_expr_isButtonPressed = 1; else if(1==orderMatrix[2][1]) __iv__return_expr_isButtonPressed = 1; else __iv__return_expr_isButtonPressed = 0; 
	__CPROVER_assume(__iv__return_expr_isButtonPressed == 0 || __iv__return_expr_isButtonPressed == 1);
	return __iv__return_expr_isButtonPressed;
}
complexity: 3
accuracy: 83.83%
coverage: 100.00%
# constraints: 10

run cbmc: (unwind: 420, timeout: 86400 sec)
cbmc running time: 180.572 sec

verification results: 
property 'assert((state != 2));' is not violated.

total CBMC running time: 3274.325 sec
total true alarm finding time: 0.0 sec
total refinement time: 0.0 sec, # of refinements: 0
peak memory usage: 6196.80 MB

call elev_get_button_signal((elev_button_type_t)(button), floorNum) (call id 49)
call floorIsOrdered(previousMainFloor, motorDirection) (call id 20)
call isButtonPressed() (call id 11)
call floorIsOrdered(previousMainFloor, motorDirection) (call id 14)
Iteration 0:
signed int __iv__elev_get_button_signal_stub(elev_button_type_t button, signed int floor) {
	signed int __iv__return_expr_elev_get_button_signal;
	signed int __iv__nondet_input_elev_get_button_signal_1 = __VERIFIER_nondet_signed_int();
	__iv__return_expr_elev_get_button_signal = __iv__nondet_input_elev_get_button_signal_1;
	__CPROVER_assume(__iv__return_expr_elev_get_button_signal == 0 || __iv__return_expr_elev_get_button_signal == 1);
	return __iv__return_expr_elev_get_button_signal;
}
complexity: 0
accuracy: 100.00%
coverage: 100.00%
# constraints: 2

signed int __iv__floorIsOrdered_stub(signed int floorNum, signed int motorDir) {
	signed int __iv__return_expr_floorIsOrdered;
	if(1==orderMatrix[2][0]) __iv__return_expr_floorIsOrdered = 1; else if(motorDir>=2) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[0][3]==motorDir) __iv__return_expr_floorIsOrdered = 1; else __iv__return_expr_floorIsOrdered = 0; 
	__CPROVER_assume(__iv__return_expr_floorIsOrdered == 0 || __iv__return_expr_floorIsOrdered == 1);
	return __iv__return_expr_floorIsOrdered;
}
complexity: 3
accuracy: 77.56%
coverage: 100.00%
# constraints: 9

signed int __iv__isButtonPressed_stub() {
	signed int __iv__return_expr_isButtonPressed;
	if(1==orderMatrix[0][0]) __iv__return_expr_isButtonPressed = orderMatrix[0][0]; else if(1==orderMatrix[0][3]) __iv__return_expr_isButtonPressed = 1; else if(1==orderMatrix[2][1]) __iv__return_expr_isButtonPressed = 1; else __iv__return_expr_isButtonPressed = 0; 
	__CPROVER_assume(__iv__return_expr_isButtonPressed == 0 || __iv__return_expr_isButtonPressed == 1);
	return __iv__return_expr_isButtonPressed;
}
complexity: 3
accuracy: 83.83%
coverage: 100.00%
# constraints: 10

run cbmc: (unwind: 430, timeout: 86400 sec)
cbmc running time: 230.354 sec

verification results: 
property 'assert((state != 2));' is not violated.

total CBMC running time: 3504.679 sec
total true alarm finding time: 0.0 sec
total refinement time: 0.0 sec, # of refinements: 0
peak memory usage: 6298.75 MB

call elev_get_button_signal((elev_button_type_t)(button), floorNum) (call id 49)
call floorIsOrdered(previousMainFloor, motorDirection) (call id 20)
call isButtonPressed() (call id 11)
call floorIsOrdered(previousMainFloor, motorDirection) (call id 14)
Iteration 0:
signed int __iv__elev_get_button_signal_stub(elev_button_type_t button, signed int floor) {
	signed int __iv__return_expr_elev_get_button_signal;
	signed int __iv__nondet_input_elev_get_button_signal_1 = __VERIFIER_nondet_signed_int();
	__iv__return_expr_elev_get_button_signal = __iv__nondet_input_elev_get_button_signal_1;
	__CPROVER_assume(__iv__return_expr_elev_get_button_signal == 0 || __iv__return_expr_elev_get_button_signal == 1);
	return __iv__return_expr_elev_get_button_signal;
}
complexity: 0
accuracy: 100.00%
coverage: 100.00%
# constraints: 2

signed int __iv__floorIsOrdered_stub(signed int floorNum, signed int motorDir) {
	signed int __iv__return_expr_floorIsOrdered;
	if(1==orderMatrix[2][0]) __iv__return_expr_floorIsOrdered = 1; else if(motorDir>=2) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[0][3]==motorDir) __iv__return_expr_floorIsOrdered = 1; else __iv__return_expr_floorIsOrdered = 0; 
	__CPROVER_assume(__iv__return_expr_floorIsOrdered == 0 || __iv__return_expr_floorIsOrdered == 1);
	return __iv__return_expr_floorIsOrdered;
}
complexity: 3
accuracy: 77.56%
coverage: 100.00%
# constraints: 9

signed int __iv__isButtonPressed_stub() {
	signed int __iv__return_expr_isButtonPressed;
	if(1==orderMatrix[0][0]) __iv__return_expr_isButtonPressed = orderMatrix[0][0]; else if(1==orderMatrix[0][3]) __iv__return_expr_isButtonPressed = 1; else if(1==orderMatrix[2][1]) __iv__return_expr_isButtonPressed = 1; else __iv__return_expr_isButtonPressed = 0; 
	__CPROVER_assume(__iv__return_expr_isButtonPressed == 0 || __iv__return_expr_isButtonPressed == 1);
	return __iv__return_expr_isButtonPressed;
}
complexity: 3
accuracy: 83.83%
coverage: 100.00%
# constraints: 10

run cbmc: (unwind: 440, timeout: 86400 sec)
cbmc running time: 161.857 sec

verification results: 
property 'assert((state != 2));' is not violated.

total CBMC running time: 3666.536 sec
total true alarm finding time: 0.0 sec
total refinement time: 0.0 sec, # of refinements: 0
peak memory usage: 6490.70 MB

call elev_get_button_signal((elev_button_type_t)(button), floorNum) (call id 49)
call floorIsOrdered(previousMainFloor, motorDirection) (call id 20)
call isButtonPressed() (call id 11)
call floorIsOrdered(previousMainFloor, motorDirection) (call id 14)
Iteration 0:
signed int __iv__elev_get_button_signal_stub(elev_button_type_t button, signed int floor) {
	signed int __iv__return_expr_elev_get_button_signal;
	signed int __iv__nondet_input_elev_get_button_signal_1 = __VERIFIER_nondet_signed_int();
	__iv__return_expr_elev_get_button_signal = __iv__nondet_input_elev_get_button_signal_1;
	__CPROVER_assume(__iv__return_expr_elev_get_button_signal == 0 || __iv__return_expr_elev_get_button_signal == 1);
	return __iv__return_expr_elev_get_button_signal;
}
complexity: 0
accuracy: 100.00%
coverage: 100.00%
# constraints: 2

signed int __iv__floorIsOrdered_stub(signed int floorNum, signed int motorDir) {
	signed int __iv__return_expr_floorIsOrdered;
	if(1==orderMatrix[2][0]) __iv__return_expr_floorIsOrdered = 1; else if(motorDir>=2) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[0][3]==motorDir) __iv__return_expr_floorIsOrdered = 1; else __iv__return_expr_floorIsOrdered = 0; 
	__CPROVER_assume(__iv__return_expr_floorIsOrdered == 0 || __iv__return_expr_floorIsOrdered == 1);
	return __iv__return_expr_floorIsOrdered;
}
complexity: 3
accuracy: 77.56%
coverage: 100.00%
# constraints: 9

signed int __iv__isButtonPressed_stub() {
	signed int __iv__return_expr_isButtonPressed;
	if(1==orderMatrix[0][0]) __iv__return_expr_isButtonPressed = orderMatrix[0][0]; else if(1==orderMatrix[0][3]) __iv__return_expr_isButtonPressed = 1; else if(1==orderMatrix[2][1]) __iv__return_expr_isButtonPressed = 1; else __iv__return_expr_isButtonPressed = 0; 
	__CPROVER_assume(__iv__return_expr_isButtonPressed == 0 || __iv__return_expr_isButtonPressed == 1);
	return __iv__return_expr_isButtonPressed;
}
complexity: 3
accuracy: 83.83%
coverage: 100.00%
# constraints: 10

run cbmc: (unwind: 450, timeout: 86400 sec)
cbmc running time: 227.632 sec

verification results: 
property 'assert((state != 2));' is not violated.

total CBMC running time: 3894.168 sec
total true alarm finding time: 0.0 sec
total refinement time: 0.0 sec, # of refinements: 0
peak memory usage: 6642.99 MB

call elev_get_button_signal((elev_button_type_t)(button), floorNum) (call id 49)
call floorIsOrdered(previousMainFloor, motorDirection) (call id 20)
call isButtonPressed() (call id 11)
call floorIsOrdered(previousMainFloor, motorDirection) (call id 14)
Iteration 0:
signed int __iv__elev_get_button_signal_stub(elev_button_type_t button, signed int floor) {
	signed int __iv__return_expr_elev_get_button_signal;
	signed int __iv__nondet_input_elev_get_button_signal_1 = __VERIFIER_nondet_signed_int();
	__iv__return_expr_elev_get_button_signal = __iv__nondet_input_elev_get_button_signal_1;
	__CPROVER_assume(__iv__return_expr_elev_get_button_signal == 0 || __iv__return_expr_elev_get_button_signal == 1);
	return __iv__return_expr_elev_get_button_signal;
}
complexity: 0
accuracy: 100.00%
coverage: 100.00%
# constraints: 2

signed int __iv__floorIsOrdered_stub(signed int floorNum, signed int motorDir) {
	signed int __iv__return_expr_floorIsOrdered;
	if(1==orderMatrix[2][0]) __iv__return_expr_floorIsOrdered = 1; else if(motorDir>=2) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[0][3]==motorDir) __iv__return_expr_floorIsOrdered = 1; else __iv__return_expr_floorIsOrdered = 0; 
	__CPROVER_assume(__iv__return_expr_floorIsOrdered == 0 || __iv__return_expr_floorIsOrdered == 1);
	return __iv__return_expr_floorIsOrdered;
}
complexity: 3
accuracy: 77.56%
coverage: 100.00%
# constraints: 9

signed int __iv__isButtonPressed_stub() {
	signed int __iv__return_expr_isButtonPressed;
	if(1==orderMatrix[0][0]) __iv__return_expr_isButtonPressed = orderMatrix[0][0]; else if(1==orderMatrix[0][3]) __iv__return_expr_isButtonPressed = 1; else if(1==orderMatrix[2][1]) __iv__return_expr_isButtonPressed = 1; else __iv__return_expr_isButtonPressed = 0; 
	__CPROVER_assume(__iv__return_expr_isButtonPressed == 0 || __iv__return_expr_isButtonPressed == 1);
	return __iv__return_expr_isButtonPressed;
}
complexity: 3
accuracy: 83.83%
coverage: 100.00%
# constraints: 10

run cbmc: (unwind: 460, timeout: 86400 sec)
cbmc running time: 179.151 sec

verification results: 
property 'assert((state != 2));' is not violated.

total CBMC running time: 4073.319 sec
total true alarm finding time: 0.0 sec
total refinement time: 0.0 sec, # of refinements: 0
peak memory usage: 6718.30 MB

call elev_get_button_signal((elev_button_type_t)(button), floorNum) (call id 49)
call floorIsOrdered(previousMainFloor, motorDirection) (call id 20)
call isButtonPressed() (call id 11)
call floorIsOrdered(previousMainFloor, motorDirection) (call id 14)
Iteration 0:
signed int __iv__elev_get_button_signal_stub(elev_button_type_t button, signed int floor) {
	signed int __iv__return_expr_elev_get_button_signal;
	signed int __iv__nondet_input_elev_get_button_signal_1 = __VERIFIER_nondet_signed_int();
	__iv__return_expr_elev_get_button_signal = __iv__nondet_input_elev_get_button_signal_1;
	__CPROVER_assume(__iv__return_expr_elev_get_button_signal == 0 || __iv__return_expr_elev_get_button_signal == 1);
	return __iv__return_expr_elev_get_button_signal;
}
complexity: 0
accuracy: 100.00%
coverage: 100.00%
# constraints: 2

signed int __iv__floorIsOrdered_stub(signed int floorNum, signed int motorDir) {
	signed int __iv__return_expr_floorIsOrdered;
	if(1==orderMatrix[2][0]) __iv__return_expr_floorIsOrdered = 1; else if(motorDir>=2) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[0][3]==motorDir) __iv__return_expr_floorIsOrdered = 1; else __iv__return_expr_floorIsOrdered = 0; 
	__CPROVER_assume(__iv__return_expr_floorIsOrdered == 0 || __iv__return_expr_floorIsOrdered == 1);
	return __iv__return_expr_floorIsOrdered;
}
complexity: 3
accuracy: 77.56%
coverage: 100.00%
# constraints: 9

signed int __iv__isButtonPressed_stub() {
	signed int __iv__return_expr_isButtonPressed;
	if(1==orderMatrix[0][0]) __iv__return_expr_isButtonPressed = orderMatrix[0][0]; else if(1==orderMatrix[0][3]) __iv__return_expr_isButtonPressed = 1; else if(1==orderMatrix[2][1]) __iv__return_expr_isButtonPressed = 1; else __iv__return_expr_isButtonPressed = 0; 
	__CPROVER_assume(__iv__return_expr_isButtonPressed == 0 || __iv__return_expr_isButtonPressed == 1);
	return __iv__return_expr_isButtonPressed;
}
complexity: 3
accuracy: 83.83%
coverage: 100.00%
# constraints: 10

run cbmc: (unwind: 470, timeout: 86400 sec)
cbmc running time: 240.478 sec

verification results: 
property 'assert((state != 2));' is not violated.

total CBMC running time: 4313.797 sec
total true alarm finding time: 0.0 sec
total refinement time: 0.0 sec, # of refinements: 0
peak memory usage: 6919.49 MB

call elev_get_button_signal((elev_button_type_t)(button), floorNum) (call id 49)
call floorIsOrdered(previousMainFloor, motorDirection) (call id 20)
call isButtonPressed() (call id 11)
call floorIsOrdered(previousMainFloor, motorDirection) (call id 14)
Iteration 0:
signed int __iv__elev_get_button_signal_stub(elev_button_type_t button, signed int floor) {
	signed int __iv__return_expr_elev_get_button_signal;
	signed int __iv__nondet_input_elev_get_button_signal_1 = __VERIFIER_nondet_signed_int();
	__iv__return_expr_elev_get_button_signal = __iv__nondet_input_elev_get_button_signal_1;
	__CPROVER_assume(__iv__return_expr_elev_get_button_signal == 0 || __iv__return_expr_elev_get_button_signal == 1);
	return __iv__return_expr_elev_get_button_signal;
}
complexity: 0
accuracy: 100.00%
coverage: 100.00%
# constraints: 2

signed int __iv__floorIsOrdered_stub(signed int floorNum, signed int motorDir) {
	signed int __iv__return_expr_floorIsOrdered;
	if(1==orderMatrix[2][0]) __iv__return_expr_floorIsOrdered = 1; else if(motorDir>=2) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[0][3]==motorDir) __iv__return_expr_floorIsOrdered = 1; else __iv__return_expr_floorIsOrdered = 0; 
	__CPROVER_assume(__iv__return_expr_floorIsOrdered == 0 || __iv__return_expr_floorIsOrdered == 1);
	return __iv__return_expr_floorIsOrdered;
}
complexity: 3
accuracy: 77.56%
coverage: 100.00%
# constraints: 9

signed int __iv__isButtonPressed_stub() {
	signed int __iv__return_expr_isButtonPressed;
	if(1==orderMatrix[0][0]) __iv__return_expr_isButtonPressed = orderMatrix[0][0]; else if(1==orderMatrix[0][3]) __iv__return_expr_isButtonPressed = 1; else if(1==orderMatrix[2][1]) __iv__return_expr_isButtonPressed = 1; else __iv__return_expr_isButtonPressed = 0; 
	__CPROVER_assume(__iv__return_expr_isButtonPressed == 0 || __iv__return_expr_isButtonPressed == 1);
	return __iv__return_expr_isButtonPressed;
}
complexity: 3
accuracy: 83.83%
coverage: 100.00%
# constraints: 10

run cbmc: (unwind: 480, timeout: 86400 sec)
cbmc running time: 265.723 sec

verification results: 
property 'assert((state != 2));' is not violated.

total CBMC running time: 4579.52 sec
total true alarm finding time: 0.0 sec
total refinement time: 0.0 sec, # of refinements: 0
peak memory usage: 7156.35 MB

call elev_get_button_signal((elev_button_type_t)(button), floorNum) (call id 49)
call floorIsOrdered(previousMainFloor, motorDirection) (call id 20)
call isButtonPressed() (call id 11)
call floorIsOrdered(previousMainFloor, motorDirection) (call id 14)
Iteration 0:
signed int __iv__elev_get_button_signal_stub(elev_button_type_t button, signed int floor) {
	signed int __iv__return_expr_elev_get_button_signal;
	signed int __iv__nondet_input_elev_get_button_signal_1 = __VERIFIER_nondet_signed_int();
	__iv__return_expr_elev_get_button_signal = __iv__nondet_input_elev_get_button_signal_1;
	__CPROVER_assume(__iv__return_expr_elev_get_button_signal == 0 || __iv__return_expr_elev_get_button_signal == 1);
	return __iv__return_expr_elev_get_button_signal;
}
complexity: 0
accuracy: 100.00%
coverage: 100.00%
# constraints: 2

signed int __iv__floorIsOrdered_stub(signed int floorNum, signed int motorDir) {
	signed int __iv__return_expr_floorIsOrdered;
	if(1==orderMatrix[2][0]) __iv__return_expr_floorIsOrdered = 1; else if(motorDir>=2) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[0][3]==motorDir) __iv__return_expr_floorIsOrdered = 1; else __iv__return_expr_floorIsOrdered = 0; 
	__CPROVER_assume(__iv__return_expr_floorIsOrdered == 0 || __iv__return_expr_floorIsOrdered == 1);
	return __iv__return_expr_floorIsOrdered;
}
complexity: 3
accuracy: 77.56%
coverage: 100.00%
# constraints: 9

signed int __iv__isButtonPressed_stub() {
	signed int __iv__return_expr_isButtonPressed;
	if(1==orderMatrix[0][0]) __iv__return_expr_isButtonPressed = orderMatrix[0][0]; else if(1==orderMatrix[0][3]) __iv__return_expr_isButtonPressed = 1; else if(1==orderMatrix[2][1]) __iv__return_expr_isButtonPressed = 1; else __iv__return_expr_isButtonPressed = 0; 
	__CPROVER_assume(__iv__return_expr_isButtonPressed == 0 || __iv__return_expr_isButtonPressed == 1);
	return __iv__return_expr_isButtonPressed;
}
complexity: 3
accuracy: 83.83%
coverage: 100.00%
# constraints: 10

run cbmc: (unwind: 490, timeout: 86400 sec)
cbmc running time: 241.609 sec

verification results: 
property 'assert((state != 2));' is not violated.

total CBMC running time: 4821.129 sec
total true alarm finding time: 0.0 sec
total refinement time: 0.0 sec, # of refinements: 0
peak memory usage: 7309.84 MB

call elev_get_button_signal((elev_button_type_t)(button), floorNum) (call id 49)
call floorIsOrdered(previousMainFloor, motorDirection) (call id 20)
call isButtonPressed() (call id 11)
call floorIsOrdered(previousMainFloor, motorDirection) (call id 14)
Iteration 0:
signed int __iv__elev_get_button_signal_stub(elev_button_type_t button, signed int floor) {
	signed int __iv__return_expr_elev_get_button_signal;
	signed int __iv__nondet_input_elev_get_button_signal_1 = __VERIFIER_nondet_signed_int();
	__iv__return_expr_elev_get_button_signal = __iv__nondet_input_elev_get_button_signal_1;
	__CPROVER_assume(__iv__return_expr_elev_get_button_signal == 0 || __iv__return_expr_elev_get_button_signal == 1);
	return __iv__return_expr_elev_get_button_signal;
}
complexity: 0
accuracy: 100.00%
coverage: 100.00%
# constraints: 2

signed int __iv__floorIsOrdered_stub(signed int floorNum, signed int motorDir) {
	signed int __iv__return_expr_floorIsOrdered;
	if(1==orderMatrix[2][0]) __iv__return_expr_floorIsOrdered = 1; else if(motorDir>=2) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[0][3]==motorDir) __iv__return_expr_floorIsOrdered = 1; else __iv__return_expr_floorIsOrdered = 0; 
	__CPROVER_assume(__iv__return_expr_floorIsOrdered == 0 || __iv__return_expr_floorIsOrdered == 1);
	return __iv__return_expr_floorIsOrdered;
}
complexity: 3
accuracy: 77.56%
coverage: 100.00%
# constraints: 9

signed int __iv__isButtonPressed_stub() {
	signed int __iv__return_expr_isButtonPressed;
	if(1==orderMatrix[0][0]) __iv__return_expr_isButtonPressed = orderMatrix[0][0]; else if(1==orderMatrix[0][3]) __iv__return_expr_isButtonPressed = 1; else if(1==orderMatrix[2][1]) __iv__return_expr_isButtonPressed = 1; else __iv__return_expr_isButtonPressed = 0; 
	__CPROVER_assume(__iv__return_expr_isButtonPressed == 0 || __iv__return_expr_isButtonPressed == 1);
	return __iv__return_expr_isButtonPressed;
}
complexity: 3
accuracy: 83.83%
coverage: 100.00%
# constraints: 10

run cbmc: (unwind: 500, timeout: 86400 sec)
cbmc running time: 274.899 sec

verification results: 
property 'assert((state != 2));' is not violated.

total CBMC running time: 5096.028 sec
total true alarm finding time: 0.0 sec
total refinement time: 0.0 sec, # of refinements: 0
peak memory usage: 7450.85 MB

call elev_get_button_signal((elev_button_type_t)(button), floorNum) (call id 49)
call floorIsOrdered(previousMainFloor, motorDirection) (call id 20)
call isButtonPressed() (call id 11)
call floorIsOrdered(previousMainFloor, motorDirection) (call id 14)
Iteration 0:
signed int __iv__elev_get_button_signal_stub(elev_button_type_t button, signed int floor) {
	signed int __iv__return_expr_elev_get_button_signal;
	signed int __iv__nondet_input_elev_get_button_signal_1 = __VERIFIER_nondet_signed_int();
	__iv__return_expr_elev_get_button_signal = __iv__nondet_input_elev_get_button_signal_1;
	__CPROVER_assume(__iv__return_expr_elev_get_button_signal == 0 || __iv__return_expr_elev_get_button_signal == 1);
	return __iv__return_expr_elev_get_button_signal;
}
complexity: 0
accuracy: 100.00%
coverage: 100.00%
# constraints: 2

signed int __iv__floorIsOrdered_stub(signed int floorNum, signed int motorDir) {
	signed int __iv__return_expr_floorIsOrdered;
	if(1==orderMatrix[2][0]) __iv__return_expr_floorIsOrdered = 1; else if(motorDir>=2) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[0][3]==motorDir) __iv__return_expr_floorIsOrdered = 1; else __iv__return_expr_floorIsOrdered = 0; 
	__CPROVER_assume(__iv__return_expr_floorIsOrdered == 0 || __iv__return_expr_floorIsOrdered == 1);
	return __iv__return_expr_floorIsOrdered;
}
complexity: 3
accuracy: 77.56%
coverage: 100.00%
# constraints: 9

signed int __iv__isButtonPressed_stub() {
	signed int __iv__return_expr_isButtonPressed;
	if(1==orderMatrix[0][0]) __iv__return_expr_isButtonPressed = orderMatrix[0][0]; else if(1==orderMatrix[0][3]) __iv__return_expr_isButtonPressed = 1; else if(1==orderMatrix[2][1]) __iv__return_expr_isButtonPressed = 1; else __iv__return_expr_isButtonPressed = 0; 
	__CPROVER_assume(__iv__return_expr_isButtonPressed == 0 || __iv__return_expr_isButtonPressed == 1);
	return __iv__return_expr_isButtonPressed;
}
complexity: 3
accuracy: 83.83%
coverage: 100.00%
# constraints: 10

run cbmc: (unwind: 510, timeout: 86400 sec)
cbmc running time: 229.045 sec

verification results: 
property 'assert((state != 2));' is not violated.

total CBMC running time: 5325.073 sec
total true alarm finding time: 0.0 sec
total refinement time: 0.0 sec, # of refinements: 0
peak memory usage: 7610.12 MB

call elev_get_button_signal((elev_button_type_t)(button), floorNum) (call id 49)
call floorIsOrdered(previousMainFloor, motorDirection) (call id 20)
call isButtonPressed() (call id 11)
call floorIsOrdered(previousMainFloor, motorDirection) (call id 14)
Iteration 0:
signed int __iv__elev_get_button_signal_stub(elev_button_type_t button, signed int floor) {
	signed int __iv__return_expr_elev_get_button_signal;
	signed int __iv__nondet_input_elev_get_button_signal_1 = __VERIFIER_nondet_signed_int();
	__iv__return_expr_elev_get_button_signal = __iv__nondet_input_elev_get_button_signal_1;
	__CPROVER_assume(__iv__return_expr_elev_get_button_signal == 0 || __iv__return_expr_elev_get_button_signal == 1);
	return __iv__return_expr_elev_get_button_signal;
}
complexity: 0
accuracy: 100.00%
coverage: 100.00%
# constraints: 2

signed int __iv__floorIsOrdered_stub(signed int floorNum, signed int motorDir) {
	signed int __iv__return_expr_floorIsOrdered;
	if(1==orderMatrix[2][0]) __iv__return_expr_floorIsOrdered = 1; else if(motorDir>=2) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[0][3]==motorDir) __iv__return_expr_floorIsOrdered = 1; else __iv__return_expr_floorIsOrdered = 0; 
	__CPROVER_assume(__iv__return_expr_floorIsOrdered == 0 || __iv__return_expr_floorIsOrdered == 1);
	return __iv__return_expr_floorIsOrdered;
}
complexity: 3
accuracy: 77.56%
coverage: 100.00%
# constraints: 9

signed int __iv__isButtonPressed_stub() {
	signed int __iv__return_expr_isButtonPressed;
	if(1==orderMatrix[0][0]) __iv__return_expr_isButtonPressed = orderMatrix[0][0]; else if(1==orderMatrix[0][3]) __iv__return_expr_isButtonPressed = 1; else if(1==orderMatrix[2][1]) __iv__return_expr_isButtonPressed = 1; else __iv__return_expr_isButtonPressed = 0; 
	__CPROVER_assume(__iv__return_expr_isButtonPressed == 0 || __iv__return_expr_isButtonPressed == 1);
	return __iv__return_expr_isButtonPressed;
}
complexity: 3
accuracy: 83.83%
coverage: 100.00%
# constraints: 10

run cbmc: (unwind: 520, timeout: 86400 sec)
cbmc running time: 212.103 sec

verification results: 
property 'assert((state != 2));' is not violated.

total CBMC running time: 5537.176 sec
total true alarm finding time: 0.0 sec
total refinement time: 0.0 sec, # of refinements: 0
peak memory usage: 7753.29 MB

call elev_get_button_signal((elev_button_type_t)(button), floorNum) (call id 49)
call floorIsOrdered(previousMainFloor, motorDirection) (call id 20)
call isButtonPressed() (call id 11)
call floorIsOrdered(previousMainFloor, motorDirection) (call id 14)
Iteration 0:
signed int __iv__elev_get_button_signal_stub(elev_button_type_t button, signed int floor) {
	signed int __iv__return_expr_elev_get_button_signal;
	signed int __iv__nondet_input_elev_get_button_signal_1 = __VERIFIER_nondet_signed_int();
	__iv__return_expr_elev_get_button_signal = __iv__nondet_input_elev_get_button_signal_1;
	__CPROVER_assume(__iv__return_expr_elev_get_button_signal == 0 || __iv__return_expr_elev_get_button_signal == 1);
	return __iv__return_expr_elev_get_button_signal;
}
complexity: 0
accuracy: 100.00%
coverage: 100.00%
# constraints: 2

signed int __iv__floorIsOrdered_stub(signed int floorNum, signed int motorDir) {
	signed int __iv__return_expr_floorIsOrdered;
	if(1==orderMatrix[2][0]) __iv__return_expr_floorIsOrdered = 1; else if(motorDir>=2) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[0][3]==motorDir) __iv__return_expr_floorIsOrdered = 1; else __iv__return_expr_floorIsOrdered = 0; 
	__CPROVER_assume(__iv__return_expr_floorIsOrdered == 0 || __iv__return_expr_floorIsOrdered == 1);
	return __iv__return_expr_floorIsOrdered;
}
complexity: 3
accuracy: 77.56%
coverage: 100.00%
# constraints: 9

signed int __iv__isButtonPressed_stub() {
	signed int __iv__return_expr_isButtonPressed;
	if(1==orderMatrix[0][0]) __iv__return_expr_isButtonPressed = orderMatrix[0][0]; else if(1==orderMatrix[0][3]) __iv__return_expr_isButtonPressed = 1; else if(1==orderMatrix[2][1]) __iv__return_expr_isButtonPressed = 1; else __iv__return_expr_isButtonPressed = 0; 
	__CPROVER_assume(__iv__return_expr_isButtonPressed == 0 || __iv__return_expr_isButtonPressed == 1);
	return __iv__return_expr_isButtonPressed;
}
complexity: 3
accuracy: 83.83%
coverage: 100.00%
# constraints: 10

run cbmc: (unwind: 530, timeout: 86400 sec)
cbmc running time: 195.945 sec

verification results: 
property 'assert((state != 2));' is not violated.

total CBMC running time: 5733.121 sec
total true alarm finding time: 0.0 sec
total refinement time: 0.0 sec, # of refinements: 0
peak memory usage: 7908.98 MB

call elev_get_button_signal((elev_button_type_t)(button), floorNum) (call id 49)
call floorIsOrdered(previousMainFloor, motorDirection) (call id 20)
call isButtonPressed() (call id 11)
call floorIsOrdered(previousMainFloor, motorDirection) (call id 14)
Iteration 0:
signed int __iv__elev_get_button_signal_stub(elev_button_type_t button, signed int floor) {
	signed int __iv__return_expr_elev_get_button_signal;
	signed int __iv__nondet_input_elev_get_button_signal_1 = __VERIFIER_nondet_signed_int();
	__iv__return_expr_elev_get_button_signal = __iv__nondet_input_elev_get_button_signal_1;
	__CPROVER_assume(__iv__return_expr_elev_get_button_signal == 0 || __iv__return_expr_elev_get_button_signal == 1);
	return __iv__return_expr_elev_get_button_signal;
}
complexity: 0
accuracy: 100.00%
coverage: 100.00%
# constraints: 2

signed int __iv__floorIsOrdered_stub(signed int floorNum, signed int motorDir) {
	signed int __iv__return_expr_floorIsOrdered;
	if(1==orderMatrix[2][0]) __iv__return_expr_floorIsOrdered = 1; else if(motorDir>=2) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[0][3]==motorDir) __iv__return_expr_floorIsOrdered = 1; else __iv__return_expr_floorIsOrdered = 0; 
	__CPROVER_assume(__iv__return_expr_floorIsOrdered == 0 || __iv__return_expr_floorIsOrdered == 1);
	return __iv__return_expr_floorIsOrdered;
}
complexity: 3
accuracy: 77.56%
coverage: 100.00%
# constraints: 9

signed int __iv__isButtonPressed_stub() {
	signed int __iv__return_expr_isButtonPressed;
	if(1==orderMatrix[0][0]) __iv__return_expr_isButtonPressed = orderMatrix[0][0]; else if(1==orderMatrix[0][3]) __iv__return_expr_isButtonPressed = 1; else if(1==orderMatrix[2][1]) __iv__return_expr_isButtonPressed = 1; else __iv__return_expr_isButtonPressed = 0; 
	__CPROVER_assume(__iv__return_expr_isButtonPressed == 0 || __iv__return_expr_isButtonPressed == 1);
	return __iv__return_expr_isButtonPressed;
}
complexity: 3
accuracy: 83.83%
coverage: 100.00%
# constraints: 10

run cbmc: (unwind: 540, timeout: 86400 sec)
cbmc running time: 329.487 sec

verification results: 
property 'assert((state != 2));' is not violated.

total CBMC running time: 6062.608 sec
total true alarm finding time: 0.0 sec
total refinement time: 0.0 sec, # of refinements: 0
peak memory usage: 8051.73 MB

call elev_get_button_signal((elev_button_type_t)(button), floorNum) (call id 49)
call floorIsOrdered(previousMainFloor, motorDirection) (call id 20)
call isButtonPressed() (call id 11)
call floorIsOrdered(previousMainFloor, motorDirection) (call id 14)
Iteration 0:
signed int __iv__elev_get_button_signal_stub(elev_button_type_t button, signed int floor) {
	signed int __iv__return_expr_elev_get_button_signal;
	signed int __iv__nondet_input_elev_get_button_signal_1 = __VERIFIER_nondet_signed_int();
	__iv__return_expr_elev_get_button_signal = __iv__nondet_input_elev_get_button_signal_1;
	__CPROVER_assume(__iv__return_expr_elev_get_button_signal == 0 || __iv__return_expr_elev_get_button_signal == 1);
	return __iv__return_expr_elev_get_button_signal;
}
complexity: 0
accuracy: 100.00%
coverage: 100.00%
# constraints: 2

signed int __iv__floorIsOrdered_stub(signed int floorNum, signed int motorDir) {
	signed int __iv__return_expr_floorIsOrdered;
	if(1==orderMatrix[2][0]) __iv__return_expr_floorIsOrdered = 1; else if(motorDir>=2) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[0][3]==motorDir) __iv__return_expr_floorIsOrdered = 1; else __iv__return_expr_floorIsOrdered = 0; 
	__CPROVER_assume(__iv__return_expr_floorIsOrdered == 0 || __iv__return_expr_floorIsOrdered == 1);
	return __iv__return_expr_floorIsOrdered;
}
complexity: 3
accuracy: 77.56%
coverage: 100.00%
# constraints: 9

signed int __iv__isButtonPressed_stub() {
	signed int __iv__return_expr_isButtonPressed;
	if(1==orderMatrix[0][0]) __iv__return_expr_isButtonPressed = orderMatrix[0][0]; else if(1==orderMatrix[0][3]) __iv__return_expr_isButtonPressed = 1; else if(1==orderMatrix[2][1]) __iv__return_expr_isButtonPressed = 1; else __iv__return_expr_isButtonPressed = 0; 
	__CPROVER_assume(__iv__return_expr_isButtonPressed == 0 || __iv__return_expr_isButtonPressed == 1);
	return __iv__return_expr_isButtonPressed;
}
complexity: 3
accuracy: 83.83%
coverage: 100.00%
# constraints: 10

run cbmc: (unwind: 550, timeout: 86400 sec)
cbmc running time: 238.706 sec

verification results: 
property 'assert((state != 2));' is not violated.

total CBMC running time: 6301.314 sec
total true alarm finding time: 0.0 sec
total refinement time: 0.0 sec, # of refinements: 0
peak memory usage: 8198.48 MB

call elev_get_button_signal((elev_button_type_t)(button), floorNum) (call id 49)
call floorIsOrdered(previousMainFloor, motorDirection) (call id 20)
call isButtonPressed() (call id 11)
call floorIsOrdered(previousMainFloor, motorDirection) (call id 14)
Iteration 0:
signed int __iv__elev_get_button_signal_stub(elev_button_type_t button, signed int floor) {
	signed int __iv__return_expr_elev_get_button_signal;
	signed int __iv__nondet_input_elev_get_button_signal_1 = __VERIFIER_nondet_signed_int();
	__iv__return_expr_elev_get_button_signal = __iv__nondet_input_elev_get_button_signal_1;
	__CPROVER_assume(__iv__return_expr_elev_get_button_signal == 0 || __iv__return_expr_elev_get_button_signal == 1);
	return __iv__return_expr_elev_get_button_signal;
}
complexity: 0
accuracy: 100.00%
coverage: 100.00%
# constraints: 2

signed int __iv__floorIsOrdered_stub(signed int floorNum, signed int motorDir) {
	signed int __iv__return_expr_floorIsOrdered;
	if(1==orderMatrix[2][0]) __iv__return_expr_floorIsOrdered = 1; else if(motorDir>=2) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[0][3]==motorDir) __iv__return_expr_floorIsOrdered = 1; else __iv__return_expr_floorIsOrdered = 0; 
	__CPROVER_assume(__iv__return_expr_floorIsOrdered == 0 || __iv__return_expr_floorIsOrdered == 1);
	return __iv__return_expr_floorIsOrdered;
}
complexity: 3
accuracy: 77.56%
coverage: 100.00%
# constraints: 9

signed int __iv__isButtonPressed_stub() {
	signed int __iv__return_expr_isButtonPressed;
	if(1==orderMatrix[0][0]) __iv__return_expr_isButtonPressed = orderMatrix[0][0]; else if(1==orderMatrix[0][3]) __iv__return_expr_isButtonPressed = 1; else if(1==orderMatrix[2][1]) __iv__return_expr_isButtonPressed = 1; else __iv__return_expr_isButtonPressed = 0; 
	__CPROVER_assume(__iv__return_expr_isButtonPressed == 0 || __iv__return_expr_isButtonPressed == 1);
	return __iv__return_expr_isButtonPressed;
}
complexity: 3
accuracy: 83.83%
coverage: 100.00%
# constraints: 10

run cbmc: (unwind: 560, timeout: 86400 sec)
cbmc running time: 377.926 sec

verification results: 
property 'assert((state != 2));' is not violated.

total CBMC running time: 6679.24 sec
total true alarm finding time: 0.0 sec
total refinement time: 0.0 sec, # of refinements: 0
peak memory usage: 8505.49 MB

call elev_get_button_signal((elev_button_type_t)(button), floorNum) (call id 49)
call floorIsOrdered(previousMainFloor, motorDirection) (call id 20)
call isButtonPressed() (call id 11)
call floorIsOrdered(previousMainFloor, motorDirection) (call id 14)
Iteration 0:
signed int __iv__elev_get_button_signal_stub(elev_button_type_t button, signed int floor) {
	signed int __iv__return_expr_elev_get_button_signal;
	signed int __iv__nondet_input_elev_get_button_signal_1 = __VERIFIER_nondet_signed_int();
	__iv__return_expr_elev_get_button_signal = __iv__nondet_input_elev_get_button_signal_1;
	__CPROVER_assume(__iv__return_expr_elev_get_button_signal == 0 || __iv__return_expr_elev_get_button_signal == 1);
	return __iv__return_expr_elev_get_button_signal;
}
complexity: 0
accuracy: 100.00%
coverage: 100.00%
# constraints: 2

signed int __iv__floorIsOrdered_stub(signed int floorNum, signed int motorDir) {
	signed int __iv__return_expr_floorIsOrdered;
	if(1==orderMatrix[2][0]) __iv__return_expr_floorIsOrdered = 1; else if(motorDir>=2) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[0][3]==motorDir) __iv__return_expr_floorIsOrdered = 1; else __iv__return_expr_floorIsOrdered = 0; 
	__CPROVER_assume(__iv__return_expr_floorIsOrdered == 0 || __iv__return_expr_floorIsOrdered == 1);
	return __iv__return_expr_floorIsOrdered;
}
complexity: 3
accuracy: 77.56%
coverage: 100.00%
# constraints: 9

signed int __iv__isButtonPressed_stub() {
	signed int __iv__return_expr_isButtonPressed;
	if(1==orderMatrix[0][0]) __iv__return_expr_isButtonPressed = orderMatrix[0][0]; else if(1==orderMatrix[0][3]) __iv__return_expr_isButtonPressed = 1; else if(1==orderMatrix[2][1]) __iv__return_expr_isButtonPressed = 1; else __iv__return_expr_isButtonPressed = 0; 
	__CPROVER_assume(__iv__return_expr_isButtonPressed == 0 || __iv__return_expr_isButtonPressed == 1);
	return __iv__return_expr_isButtonPressed;
}
complexity: 3
accuracy: 83.83%
coverage: 100.00%
# constraints: 10

run cbmc: (unwind: 570, timeout: 86400 sec)
cbmc running time: 229.444 sec

verification results: 
property 'assert((state != 2));' is not violated.

total CBMC running time: 6908.684 sec
total true alarm finding time: 0.0 sec
total refinement time: 0.0 sec, # of refinements: 0
peak memory usage: 8505.49 MB

call elev_get_button_signal((elev_button_type_t)(button), floorNum) (call id 49)
call floorIsOrdered(previousMainFloor, motorDirection) (call id 20)
call isButtonPressed() (call id 11)
call floorIsOrdered(previousMainFloor, motorDirection) (call id 14)
Iteration 0:
signed int __iv__elev_get_button_signal_stub(elev_button_type_t button, signed int floor) {
	signed int __iv__return_expr_elev_get_button_signal;
	signed int __iv__nondet_input_elev_get_button_signal_1 = __VERIFIER_nondet_signed_int();
	__iv__return_expr_elev_get_button_signal = __iv__nondet_input_elev_get_button_signal_1;
	__CPROVER_assume(__iv__return_expr_elev_get_button_signal == 0 || __iv__return_expr_elev_get_button_signal == 1);
	return __iv__return_expr_elev_get_button_signal;
}
complexity: 0
accuracy: 100.00%
coverage: 100.00%
# constraints: 2

signed int __iv__floorIsOrdered_stub(signed int floorNum, signed int motorDir) {
	signed int __iv__return_expr_floorIsOrdered;
	if(1==orderMatrix[2][0]) __iv__return_expr_floorIsOrdered = 1; else if(motorDir>=2) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[0][3]==motorDir) __iv__return_expr_floorIsOrdered = 1; else __iv__return_expr_floorIsOrdered = 0; 
	__CPROVER_assume(__iv__return_expr_floorIsOrdered == 0 || __iv__return_expr_floorIsOrdered == 1);
	return __iv__return_expr_floorIsOrdered;
}
complexity: 3
accuracy: 77.56%
coverage: 100.00%
# constraints: 9

signed int __iv__isButtonPressed_stub() {
	signed int __iv__return_expr_isButtonPressed;
	if(1==orderMatrix[0][0]) __iv__return_expr_isButtonPressed = orderMatrix[0][0]; else if(1==orderMatrix[0][3]) __iv__return_expr_isButtonPressed = 1; else if(1==orderMatrix[2][1]) __iv__return_expr_isButtonPressed = 1; else __iv__return_expr_isButtonPressed = 0; 
	__CPROVER_assume(__iv__return_expr_isButtonPressed == 0 || __iv__return_expr_isButtonPressed == 1);
	return __iv__return_expr_isButtonPressed;
}
complexity: 3
accuracy: 83.83%
coverage: 100.00%
# constraints: 10

run cbmc: (unwind: 580, timeout: 86400 sec)
cbmc running time: 242.106 sec

verification results: 
property 'assert((state != 2));' is not violated.

total CBMC running time: 7150.79 sec
total true alarm finding time: 0.0 sec
total refinement time: 0.0 sec, # of refinements: 0
peak memory usage: 8642.01 MB

call elev_get_button_signal((elev_button_type_t)(button), floorNum) (call id 49)
call floorIsOrdered(previousMainFloor, motorDirection) (call id 20)
call isButtonPressed() (call id 11)
call floorIsOrdered(previousMainFloor, motorDirection) (call id 14)
Iteration 0:
signed int __iv__elev_get_button_signal_stub(elev_button_type_t button, signed int floor) {
	signed int __iv__return_expr_elev_get_button_signal;
	signed int __iv__nondet_input_elev_get_button_signal_1 = __VERIFIER_nondet_signed_int();
	__iv__return_expr_elev_get_button_signal = __iv__nondet_input_elev_get_button_signal_1;
	__CPROVER_assume(__iv__return_expr_elev_get_button_signal == 0 || __iv__return_expr_elev_get_button_signal == 1);
	return __iv__return_expr_elev_get_button_signal;
}
complexity: 0
accuracy: 100.00%
coverage: 100.00%
# constraints: 2

signed int __iv__floorIsOrdered_stub(signed int floorNum, signed int motorDir) {
	signed int __iv__return_expr_floorIsOrdered;
	if(1==orderMatrix[2][0]) __iv__return_expr_floorIsOrdered = 1; else if(motorDir>=2) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[0][3]==motorDir) __iv__return_expr_floorIsOrdered = 1; else __iv__return_expr_floorIsOrdered = 0; 
	__CPROVER_assume(__iv__return_expr_floorIsOrdered == 0 || __iv__return_expr_floorIsOrdered == 1);
	return __iv__return_expr_floorIsOrdered;
}
complexity: 3
accuracy: 77.56%
coverage: 100.00%
# constraints: 9

signed int __iv__isButtonPressed_stub() {
	signed int __iv__return_expr_isButtonPressed;
	if(1==orderMatrix[0][0]) __iv__return_expr_isButtonPressed = orderMatrix[0][0]; else if(1==orderMatrix[0][3]) __iv__return_expr_isButtonPressed = 1; else if(1==orderMatrix[2][1]) __iv__return_expr_isButtonPressed = 1; else __iv__return_expr_isButtonPressed = 0; 
	__CPROVER_assume(__iv__return_expr_isButtonPressed == 0 || __iv__return_expr_isButtonPressed == 1);
	return __iv__return_expr_isButtonPressed;
}
complexity: 3
accuracy: 83.83%
coverage: 100.00%
# constraints: 10

run cbmc: (unwind: 590, timeout: 86400 sec)
cbmc running time: 264.686 sec

verification results: 
property 'assert((state != 2));' is not violated.

total CBMC running time: 7415.476 sec
total true alarm finding time: 0.0 sec
total refinement time: 0.0 sec, # of refinements: 0
peak memory usage: 8793.42 MB

call elev_get_button_signal((elev_button_type_t)(button), floorNum) (call id 49)
call floorIsOrdered(previousMainFloor, motorDirection) (call id 20)
call isButtonPressed() (call id 11)
call floorIsOrdered(previousMainFloor, motorDirection) (call id 14)
Iteration 0:
signed int __iv__elev_get_button_signal_stub(elev_button_type_t button, signed int floor) {
	signed int __iv__return_expr_elev_get_button_signal;
	signed int __iv__nondet_input_elev_get_button_signal_1 = __VERIFIER_nondet_signed_int();
	__iv__return_expr_elev_get_button_signal = __iv__nondet_input_elev_get_button_signal_1;
	__CPROVER_assume(__iv__return_expr_elev_get_button_signal == 0 || __iv__return_expr_elev_get_button_signal == 1);
	return __iv__return_expr_elev_get_button_signal;
}
complexity: 0
accuracy: 100.00%
coverage: 100.00%
# constraints: 2

signed int __iv__floorIsOrdered_stub(signed int floorNum, signed int motorDir) {
	signed int __iv__return_expr_floorIsOrdered;
	if(1==orderMatrix[2][0]) __iv__return_expr_floorIsOrdered = 1; else if(motorDir>=2) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[0][3]==motorDir) __iv__return_expr_floorIsOrdered = 1; else __iv__return_expr_floorIsOrdered = 0; 
	__CPROVER_assume(__iv__return_expr_floorIsOrdered == 0 || __iv__return_expr_floorIsOrdered == 1);
	return __iv__return_expr_floorIsOrdered;
}
complexity: 3
accuracy: 77.56%
coverage: 100.00%
# constraints: 9

signed int __iv__isButtonPressed_stub() {
	signed int __iv__return_expr_isButtonPressed;
	if(1==orderMatrix[0][0]) __iv__return_expr_isButtonPressed = orderMatrix[0][0]; else if(1==orderMatrix[0][3]) __iv__return_expr_isButtonPressed = 1; else if(1==orderMatrix[2][1]) __iv__return_expr_isButtonPressed = 1; else __iv__return_expr_isButtonPressed = 0; 
	__CPROVER_assume(__iv__return_expr_isButtonPressed == 0 || __iv__return_expr_isButtonPressed == 1);
	return __iv__return_expr_isButtonPressed;
}
complexity: 3
accuracy: 83.83%
coverage: 100.00%
# constraints: 10

run cbmc: (unwind: 600, timeout: 86400 sec)
cbmc running time: 470.265 sec

verification results: 
property 'assert((state != 2));' is not violated.

total CBMC running time: 7885.741 sec
total true alarm finding time: 0.0 sec
total refinement time: 0.0 sec, # of refinements: 0
peak memory usage: 8964.72 MB

call elev_get_button_signal((elev_button_type_t)(button), floorNum) (call id 49)
call floorIsOrdered(previousMainFloor, motorDirection) (call id 20)
call isButtonPressed() (call id 11)
call floorIsOrdered(previousMainFloor, motorDirection) (call id 14)
Iteration 0:
signed int __iv__elev_get_button_signal_stub(elev_button_type_t button, signed int floor) {
	signed int __iv__return_expr_elev_get_button_signal;
	signed int __iv__nondet_input_elev_get_button_signal_1 = __VERIFIER_nondet_signed_int();
	__iv__return_expr_elev_get_button_signal = __iv__nondet_input_elev_get_button_signal_1;
	__CPROVER_assume(__iv__return_expr_elev_get_button_signal == 0 || __iv__return_expr_elev_get_button_signal == 1);
	return __iv__return_expr_elev_get_button_signal;
}
complexity: 0
accuracy: 100.00%
coverage: 100.00%
# constraints: 2

signed int __iv__floorIsOrdered_stub(signed int floorNum, signed int motorDir) {
	signed int __iv__return_expr_floorIsOrdered;
	if(1==orderMatrix[2][0]) __iv__return_expr_floorIsOrdered = 1; else if(motorDir>=2) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[0][3]==motorDir) __iv__return_expr_floorIsOrdered = 1; else __iv__return_expr_floorIsOrdered = 0; 
	__CPROVER_assume(__iv__return_expr_floorIsOrdered == 0 || __iv__return_expr_floorIsOrdered == 1);
	return __iv__return_expr_floorIsOrdered;
}
complexity: 3
accuracy: 77.56%
coverage: 100.00%
# constraints: 9

signed int __iv__isButtonPressed_stub() {
	signed int __iv__return_expr_isButtonPressed;
	if(1==orderMatrix[0][0]) __iv__return_expr_isButtonPressed = orderMatrix[0][0]; else if(1==orderMatrix[0][3]) __iv__return_expr_isButtonPressed = 1; else if(1==orderMatrix[2][1]) __iv__return_expr_isButtonPressed = 1; else __iv__return_expr_isButtonPressed = 0; 
	__CPROVER_assume(__iv__return_expr_isButtonPressed == 0 || __iv__return_expr_isButtonPressed == 1);
	return __iv__return_expr_isButtonPressed;
}
complexity: 3
accuracy: 83.83%
coverage: 100.00%
# constraints: 10

run cbmc: (unwind: 610, timeout: 86400 sec)
cbmc running time: 672.602 sec

verification results: 
property 'assert((state != 2));' is FALSE alarm.

synthesize new stub refined by counterexamples (unit timeout: 600 sec)
on each refinement:
refinement time: 0.208 sec

Iteration 1:
signed int __iv__elev_get_button_signal_stub(elev_button_type_t button, signed int floor) {
	signed int __iv__return_expr_elev_get_button_signal;
	signed int __iv__nondet_input_elev_get_button_signal_1 = __VERIFIER_nondet_signed_int();
	__iv__return_expr_elev_get_button_signal = __iv__nondet_input_elev_get_button_signal_1;
	__CPROVER_assume(__iv__return_expr_elev_get_button_signal == 0 || __iv__return_expr_elev_get_button_signal == 1);
	return __iv__return_expr_elev_get_button_signal;
}
complexity: 0
accuracy: 100.00%
coverage: 100.00%
# constraints: 2

signed int __iv__floorIsOrdered_stub(signed int floorNum, signed int motorDir) {
	signed int __iv__return_expr_floorIsOrdered;
	if(orderMatrix[1][2]<orderMatrix[2][3]) if((-1)==motorDir) __iv__return_expr_floorIsOrdered = 0; else __iv__return_expr_floorIsOrdered = 1; else if(motorDir>=2) __iv__return_expr_floorIsOrdered = 0; else if(floorNum<orderMatrix[1][3]) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[2][3]<orderMatrix[1][3]) __iv__return_expr_floorIsOrdered = 0; else __iv__return_expr_floorIsOrdered = orderMatrix[1][1]; 
	__CPROVER_assume(__iv__return_expr_floorIsOrdered == 0 || __iv__return_expr_floorIsOrdered == 1);
	return __iv__return_expr_floorIsOrdered;
}
complexity: 5
# constraints: 14

signed int __iv__isButtonPressed_stub() {
	signed int __iv__return_expr_isButtonPressed;
	if(orderMatrix[2][1]>=2) __iv__return_expr_isButtonPressed = 0; else if((-1)>=orderMatrix[2][1]) __iv__return_expr_isButtonPressed = 0; else if(1==orderMatrix[0][0]) __iv__return_expr_isButtonPressed = orderMatrix[0][0]; else if(1==orderMatrix[0][3]) __iv__return_expr_isButtonPressed = orderMatrix[0][3]; else if(1==orderMatrix[2][1]) __iv__return_expr_isButtonPressed = orderMatrix[2][1]; else if(orderMatrix[0][2]<(-1)) __iv__return_expr_isButtonPressed = orderMatrix[2][0]; else __iv__return_expr_isButtonPressed = 1; 
	__CPROVER_assume(__iv__return_expr_isButtonPressed == 0 || __iv__return_expr_isButtonPressed == 1);
	return __iv__return_expr_isButtonPressed;
}
complexity: 6
# constraints: 12

run cbmc: (unwind: 610, timeout: 86400 sec)
cbmc running time: 727.645 sec

verification results: 
property 'assert((state != 2));' is FALSE alarm.

synthesize new stub refined by counterexamples (unit timeout: 600 sec)
on each refinement:
refinement time: 0.332 sec

Iteration 2:
signed int __iv__elev_get_button_signal_stub(elev_button_type_t button, signed int floor) {
	signed int __iv__return_expr_elev_get_button_signal;
	signed int __iv__nondet_input_elev_get_button_signal_1 = __VERIFIER_nondet_signed_int();
	__iv__return_expr_elev_get_button_signal = __iv__nondet_input_elev_get_button_signal_1;
	__CPROVER_assume(__iv__return_expr_elev_get_button_signal == 0 || __iv__return_expr_elev_get_button_signal == 1);
	return __iv__return_expr_elev_get_button_signal;
}
complexity: 0
accuracy: 100.00%
coverage: 100.00%
# constraints: 2

signed int __iv__floorIsOrdered_stub(signed int floorNum, signed int motorDir) {
	signed int __iv__return_expr_floorIsOrdered;
	if(orderMatrix[0][3]==motorDir) __iv__return_expr_floorIsOrdered = orderMatrix[0][0]; else if(orderMatrix[1][2]<orderMatrix[2][3]) __iv__return_expr_floorIsOrdered = orderMatrix[2][0]; else if(motorDir>=2) __iv__return_expr_floorIsOrdered = 0; else if((-1)>=orderMatrix[1][0]) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[2][3]<orderMatrix[1][3]) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[0][1]<orderMatrix[1][1]) __iv__return_expr_floorIsOrdered = orderMatrix[1][1]; else if(orderMatrix[2][1]>=motorDir) if(0==orderMatrix[2][0]) __iv__return_expr_floorIsOrdered = orderMatrix[2][1]; else if(orderMatrix[0][1]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[1][1]; else if(orderMatrix[0][1]<orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = orderMatrix[1][1]; else if(floorNum>=2) __iv__return_expr_floorIsOrdered = orderMatrix[1][1]; else __iv__return_expr_floorIsOrdered = orderMatrix[0][2]; else __iv__return_expr_floorIsOrdered = motorDir; 
	__CPROVER_assume(__iv__return_expr_floorIsOrdered == 0 || __iv__return_expr_floorIsOrdered == 1);
	return __iv__return_expr_floorIsOrdered;
}
complexity: 11
# constraints: 20

signed int __iv__isButtonPressed_stub() {
	signed int __iv__return_expr_isButtonPressed;
	if(orderMatrix[2][1]>=2) __iv__return_expr_isButtonPressed = 0; else if((-1)>=orderMatrix[2][1]) __iv__return_expr_isButtonPressed = 0; else if(1==orderMatrix[0][0]) __iv__return_expr_isButtonPressed = orderMatrix[0][0]; else if(1==orderMatrix[0][3]) __iv__return_expr_isButtonPressed = orderMatrix[0][3]; else if(1==orderMatrix[2][1]) __iv__return_expr_isButtonPressed = orderMatrix[2][1]; else if(orderMatrix[0][2]<(-1)) __iv__return_expr_isButtonPressed = orderMatrix[2][0]; else __iv__return_expr_isButtonPressed = 1; 
	__CPROVER_assume(__iv__return_expr_isButtonPressed == 0 || __iv__return_expr_isButtonPressed == 1);
	return __iv__return_expr_isButtonPressed;
}
complexity: 6
# constraints: 12

run cbmc: (unwind: 610, timeout: 86400 sec)
cbmc running time: 745.762 sec

verification results: 
property 'assert((state != 2));' is FALSE alarm.

synthesize new stub refined by counterexamples (unit timeout: 600 sec)
on each refinement:
refinement time: 0.75 sec

Iteration 3:
signed int __iv__elev_get_button_signal_stub(elev_button_type_t button, signed int floor) {
	signed int __iv__return_expr_elev_get_button_signal;
	signed int __iv__nondet_input_elev_get_button_signal_1 = __VERIFIER_nondet_signed_int();
	__iv__return_expr_elev_get_button_signal = __iv__nondet_input_elev_get_button_signal_1;
	__CPROVER_assume(__iv__return_expr_elev_get_button_signal == 0 || __iv__return_expr_elev_get_button_signal == 1);
	return __iv__return_expr_elev_get_button_signal;
}
complexity: 0
accuracy: 100.00%
coverage: 100.00%
# constraints: 2

signed int __iv__floorIsOrdered_stub(signed int floorNum, signed int motorDir) {
	signed int __iv__return_expr_floorIsOrdered;
	if((-1)==orderMatrix[1][2]) __iv__return_expr_floorIsOrdered = orderMatrix[0][0]; else if(motorDir>=2) __iv__return_expr_floorIsOrdered = 0; else if((-1)>=orderMatrix[2][1]) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[2][3]<orderMatrix[1][3]) __iv__return_expr_floorIsOrdered = 0; else if((-1)>=orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = orderMatrix[2][0]; else if(orderMatrix[2][1]>=motorDir) if((-1)>=orderMatrix[1][0]) __iv__return_expr_floorIsOrdered = 0; else if(0==orderMatrix[2][0]) __iv__return_expr_floorIsOrdered = orderMatrix[2][1]; else if(orderMatrix[0][1]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[1][1]; else if(orderMatrix[0][1]<orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = orderMatrix[1][1]; else if(floorNum>=2) __iv__return_expr_floorIsOrdered = orderMatrix[1][1]; else if(orderMatrix[0][1]<orderMatrix[1][0]) __iv__return_expr_floorIsOrdered = orderMatrix[1][1]; else if(orderMatrix[1][0]<orderMatrix[2][2]) __iv__return_expr_floorIsOrdered = orderMatrix[1][1]; else __iv__return_expr_floorIsOrdered = orderMatrix[1][2]; else __iv__return_expr_floorIsOrdered = motorDir; 
	__CPROVER_assume(__iv__return_expr_floorIsOrdered == 0 || __iv__return_expr_floorIsOrdered == 1);
	return __iv__return_expr_floorIsOrdered;
}
complexity: 13
# constraints: 28

signed int __iv__isButtonPressed_stub() {
	signed int __iv__return_expr_isButtonPressed;
	if(orderMatrix[2][1]>=2) __iv__return_expr_isButtonPressed = 0; else if((-1)>=orderMatrix[2][1]) __iv__return_expr_isButtonPressed = 0; else if(1==orderMatrix[0][0]) __iv__return_expr_isButtonPressed = orderMatrix[0][0]; else if(1==orderMatrix[0][3]) __iv__return_expr_isButtonPressed = orderMatrix[0][3]; else if(1==orderMatrix[2][1]) __iv__return_expr_isButtonPressed = orderMatrix[2][1]; else if(orderMatrix[0][2]<(-1)) __iv__return_expr_isButtonPressed = orderMatrix[2][0]; else __iv__return_expr_isButtonPressed = 1; 
	__CPROVER_assume(__iv__return_expr_isButtonPressed == 0 || __iv__return_expr_isButtonPressed == 1);
	return __iv__return_expr_isButtonPressed;
}
complexity: 6
# constraints: 12

run cbmc: (unwind: 610, timeout: 86400 sec)
cbmc running time: 562.0 sec

verification results: 
property 'assert((state != 2));' is FALSE alarm.

synthesize new stub refined by counterexamples (unit timeout: 600 sec)
on each refinement:
refinement time: 1.141 sec

Iteration 4:
signed int __iv__elev_get_button_signal_stub(elev_button_type_t button, signed int floor) {
	signed int __iv__return_expr_elev_get_button_signal;
	signed int __iv__nondet_input_elev_get_button_signal_1 = __VERIFIER_nondet_signed_int();
	__iv__return_expr_elev_get_button_signal = __iv__nondet_input_elev_get_button_signal_1;
	__CPROVER_assume(__iv__return_expr_elev_get_button_signal == 0 || __iv__return_expr_elev_get_button_signal == 1);
	return __iv__return_expr_elev_get_button_signal;
}
complexity: 0
accuracy: 100.00%
coverage: 100.00%
# constraints: 2

signed int __iv__floorIsOrdered_stub(signed int floorNum, signed int motorDir) {
	signed int __iv__return_expr_floorIsOrdered;
	if((-1)==orderMatrix[1][2]) __iv__return_expr_floorIsOrdered = orderMatrix[0][0]; else if(motorDir>=2) __iv__return_expr_floorIsOrdered = 0; else if((-1)>=orderMatrix[2][1]) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[2][3]<orderMatrix[1][3]) __iv__return_expr_floorIsOrdered = 0; else if((-1)>=orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = 1; else if(orderMatrix[0][1]<orderMatrix[1][1]) __iv__return_expr_floorIsOrdered = orderMatrix[2][3]; else if((-1)>=orderMatrix[1][0]) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[0][1]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[0][1]<orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = 0; else if(floorNum>=2) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[1][2]<orderMatrix[1][3]) __iv__return_expr_floorIsOrdered = orderMatrix[1][3]; else if(orderMatrix[1][2]<orderMatrix[2][3]) __iv__return_expr_floorIsOrdered = orderMatrix[2][3]; else if(orderMatrix[2][1]<motorDir) __iv__return_expr_floorIsOrdered = motorDir; else if(0==orderMatrix[2][0]) __iv__return_expr_floorIsOrdered = motorDir; else if(orderMatrix[0][3]>=orderMatrix[1][1]) if(orderMatrix[0][1]<orderMatrix[1][0]) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[1][0]<orderMatrix[2][2]) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[0][3]<orderMatrix[1][3]) __iv__return_expr_floorIsOrdered = orderMatrix[1][3]; else if(orderMatrix[0][3]==orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = orderMatrix[0][3]; else __iv__return_expr_floorIsOrdered = 0; else __iv__return_expr_floorIsOrdered = orderMatrix[1][1]; 
	__CPROVER_assume(__iv__return_expr_floorIsOrdered == 0 || __iv__return_expr_floorIsOrdered == 1);
	return __iv__return_expr_floorIsOrdered;
}
complexity: 19
# constraints: 33

signed int __iv__isButtonPressed_stub() {
	signed int __iv__return_expr_isButtonPressed;
	if(orderMatrix[2][1]>=2) __iv__return_expr_isButtonPressed = 0; else if((-1)>=orderMatrix[2][1]) __iv__return_expr_isButtonPressed = 0; else if(1==orderMatrix[0][0]) __iv__return_expr_isButtonPressed = orderMatrix[0][0]; else if(1==orderMatrix[0][3]) __iv__return_expr_isButtonPressed = orderMatrix[0][3]; else if(1==orderMatrix[2][1]) __iv__return_expr_isButtonPressed = orderMatrix[2][1]; else if(orderMatrix[0][2]<(-1)) __iv__return_expr_isButtonPressed = orderMatrix[2][0]; else __iv__return_expr_isButtonPressed = 1; 
	__CPROVER_assume(__iv__return_expr_isButtonPressed == 0 || __iv__return_expr_isButtonPressed == 1);
	return __iv__return_expr_isButtonPressed;
}
complexity: 6
# constraints: 12

run cbmc: (unwind: 610, timeout: 86400 sec)
cbmc running time: 976.199 sec

verification results: 
property 'assert((state != 2));' is FALSE alarm.

synthesize new stub refined by counterexamples (unit timeout: 600 sec)
on each refinement:
refinement time: 1.314 sec

Iteration 5:
signed int __iv__elev_get_button_signal_stub(elev_button_type_t button, signed int floor) {
	signed int __iv__return_expr_elev_get_button_signal;
	signed int __iv__nondet_input_elev_get_button_signal_1 = __VERIFIER_nondet_signed_int();
	__iv__return_expr_elev_get_button_signal = __iv__nondet_input_elev_get_button_signal_1;
	__CPROVER_assume(__iv__return_expr_elev_get_button_signal == 0 || __iv__return_expr_elev_get_button_signal == 1);
	return __iv__return_expr_elev_get_button_signal;
}
complexity: 0
accuracy: 100.00%
coverage: 100.00%
# constraints: 2

signed int __iv__floorIsOrdered_stub(signed int floorNum, signed int motorDir) {
	signed int __iv__return_expr_floorIsOrdered;
	if((-1)==orderMatrix[1][2]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if((-1)>=orderMatrix[0][1]) if(orderMatrix[1][2]<orderMatrix[2][3]) __iv__return_expr_floorIsOrdered = orderMatrix[2][0]; else __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[2][3]<orderMatrix[1][3]) __iv__return_expr_floorIsOrdered = 0; else if((-1)>=orderMatrix[1][0]) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[0][1]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[0][1]<orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[1][2]<orderMatrix[1][3]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[1][2]<orderMatrix[2][3]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(3==orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[1][1]<orderMatrix[1][3]) __iv__return_expr_floorIsOrdered = orderMatrix[2][1]; else if(orderMatrix[1][0]<orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = orderMatrix[2][1]; else if(orderMatrix[0][3]>=2) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[0][3]<orderMatrix[1][3]) __iv__return_expr_floorIsOrdered = orderMatrix[2][1]; else if((-1)>=orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[0][1]>=motorDir) if(orderMatrix[1][1]<motorDir) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[0][3]<orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = orderMatrix[2][1]; else if(orderMatrix[1][0]<orderMatrix[1][3]) __iv__return_expr_floorIsOrdered = orderMatrix[2][1]; else if(orderMatrix[1][0]<orderMatrix[2][1]) __iv__return_expr_floorIsOrdered = orderMatrix[2][1]; else if(1==orderMatrix[1][0]) if(orderMatrix[0][2]<orderMatrix[2][2]) __iv__return_expr_floorIsOrdered = 0; else __iv__return_expr_floorIsOrdered = orderMatrix[1][0]; else __iv__return_expr_floorIsOrdered = 0; else __iv__return_expr_floorIsOrdered = orderMatrix[1][1]; 
	__CPROVER_assume(__iv__return_expr_floorIsOrdered == 0 || __iv__return_expr_floorIsOrdered == 1);
	return __iv__return_expr_floorIsOrdered;
}
complexity: 22
# constraints: 41

signed int __iv__isButtonPressed_stub() {
	signed int __iv__return_expr_isButtonPressed;
	if(orderMatrix[2][1]>=2) __iv__return_expr_isButtonPressed = 0; else if((-1)>=orderMatrix[2][1]) __iv__return_expr_isButtonPressed = 0; else if(1==orderMatrix[0][0]) __iv__return_expr_isButtonPressed = orderMatrix[0][0]; else if(1==orderMatrix[0][3]) __iv__return_expr_isButtonPressed = orderMatrix[0][3]; else if(1==orderMatrix[2][1]) __iv__return_expr_isButtonPressed = orderMatrix[2][1]; else if(orderMatrix[0][2]<(-1)) __iv__return_expr_isButtonPressed = orderMatrix[2][0]; else __iv__return_expr_isButtonPressed = 1; 
	__CPROVER_assume(__iv__return_expr_isButtonPressed == 0 || __iv__return_expr_isButtonPressed == 1);
	return __iv__return_expr_isButtonPressed;
}
complexity: 6
# constraints: 12

run cbmc: (unwind: 610, timeout: 86400 sec)
cbmc running time: 628.055 sec

verification results: 
property 'assert((state != 2));' is FALSE alarm.

synthesize new stub refined by counterexamples (unit timeout: 600 sec)
on each refinement:
refinement time: 1.501 sec

Iteration 6:
signed int __iv__elev_get_button_signal_stub(elev_button_type_t button, signed int floor) {
	signed int __iv__return_expr_elev_get_button_signal;
	signed int __iv__nondet_input_elev_get_button_signal_1 = __VERIFIER_nondet_signed_int();
	__iv__return_expr_elev_get_button_signal = __iv__nondet_input_elev_get_button_signal_1;
	__CPROVER_assume(__iv__return_expr_elev_get_button_signal == 0 || __iv__return_expr_elev_get_button_signal == 1);
	return __iv__return_expr_elev_get_button_signal;
}
complexity: 0
accuracy: 100.00%
coverage: 100.00%
# constraints: 2

signed int __iv__floorIsOrdered_stub(signed int floorNum, signed int motorDir) {
	signed int __iv__return_expr_floorIsOrdered;
	if(motorDir>=2) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[2][3]<orderMatrix[1][3]) __iv__return_expr_floorIsOrdered = 0; else if((-1)==orderMatrix[1][2]) __iv__return_expr_floorIsOrdered = orderMatrix[0][0]; else if((-1)>=orderMatrix[2][1]) __iv__return_expr_floorIsOrdered = 0; else if((-1)>=orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = orderMatrix[2][0]; else if((-1)>=orderMatrix[1][0]) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[0][1]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = 0; else if(3==orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[1][2]<orderMatrix[1][0]) __iv__return_expr_floorIsOrdered = orderMatrix[1][0]; else if(orderMatrix[0][1]<orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[1][2]<orderMatrix[1][3]) __iv__return_expr_floorIsOrdered = orderMatrix[1][3]; else if(orderMatrix[1][2]<orderMatrix[2][3]) __iv__return_expr_floorIsOrdered = orderMatrix[2][3]; else if(orderMatrix[1][2]<orderMatrix[1][1]) __iv__return_expr_floorIsOrdered = orderMatrix[1][1]; else if(orderMatrix[1][0]>=orderMatrix[1][1]) if(orderMatrix[1][0]<orderMatrix[2][2]) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[1][0]<orderMatrix[1][3]) __iv__return_expr_floorIsOrdered = orderMatrix[2][1]; else if((-1)>=orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[1][3]==floorNum) __iv__return_expr_floorIsOrdered = orderMatrix[1][0]; else if(orderMatrix[0][1]<orderMatrix[1][1]) __iv__return_expr_floorIsOrdered = orderMatrix[1][0]; else if(orderMatrix[1][2]<motorDir) __iv__return_expr_floorIsOrdered = motorDir; else if(orderMatrix[2][1]>=motorDir) if(orderMatrix[0][3]<orderMatrix[2][0]) __iv__return_expr_floorIsOrdered = orderMatrix[2][1]; else if(orderMatrix[2][3]>=motorDir) if(orderMatrix[0][1]<motorDir) __iv__return_expr_floorIsOrdered = orderMatrix[2][1]; else __iv__return_expr_floorIsOrdered = orderMatrix[0][0]; else __iv__return_expr_floorIsOrdered = orderMatrix[2][1]; else __iv__return_expr_floorIsOrdered = orderMatrix[2][0]; else __iv__return_expr_floorIsOrdered = orderMatrix[1][1]; 
	__CPROVER_assume(__iv__return_expr_floorIsOrdered == 0 || __iv__return_expr_floorIsOrdered == 1);
	return __iv__return_expr_floorIsOrdered;
}
complexity: 24
# constraints: 47

signed int __iv__isButtonPressed_stub() {
	signed int __iv__return_expr_isButtonPressed;
	if(orderMatrix[2][1]>=2) __iv__return_expr_isButtonPressed = 0; else if((-1)>=orderMatrix[2][1]) __iv__return_expr_isButtonPressed = 0; else if(1==orderMatrix[0][0]) __iv__return_expr_isButtonPressed = orderMatrix[0][0]; else if(1==orderMatrix[0][3]) __iv__return_expr_isButtonPressed = orderMatrix[0][3]; else if(1==orderMatrix[2][1]) __iv__return_expr_isButtonPressed = orderMatrix[2][1]; else if(orderMatrix[0][2]<(-1)) __iv__return_expr_isButtonPressed = orderMatrix[2][0]; else __iv__return_expr_isButtonPressed = 1; 
	__CPROVER_assume(__iv__return_expr_isButtonPressed == 0 || __iv__return_expr_isButtonPressed == 1);
	return __iv__return_expr_isButtonPressed;
}
complexity: 6
# constraints: 12

run cbmc: (unwind: 610, timeout: 86400 sec)
cbmc running time: 875.469 sec

verification results: 
property 'assert((state != 2));' is FALSE alarm.

synthesize new stub refined by counterexamples (unit timeout: 600 sec)
on each refinement:
refinement time: 5.329 sec

Iteration 7:
signed int __iv__elev_get_button_signal_stub(elev_button_type_t button, signed int floor) {
	signed int __iv__return_expr_elev_get_button_signal;
	signed int __iv__nondet_input_elev_get_button_signal_1 = __VERIFIER_nondet_signed_int();
	__iv__return_expr_elev_get_button_signal = __iv__nondet_input_elev_get_button_signal_1;
	__CPROVER_assume(__iv__return_expr_elev_get_button_signal == 0 || __iv__return_expr_elev_get_button_signal == 1);
	return __iv__return_expr_elev_get_button_signal;
}
complexity: 0
accuracy: 100.00%
coverage: 100.00%
# constraints: 2

signed int __iv__floorIsOrdered_stub(signed int floorNum, signed int motorDir) {
	signed int __iv__return_expr_floorIsOrdered;
	if(motorDir>=2) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[1][2]<(-1)) __iv__return_expr_floorIsOrdered = 0; else if((-1)==orderMatrix[1][2]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if((-1)>=orderMatrix[2][1]) __iv__return_expr_floorIsOrdered = 0; else if((-1)>=orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = orderMatrix[2][0]; else if((-1)>=orderMatrix[1][0]) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[0][3]>=orderMatrix[0][0]) if(orderMatrix[1][2]<orderMatrix[1][3]) __iv__return_expr_floorIsOrdered = motorDir; else if(orderMatrix[1][2]<orderMatrix[2][3]) __iv__return_expr_floorIsOrdered = motorDir; else if(3==orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = orderMatrix[1][1]; else if(orderMatrix[0][3]<orderMatrix[2][2]) __iv__return_expr_floorIsOrdered = motorDir; else if(orderMatrix[2][2]>=orderMatrix[0][0]) if(orderMatrix[2][3]>=orderMatrix[0][0]) if(orderMatrix[0][1]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = motorDir; else if(orderMatrix[0][1]<orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = motorDir; else if(orderMatrix[1][1]<orderMatrix[1][3]) __iv__return_expr_floorIsOrdered = motorDir; else if(orderMatrix[1][0]<orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = motorDir; else if(orderMatrix[0][3]>=2) __iv__return_expr_floorIsOrdered = motorDir; else if(orderMatrix[0][3]<orderMatrix[1][3]) __iv__return_expr_floorIsOrdered = motorDir; else if((-1)>=orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[1][1]; else if(orderMatrix[1][0]<orderMatrix[1][3]) __iv__return_expr_floorIsOrdered = motorDir; else if(orderMatrix[1][2]<orderMatrix[2][2]) __iv__return_expr_floorIsOrdered = motorDir; else if(orderMatrix[1][2]<orderMatrix[0][3]) __iv__return_expr_floorIsOrdered = motorDir; else if(orderMatrix[1][2]<orderMatrix[1][0]) __iv__return_expr_floorIsOrdered = orderMatrix[1][1]; else if(orderMatrix[1][2]<orderMatrix[2][0]) __iv__return_expr_floorIsOrdered = motorDir; else if(orderMatrix[1][2]<orderMatrix[1][1]) __iv__return_expr_floorIsOrdered = motorDir; else if(0==orderMatrix[1][2]) __iv__return_expr_floorIsOrdered = motorDir; else if(orderMatrix[0][3]<orderMatrix[2][1]) __iv__return_expr_floorIsOrdered = motorDir; else if(orderMatrix[0][3]>=orderMatrix[0][1]) if(orderMatrix[0][3]<motorDir) __iv__return_expr_floorIsOrdered = motorDir; else if(orderMatrix[1][1]<orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = orderMatrix[0][2]; else if(orderMatrix[1][1]>=orderMatrix[0][1]) if(orderMatrix[0][0]==floorNum) __iv__return_expr_floorIsOrdered = orderMatrix[1][1]; else if(orderMatrix[0][1]<orderMatrix[1][1]) __iv__return_expr_floorIsOrdered = orderMatrix[1][1]; else if(orderMatrix[1][0]<motorDir) __iv__return_expr_floorIsOrdered = motorDir; else if(orderMatrix[1][0]<orderMatrix[2][1]) __iv__return_expr_floorIsOrdered = orderMatrix[2][1]; else if(1==orderMatrix[1][0]) if(orderMatrix[2][3]<orderMatrix[1][3]) __iv__return_expr_floorIsOrdered = motorDir; else if(orderMatrix[2][3]<orderMatrix[2][0]) __iv__return_expr_floorIsOrdered = motorDir; else if(orderMatrix[0][1]<motorDir) __iv__return_expr_floorIsOrdered = motorDir; else __iv__return_expr_floorIsOrdered = orderMatrix[1][1]; else __iv__return_expr_floorIsOrdered = motorDir; else __iv__return_expr_floorIsOrdered = orderMatrix[0][3]; else __iv__return_expr_floorIsOrdered = motorDir; else __iv__return_expr_floorIsOrdered = orderMatrix[0][2]; else __iv__return_expr_floorIsOrdered = orderMatrix[2][1]; else __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; 
	__CPROVER_assume(__iv__return_expr_floorIsOrdered == 0 || __iv__return_expr_floorIsOrdered == 1);
	return __iv__return_expr_floorIsOrdered;
}
complexity: 40
# constraints: 57

signed int __iv__isButtonPressed_stub() {
	signed int __iv__return_expr_isButtonPressed;
	if(orderMatrix[2][1]>=2) __iv__return_expr_isButtonPressed = 0; else if((-1)>=orderMatrix[2][1]) __iv__return_expr_isButtonPressed = 0; else if(1==orderMatrix[0][0]) __iv__return_expr_isButtonPressed = orderMatrix[0][0]; else if(1==orderMatrix[0][3]) __iv__return_expr_isButtonPressed = orderMatrix[0][3]; else if(orderMatrix[1][1]<orderMatrix[1][2]) __iv__return_expr_isButtonPressed = orderMatrix[1][2]; else if(1==orderMatrix[2][1]) __iv__return_expr_isButtonPressed = orderMatrix[2][1]; else __iv__return_expr_isButtonPressed = orderMatrix[2][3]; 
	__CPROVER_assume(__iv__return_expr_isButtonPressed == 0 || __iv__return_expr_isButtonPressed == 1);
	return __iv__return_expr_isButtonPressed;
}
complexity: 6
# constraints: 13

run cbmc: (unwind: 610, timeout: 86400 sec)
cbmc running time: 756.168 sec

verification results: 
property 'assert((state != 2));' is FALSE alarm.

synthesize new stub refined by counterexamples (unit timeout: 600 sec)
on each refinement:
refinement time: 3.873 sec

Iteration 8:
signed int __iv__elev_get_button_signal_stub(elev_button_type_t button, signed int floor) {
	signed int __iv__return_expr_elev_get_button_signal;
	signed int __iv__nondet_input_elev_get_button_signal_1 = __VERIFIER_nondet_signed_int();
	__iv__return_expr_elev_get_button_signal = __iv__nondet_input_elev_get_button_signal_1;
	__CPROVER_assume(__iv__return_expr_elev_get_button_signal == 0 || __iv__return_expr_elev_get_button_signal == 1);
	return __iv__return_expr_elev_get_button_signal;
}
complexity: 0
accuracy: 100.00%
coverage: 100.00%
# constraints: 2

signed int __iv__floorIsOrdered_stub(signed int floorNum, signed int motorDir) {
	signed int __iv__return_expr_floorIsOrdered;
	if(motorDir>=2) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[1][2]<(-1)) __iv__return_expr_floorIsOrdered = 0; else if((-1)==orderMatrix[1][2]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if((-1)>=orderMatrix[2][1]) __iv__return_expr_floorIsOrdered = 0; else if((-1)>=orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = orderMatrix[2][0]; else if(orderMatrix[1][2]<orderMatrix[1][3]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if((-1)>=orderMatrix[1][0]) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[1][2]<orderMatrix[2][3]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[1][2]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[1][1]; else if(3==orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = orderMatrix[1][1]; else if(orderMatrix[0][3]<orderMatrix[2][2]) __iv__return_expr_floorIsOrdered = orderMatrix[1][1]; else if(orderMatrix[1][0]<orderMatrix[2][2]) __iv__return_expr_floorIsOrdered = orderMatrix[1][1]; else if(orderMatrix[1][0]<orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = orderMatrix[1][1]; else if((-1)>=orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[1][1]; else if(orderMatrix[0][1]>=motorDir) if(orderMatrix[1][2]<orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = orderMatrix[1][1]; else if(orderMatrix[1][2]>=orderMatrix[1][0]) if(orderMatrix[1][2]<orderMatrix[1][1]) __iv__return_expr_floorIsOrdered = orderMatrix[1][1]; else if(orderMatrix[1][2]>=motorDir) if(orderMatrix[1][1]>=motorDir) if(orderMatrix[0][3]<orderMatrix[1][3]) __iv__return_expr_floorIsOrdered = orderMatrix[1][1]; else if(orderMatrix[0][3]>=motorDir) if(orderMatrix[0][3]>=orderMatrix[2][1]) if(orderMatrix[2][1]<motorDir) __iv__return_expr_floorIsOrdered = orderMatrix[1][1]; else if(orderMatrix[1][0]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[2][2]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[0][0]; else if(orderMatrix[0][1]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[1][1]; else if(orderMatrix[0][1]>=orderMatrix[2][1]) if(orderMatrix[0][1]<orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = orderMatrix[1][1]; else if(orderMatrix[0][1]<orderMatrix[2][3]) __iv__return_expr_floorIsOrdered = orderMatrix[1][1]; else __iv__return_expr_floorIsOrdered = orderMatrix[1][2]; else __iv__return_expr_floorIsOrdered = orderMatrix[0][3]; else __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else __iv__return_expr_floorIsOrdered = orderMatrix[1][1]; else __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else __iv__return_expr_floorIsOrdered = orderMatrix[1][1]; else __iv__return_expr_floorIsOrdered = motorDir; 
	__CPROVER_assume(__iv__return_expr_floorIsOrdered == 0 || __iv__return_expr_floorIsOrdered == 1);
	return __iv__return_expr_floorIsOrdered;
}
complexity: 30
# constraints: 60

signed int __iv__isButtonPressed_stub() {
	signed int __iv__return_expr_isButtonPressed;
	if(orderMatrix[2][1]>=2) __iv__return_expr_isButtonPressed = 0; else if((-1)>=orderMatrix[2][1]) __iv__return_expr_isButtonPressed = 0; else if(1==orderMatrix[0][0]) __iv__return_expr_isButtonPressed = orderMatrix[0][0]; else if(1==orderMatrix[0][3]) __iv__return_expr_isButtonPressed = orderMatrix[0][3]; else if(orderMatrix[1][1]<orderMatrix[1][2]) __iv__return_expr_isButtonPressed = orderMatrix[1][2]; else if(1==orderMatrix[2][1]) __iv__return_expr_isButtonPressed = orderMatrix[2][1]; else __iv__return_expr_isButtonPressed = orderMatrix[2][3]; 
	__CPROVER_assume(__iv__return_expr_isButtonPressed == 0 || __iv__return_expr_isButtonPressed == 1);
	return __iv__return_expr_isButtonPressed;
}
complexity: 6
# constraints: 13

run cbmc: (unwind: 610, timeout: 86400 sec)
cbmc running time: 923.592 sec

verification results: 
property 'assert((state != 2));' is FALSE alarm.

synthesize new stub refined by counterexamples (unit timeout: 600 sec)
on each refinement:
refinement time: 7.516 sec

Iteration 9:
signed int __iv__elev_get_button_signal_stub(elev_button_type_t button, signed int floor) {
	signed int __iv__return_expr_elev_get_button_signal;
	signed int __iv__nondet_input_elev_get_button_signal_1 = __VERIFIER_nondet_signed_int();
	__iv__return_expr_elev_get_button_signal = __iv__nondet_input_elev_get_button_signal_1;
	__CPROVER_assume(__iv__return_expr_elev_get_button_signal == 0 || __iv__return_expr_elev_get_button_signal == 1);
	return __iv__return_expr_elev_get_button_signal;
}
complexity: 0
accuracy: 100.00%
coverage: 100.00%
# constraints: 2

signed int __iv__floorIsOrdered_stub(signed int floorNum, signed int motorDir) {
	signed int __iv__return_expr_floorIsOrdered;
	if(motorDir>=2) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[1][2]<(-1)) __iv__return_expr_floorIsOrdered = 0; else if((-1)==orderMatrix[1][2]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if((-1)>=orderMatrix[2][1]) __iv__return_expr_floorIsOrdered = 0; else if((-1)>=orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = orderMatrix[2][0]; else if((-1)>=orderMatrix[1][0]) __iv__return_expr_floorIsOrdered = 0; else if(3==orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[1][0]<orderMatrix[2][2]) __iv__return_expr_floorIsOrdered = motorDir; else if(orderMatrix[0][3]<orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = motorDir; else if(orderMatrix[1][0]<orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = motorDir; else if(orderMatrix[0][3]>=2) __iv__return_expr_floorIsOrdered = motorDir; else if((-1)>=orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[2][2]<orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = motorDir; else if(orderMatrix[0][1]<orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = motorDir; else if(orderMatrix[2][0]<orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[2][0]<orderMatrix[0][3]) __iv__return_expr_floorIsOrdered = orderMatrix[0][3]; else if(orderMatrix[2][0]<orderMatrix[1][2]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[2][0]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[0][0]; else if(orderMatrix[0][1]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[0][0]; else if(orderMatrix[1][0]<orderMatrix[0][3]) __iv__return_expr_floorIsOrdered = motorDir; else if(orderMatrix[1][0]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[1][2]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = motorDir; else if(orderMatrix[1][2]<orderMatrix[0][3]) __iv__return_expr_floorIsOrdered = motorDir; else if(orderMatrix[1][3]<orderMatrix[1][1]) __iv__return_expr_floorIsOrdered = orderMatrix[1][1]; else if(orderMatrix[0][0]<orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = motorDir; else if(floorNum<orderMatrix[2][1]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(floorNum<orderMatrix[1][1]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[2][1]<orderMatrix[1][1]) __iv__return_expr_floorIsOrdered = orderMatrix[1][1]; else if(orderMatrix[2][1]<orderMatrix[1][3]) __iv__return_expr_floorIsOrdered = motorDir; else if(orderMatrix[2][0]>=orderMatrix[1][1]) if(motorDir>=orderMatrix[1][3]) if(orderMatrix[2][0]>=orderMatrix[2][3]) if(orderMatrix[1][0]==orderMatrix[0][3]) if(orderMatrix[1][2]>=orderMatrix[2][1]) if(orderMatrix[2][0]<motorDir) __iv__return_expr_floorIsOrdered = motorDir; else if(orderMatrix[2][1]<motorDir) __iv__return_expr_floorIsOrdered = motorDir; else if(orderMatrix[2][2]<orderMatrix[1][1]) __iv__return_expr_floorIsOrdered = motorDir; else if(orderMatrix[2][2]<orderMatrix[1][3]) __iv__return_expr_floorIsOrdered = motorDir; else if(orderMatrix[1][0]<motorDir) __iv__return_expr_floorIsOrdered = motorDir; else if(motorDir==floorNum) __iv__return_expr_floorIsOrdered = motorDir; else if(orderMatrix[0][1]==floorNum) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else __iv__return_expr_floorIsOrdered = motorDir; else __iv__return_expr_floorIsOrdered = motorDir; else __iv__return_expr_floorIsOrdered = motorDir; else __iv__return_expr_floorIsOrdered = motorDir; else __iv__return_expr_floorIsOrdered = orderMatrix[2][1]; else __iv__return_expr_floorIsOrdered = orderMatrix[1][1]; 
	__CPROVER_assume(__iv__return_expr_floorIsOrdered == 0 || __iv__return_expr_floorIsOrdered == 1);
	return __iv__return_expr_floorIsOrdered;
}
complexity: 41
# constraints: 67

signed int __iv__isButtonPressed_stub() {
	signed int __iv__return_expr_isButtonPressed;
	if(orderMatrix[2][1]>=2) __iv__return_expr_isButtonPressed = 0; else if((-1)>=orderMatrix[2][1]) __iv__return_expr_isButtonPressed = 0; else if(orderMatrix[1][1]>=2) __iv__return_expr_isButtonPressed = orderMatrix[2][0]; else if(1==orderMatrix[0][0]) __iv__return_expr_isButtonPressed = orderMatrix[0][0]; else if(1==orderMatrix[0][3]) __iv__return_expr_isButtonPressed = orderMatrix[0][3]; else if(1==orderMatrix[1][2]) __iv__return_expr_isButtonPressed = orderMatrix[1][2]; else if(orderMatrix[1][1]==orderMatrix[0][2]) __iv__return_expr_isButtonPressed = orderMatrix[2][0]; else __iv__return_expr_isButtonPressed = 1; 
	__CPROVER_assume(__iv__return_expr_isButtonPressed == 0 || __iv__return_expr_isButtonPressed == 1);
	return __iv__return_expr_isButtonPressed;
}
complexity: 7
# constraints: 16

run cbmc: (unwind: 610, timeout: 86400 sec)
cbmc running time: 1053.052 sec

verification results: 
property 'assert((state != 2));' is FALSE alarm.

synthesize new stub refined by counterexamples (unit timeout: 600 sec)
on each refinement:
refinement time: 3.113 sec

Iteration 10:
signed int __iv__elev_get_button_signal_stub(elev_button_type_t button, signed int floor) {
	signed int __iv__return_expr_elev_get_button_signal;
	signed int __iv__nondet_input_elev_get_button_signal_1 = __VERIFIER_nondet_signed_int();
	__iv__return_expr_elev_get_button_signal = __iv__nondet_input_elev_get_button_signal_1;
	__CPROVER_assume(__iv__return_expr_elev_get_button_signal == 0 || __iv__return_expr_elev_get_button_signal == 1);
	return __iv__return_expr_elev_get_button_signal;
}
complexity: 0
accuracy: 100.00%
coverage: 100.00%
# constraints: 2

signed int __iv__floorIsOrdered_stub(signed int floorNum, signed int motorDir) {
	signed int __iv__return_expr_floorIsOrdered;
	if(motorDir>=2) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[1][2]<(-1)) __iv__return_expr_floorIsOrdered = 0; else if((-1)==orderMatrix[1][2]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if((-1)>=orderMatrix[2][1]) __iv__return_expr_floorIsOrdered = 0; else if((-1)>=orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = orderMatrix[2][0]; else if((-1)>=orderMatrix[1][0]) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[1][2]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[1][1]; else if(3==orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[0][3]<orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = orderMatrix[1][3]; else if((-1)>=orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[1][0]<orderMatrix[1][1]) __iv__return_expr_floorIsOrdered = orderMatrix[1][1]; else if(orderMatrix[1][0]<orderMatrix[2][2]) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[0][3]>=2) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[1][2]<orderMatrix[2][0]) __iv__return_expr_floorIsOrdered = orderMatrix[2][0]; else if(orderMatrix[0][1]<orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[2][0]<orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[0][0]<orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[2][0]<orderMatrix[0][3]) __iv__return_expr_floorIsOrdered = orderMatrix[0][3]; else if(orderMatrix[2][2]<orderMatrix[0][3]) __iv__return_expr_floorIsOrdered = orderMatrix[0][3]; else if(orderMatrix[2][2]<orderMatrix[1][1]) __iv__return_expr_floorIsOrdered = orderMatrix[2][0]; else if(orderMatrix[2][2]<orderMatrix[1][0]) __iv__return_expr_floorIsOrdered = motorDir; else if(orderMatrix[1][3]>=orderMatrix[1][1]) if(orderMatrix[0][1]>=orderMatrix[0][0]) if(orderMatrix[2][0]==orderMatrix[1][2]) if(orderMatrix[1][0]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(floorNum<orderMatrix[2][1]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(floorNum<orderMatrix[1][1]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[2][1]<orderMatrix[1][1]) __iv__return_expr_floorIsOrdered = orderMatrix[1][3]; else if(orderMatrix[2][1]<orderMatrix[1][3]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[1][2]<orderMatrix[1][1]) __iv__return_expr_floorIsOrdered = orderMatrix[1][3]; else if(orderMatrix[2][0]<orderMatrix[1][3]) __iv__return_expr_floorIsOrdered = orderMatrix[1][3]; else if(orderMatrix[1][2]<orderMatrix[2][3]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[1][2]<orderMatrix[2][1]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(0==orderMatrix[1][2]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[2][1]<motorDir) __iv__return_expr_floorIsOrdered = orderMatrix[2][0]; else if(orderMatrix[2][2]<orderMatrix[1][3]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[1][0]<motorDir) __iv__return_expr_floorIsOrdered = orderMatrix[2][0]; else if(orderMatrix[0][2]<orderMatrix[1][3]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[0][1]==floorNum) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else __iv__return_expr_floorIsOrdered = motorDir; else __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else __iv__return_expr_floorIsOrdered = orderMatrix[1][3]; else __iv__return_expr_floorIsOrdered = orderMatrix[1][1]; 
	__CPROVER_assume(__iv__return_expr_floorIsOrdered == 0 || __iv__return_expr_floorIsOrdered == 1);
	return __iv__return_expr_floorIsOrdered;
}
complexity: 39
# constraints: 69

signed int __iv__isButtonPressed_stub() {
	signed int __iv__return_expr_isButtonPressed;
	if(orderMatrix[2][1]>=2) __iv__return_expr_isButtonPressed = 0; else if((-1)>=orderMatrix[2][1]) __iv__return_expr_isButtonPressed = 0; else if(orderMatrix[1][1]>=2) __iv__return_expr_isButtonPressed = orderMatrix[2][0]; else if(1==orderMatrix[0][0]) __iv__return_expr_isButtonPressed = orderMatrix[0][0]; else if(1==orderMatrix[0][3]) __iv__return_expr_isButtonPressed = orderMatrix[0][3]; else if(1==orderMatrix[1][2]) __iv__return_expr_isButtonPressed = orderMatrix[1][2]; else if(1==orderMatrix[2][1]) __iv__return_expr_isButtonPressed = orderMatrix[2][1]; else if(orderMatrix[2][3]==orderMatrix[1][2]) __iv__return_expr_isButtonPressed = orderMatrix[1][1]; else __iv__return_expr_isButtonPressed = orderMatrix[2][3]; 
	__CPROVER_assume(__iv__return_expr_isButtonPressed == 0 || __iv__return_expr_isButtonPressed == 1);
	return __iv__return_expr_isButtonPressed;
}
complexity: 8
# constraints: 17

run cbmc: (unwind: 610, timeout: 86400 sec)
cbmc running time: 903.119 sec

verification results: 
property 'assert((state != 2));' is FALSE alarm.

synthesize new stub refined by counterexamples (unit timeout: 600 sec)
on each refinement:
refinement time: 2.726 sec

Iteration 11:
signed int __iv__elev_get_button_signal_stub(elev_button_type_t button, signed int floor) {
	signed int __iv__return_expr_elev_get_button_signal;
	signed int __iv__nondet_input_elev_get_button_signal_1 = __VERIFIER_nondet_signed_int();
	__iv__return_expr_elev_get_button_signal = __iv__nondet_input_elev_get_button_signal_1;
	__CPROVER_assume(__iv__return_expr_elev_get_button_signal == 0 || __iv__return_expr_elev_get_button_signal == 1);
	return __iv__return_expr_elev_get_button_signal;
}
complexity: 0
accuracy: 100.00%
coverage: 100.00%
# constraints: 2

signed int __iv__floorIsOrdered_stub(signed int floorNum, signed int motorDir) {
	signed int __iv__return_expr_floorIsOrdered;
	if((-1)==orderMatrix[1][2]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(motorDir>=2) __iv__return_expr_floorIsOrdered = 0; else if((-1)>=orderMatrix[2][1]) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[1][2]<(-1)) __iv__return_expr_floorIsOrdered = 0; else if((-1)>=orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = orderMatrix[2][0]; else if((-1)>=orderMatrix[1][0]) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[1][2]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[0][0]; else if(orderMatrix[1][2]<orderMatrix[1][1]) __iv__return_expr_floorIsOrdered = orderMatrix[1][1]; else if(3==orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[1][2]<orderMatrix[2][2]) __iv__return_expr_floorIsOrdered = orderMatrix[2][1]; else if(orderMatrix[1][2]<orderMatrix[1][0]) __iv__return_expr_floorIsOrdered = motorDir; else if(orderMatrix[1][2]<orderMatrix[1][3]) __iv__return_expr_floorIsOrdered = motorDir; else if(orderMatrix[1][2]<orderMatrix[2][3]) __iv__return_expr_floorIsOrdered = motorDir; else if(orderMatrix[1][0]<orderMatrix[2][2]) __iv__return_expr_floorIsOrdered = motorDir; else if(orderMatrix[1][0]<orderMatrix[1][3]) __iv__return_expr_floorIsOrdered = motorDir; else if(orderMatrix[0][2]>=orderMatrix[1][3]) if(orderMatrix[0][3]>=orderMatrix[1][1]) if(orderMatrix[0][3]<orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = motorDir; else if(orderMatrix[0][3]>=2) __iv__return_expr_floorIsOrdered = motorDir; else if(orderMatrix[1][2]<orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = motorDir; else if(orderMatrix[2][1]<motorDir) __iv__return_expr_floorIsOrdered = motorDir; else if(orderMatrix[1][1]<orderMatrix[1][3]) __iv__return_expr_floorIsOrdered = motorDir; else if((-1)>=orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[1][0]<motorDir) __iv__return_expr_floorIsOrdered = motorDir; else if(orderMatrix[0][0]<orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[1][0]==orderMatrix[0][3]) if(orderMatrix[1][0]<orderMatrix[2][1]) __iv__return_expr_floorIsOrdered = orderMatrix[2][1]; else if(orderMatrix[0][3]<orderMatrix[2][0]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[1][0]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[0][0]==motorDir) __iv__return_expr_floorIsOrdered = motorDir; else __iv__return_expr_floorIsOrdered = orderMatrix[0][3]; else __iv__return_expr_floorIsOrdered = orderMatrix[2][1]; else __iv__return_expr_floorIsOrdered = orderMatrix[1][1]; else __iv__return_expr_floorIsOrdered = orderMatrix[1][1]; 
	__CPROVER_assume(__iv__return_expr_floorIsOrdered == 0 || __iv__return_expr_floorIsOrdered == 1);
	return __iv__return_expr_floorIsOrdered;
}
complexity: 30
# constraints: 79

signed int __iv__isButtonPressed_stub() {
	signed int __iv__return_expr_isButtonPressed;
	if(orderMatrix[2][1]>=2) __iv__return_expr_isButtonPressed = 0; else if((-1)>=orderMatrix[2][1]) __iv__return_expr_isButtonPressed = 0; else if(orderMatrix[1][1]>=2) __iv__return_expr_isButtonPressed = orderMatrix[2][0]; else if(1==orderMatrix[0][0]) __iv__return_expr_isButtonPressed = orderMatrix[0][0]; else if(1==orderMatrix[0][3]) __iv__return_expr_isButtonPressed = orderMatrix[0][3]; else if(1==orderMatrix[1][2]) __iv__return_expr_isButtonPressed = orderMatrix[1][2]; else if(1==orderMatrix[2][1]) __iv__return_expr_isButtonPressed = orderMatrix[2][1]; else if(orderMatrix[2][3]==orderMatrix[1][2]) __iv__return_expr_isButtonPressed = orderMatrix[1][1]; else __iv__return_expr_isButtonPressed = orderMatrix[2][3]; 
	__CPROVER_assume(__iv__return_expr_isButtonPressed == 0 || __iv__return_expr_isButtonPressed == 1);
	return __iv__return_expr_isButtonPressed;
}
complexity: 8
# constraints: 17

run cbmc: (unwind: 610, timeout: 86400 sec)
cbmc running time: 1069.581 sec

verification results: 
property 'assert((state != 2));' is FALSE alarm.

synthesize new stub refined by counterexamples (unit timeout: 600 sec)
on each refinement:
refinement time: 12.013 sec

Iteration 12:
signed int __iv__elev_get_button_signal_stub(elev_button_type_t button, signed int floor) {
	signed int __iv__return_expr_elev_get_button_signal;
	signed int __iv__nondet_input_elev_get_button_signal_1 = __VERIFIER_nondet_signed_int();
	__iv__return_expr_elev_get_button_signal = __iv__nondet_input_elev_get_button_signal_1;
	__CPROVER_assume(__iv__return_expr_elev_get_button_signal == 0 || __iv__return_expr_elev_get_button_signal == 1);
	return __iv__return_expr_elev_get_button_signal;
}
complexity: 0
accuracy: 100.00%
coverage: 100.00%
# constraints: 2

signed int __iv__floorIsOrdered_stub(signed int floorNum, signed int motorDir) {
	signed int __iv__return_expr_floorIsOrdered;
	if((-1)==orderMatrix[1][2]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(motorDir>=2) __iv__return_expr_floorIsOrdered = 0; else if((-1)>=orderMatrix[2][1]) __iv__return_expr_floorIsOrdered = 0; else if((-1)>=orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = 1; else if(orderMatrix[1][2]<(-1)) __iv__return_expr_floorIsOrdered = 0; else if((-1)>=orderMatrix[1][0]) __iv__return_expr_floorIsOrdered = 0; else if(3==orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = orderMatrix[1][1]; else if((-1)>=orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[1][1]; else if(orderMatrix[0][3]>=2) __iv__return_expr_floorIsOrdered = orderMatrix[1][1]; else if(orderMatrix[1][0]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[1][2]>=orderMatrix[1][3]) if(orderMatrix[1][2]<orderMatrix[2][3]) __iv__return_expr_floorIsOrdered = motorDir; else if(orderMatrix[1][0]<orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = orderMatrix[1][1]; else if(orderMatrix[1][2]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[1][1]; else if(orderMatrix[1][2]<orderMatrix[2][2]) __iv__return_expr_floorIsOrdered = orderMatrix[1][1]; else if(orderMatrix[1][2]<orderMatrix[0][3]) __iv__return_expr_floorIsOrdered = orderMatrix[1][1]; else if(orderMatrix[1][2]<orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = orderMatrix[1][1]; else if(orderMatrix[1][2]>=orderMatrix[2][0]) if(orderMatrix[1][2]<orderMatrix[1][1]) __iv__return_expr_floorIsOrdered = orderMatrix[1][1]; else if(orderMatrix[1][2]<orderMatrix[1][0]) __iv__return_expr_floorIsOrdered = motorDir; else if(orderMatrix[1][2]>=orderMatrix[2][1]) if(orderMatrix[1][2]<motorDir) __iv__return_expr_floorIsOrdered = motorDir; else if(orderMatrix[1][0]<orderMatrix[1][1]) __iv__return_expr_floorIsOrdered = orderMatrix[1][1]; else if(orderMatrix[1][0]<orderMatrix[2][2]) __iv__return_expr_floorIsOrdered = orderMatrix[1][1]; else if(orderMatrix[0][3]<orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = motorDir; else if(orderMatrix[1][0]<orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[1][0]<orderMatrix[0][3]) __iv__return_expr_floorIsOrdered = orderMatrix[0][3]; else if(orderMatrix[1][0]>=orderMatrix[2][1]) if(orderMatrix[1][0]<motorDir) __iv__return_expr_floorIsOrdered = motorDir; else if(orderMatrix[2][2]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[0][0]; else if(orderMatrix[2][2]<orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = orderMatrix[1][1]; else if(orderMatrix[2][2]<orderMatrix[2][3]) __iv__return_expr_floorIsOrdered = orderMatrix[1][1]; else if(orderMatrix[2][2]<motorDir) __iv__return_expr_floorIsOrdered = motorDir; else if(orderMatrix[2][2]>=orderMatrix[1][3]) if(orderMatrix[2][2]>=orderMatrix[2][0]) if(orderMatrix[2][2]<orderMatrix[1][1]) __iv__return_expr_floorIsOrdered = orderMatrix[1][1]; else if(orderMatrix[0][3]>=orderMatrix[2][0]) if(orderMatrix[0][3]<orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = motorDir; else if(orderMatrix[0][3]>=orderMatrix[1][3]) if(orderMatrix[0][3]<orderMatrix[1][1]) __iv__return_expr_floorIsOrdered = orderMatrix[1][1]; else if(orderMatrix[1][3]<orderMatrix[1][1]) __iv__return_expr_floorIsOrdered = orderMatrix[1][1]; else if(orderMatrix[2][0]<motorDir) __iv__return_expr_floorIsOrdered = motorDir; else if(0==orderMatrix[2][0]) __iv__return_expr_floorIsOrdered = orderMatrix[1][1]; else if(orderMatrix[2][1]<motorDir) __iv__return_expr_floorIsOrdered = orderMatrix[1][1]; else if(orderMatrix[0][1]<motorDir) __iv__return_expr_floorIsOrdered = motorDir; else if(orderMatrix[0][1]>=orderMatrix[2][1]) if(floorNum<orderMatrix[2][1]) __iv__return_expr_floorIsOrdered = orderMatrix[1][1]; else if(floorNum<orderMatrix[1][1]) __iv__return_expr_floorIsOrdered = orderMatrix[1][1]; else if(orderMatrix[2][1]<orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[2][2]==orderMatrix[1][3]) if(orderMatrix[1][1]<orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = orderMatrix[1][1]; else __iv__return_expr_floorIsOrdered = orderMatrix[1][0]; else __iv__return_expr_floorIsOrdered = orderMatrix[1][1]; else __iv__return_expr_floorIsOrdered = orderMatrix[1][1]; else __iv__return_expr_floorIsOrdered = orderMatrix[1][1]; else __iv__return_expr_floorIsOrdered = orderMatrix[1][1]; else __iv__return_expr_floorIsOrdered = orderMatrix[1][1]; else __iv__return_expr_floorIsOrdered = orderMatrix[1][1]; else __iv__return_expr_floorIsOrdered = motorDir; else __iv__return_expr_floorIsOrdered = motorDir; else __iv__return_expr_floorIsOrdered = orderMatrix[1][1]; else __iv__return_expr_floorIsOrdered = orderMatrix[1][3]; 
	__CPROVER_assume(__iv__return_expr_floorIsOrdered == 0 || __iv__return_expr_floorIsOrdered == 1);
	return __iv__return_expr_floorIsOrdered;
}
complexity: 51
# constraints: 89

signed int __iv__isButtonPressed_stub() {
	signed int __iv__return_expr_isButtonPressed;
	if(orderMatrix[2][1]>=2) __iv__return_expr_isButtonPressed = 0; else if((-1)>=orderMatrix[2][1]) __iv__return_expr_isButtonPressed = 0; else if(1==orderMatrix[0][0]) __iv__return_expr_isButtonPressed = orderMatrix[0][0]; else if(1==orderMatrix[0][3]) __iv__return_expr_isButtonPressed = orderMatrix[0][3]; else if(1==orderMatrix[2][1]) __iv__return_expr_isButtonPressed = orderMatrix[2][1]; else if(orderMatrix[0][2]<(-1)) __iv__return_expr_isButtonPressed = orderMatrix[2][3]; else if(orderMatrix[1][2]<orderMatrix[2][3]) __iv__return_expr_isButtonPressed = orderMatrix[2][3]; else if(1==orderMatrix[0][2]) __iv__return_expr_isButtonPressed = orderMatrix[0][2]; else if(orderMatrix[1][1]<orderMatrix[1][2]) __iv__return_expr_isButtonPressed = orderMatrix[1][2]; else if(orderMatrix[2][0]==orderMatrix[0][2]) __iv__return_expr_isButtonPressed = orderMatrix[1][1]; else __iv__return_expr_isButtonPressed = orderMatrix[2][0]; 
	__CPROVER_assume(__iv__return_expr_isButtonPressed == 0 || __iv__return_expr_isButtonPressed == 1);
	return __iv__return_expr_isButtonPressed;
}
complexity: 10
# constraints: 21

run cbmc: (unwind: 610, timeout: 86400 sec)
cbmc running time: 1132.165 sec

verification results: 
property 'assert((state != 2));' is FALSE alarm.

synthesize new stub refined by counterexamples (unit timeout: 600 sec)
on each refinement:
refinement time: 15.133 sec

Iteration 13:
signed int __iv__elev_get_button_signal_stub(elev_button_type_t button, signed int floor) {
	signed int __iv__return_expr_elev_get_button_signal;
	signed int __iv__nondet_input_elev_get_button_signal_1 = __VERIFIER_nondet_signed_int();
	__iv__return_expr_elev_get_button_signal = __iv__nondet_input_elev_get_button_signal_1;
	__CPROVER_assume(__iv__return_expr_elev_get_button_signal == 0 || __iv__return_expr_elev_get_button_signal == 1);
	return __iv__return_expr_elev_get_button_signal;
}
complexity: 0
accuracy: 100.00%
coverage: 100.00%
# constraints: 2

signed int __iv__floorIsOrdered_stub(signed int floorNum, signed int motorDir) {
	signed int __iv__return_expr_floorIsOrdered;
	if(motorDir>=2) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[1][2]<(-1)) __iv__return_expr_floorIsOrdered = 0; else if((-1)==orderMatrix[1][2]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if((-1)>=orderMatrix[2][1]) __iv__return_expr_floorIsOrdered = 0; else if((-1)>=orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = orderMatrix[2][0]; else if((-1)>=orderMatrix[1][0]) __iv__return_expr_floorIsOrdered = 0; else if(3==orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[0][3]>=2) __iv__return_expr_floorIsOrdered = motorDir; else if((-1)>=orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[2][2]<orderMatrix[2][3]) __iv__return_expr_floorIsOrdered = motorDir; else if(orderMatrix[1][2]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[0][0]; else if(orderMatrix[1][2]<orderMatrix[0][3]) __iv__return_expr_floorIsOrdered = motorDir; else if(orderMatrix[2][2]<orderMatrix[0][3]) __iv__return_expr_floorIsOrdered = orderMatrix[0][3]; else if(orderMatrix[1][0]<orderMatrix[0][3]) __iv__return_expr_floorIsOrdered = motorDir; else if(orderMatrix[1][0]<orderMatrix[2][3]) __iv__return_expr_floorIsOrdered = motorDir; else if(orderMatrix[1][2]<motorDir) __iv__return_expr_floorIsOrdered = motorDir; else if(orderMatrix[1][2]<orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[1][0]<orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = orderMatrix[1][3]; else if(orderMatrix[1][2]<orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = orderMatrix[0][2]; else if(orderMatrix[2][2]<orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = orderMatrix[0][0]; else if(orderMatrix[1][0]<motorDir) __iv__return_expr_floorIsOrdered = motorDir; else if(orderMatrix[0][3]<orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[1][0]>=orderMatrix[2][0]) if(orderMatrix[1][0]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[0][0]; else if(1==orderMatrix[1][0]) if(orderMatrix[2][2]>=orderMatrix[2][1]) if(orderMatrix[1][2]<orderMatrix[2][0]) __iv__return_expr_floorIsOrdered = orderMatrix[1][0]; else if(orderMatrix[2][2]<orderMatrix[1][3]) __iv__return_expr_floorIsOrdered = orderMatrix[1][3]; else if(orderMatrix[1][2]<orderMatrix[1][1]) __iv__return_expr_floorIsOrdered = orderMatrix[1][3]; else if(orderMatrix[1][2]<orderMatrix[2][3]) __iv__return_expr_floorIsOrdered = orderMatrix[1][3]; else if(orderMatrix[2][2]>=orderMatrix[2][0]) if(orderMatrix[2][2]<orderMatrix[1][0]) __iv__return_expr_floorIsOrdered = orderMatrix[1][0]; else if(orderMatrix[0][3]>=orderMatrix[2][0]) if(orderMatrix[0][3]<orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = motorDir; else if(orderMatrix[0][3]<orderMatrix[1][3]) __iv__return_expr_floorIsOrdered = orderMatrix[1][3]; else if(orderMatrix[0][3]<orderMatrix[1][0]) __iv__return_expr_floorIsOrdered = motorDir; else if(orderMatrix[1][3]<orderMatrix[1][1]) __iv__return_expr_floorIsOrdered = motorDir; else if(orderMatrix[2][0]<motorDir) __iv__return_expr_floorIsOrdered = motorDir; else if(orderMatrix[0][0]<orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = motorDir; else if(orderMatrix[0][0]<orderMatrix[1][3]) __iv__return_expr_floorIsOrdered = motorDir; else if(orderMatrix[2][0]<orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[2][1]<motorDir) __iv__return_expr_floorIsOrdered = motorDir; else if(orderMatrix[0][2]<orderMatrix[1][1]) __iv__return_expr_floorIsOrdered = motorDir; else if(floorNum<orderMatrix[2][1]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(floorNum<orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[0][0]<motorDir) __iv__return_expr_floorIsOrdered = motorDir; else if(1==orderMatrix[0][0]) if(orderMatrix[1][3]<orderMatrix[2][3]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[2][1]<orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[0][1]==floorNum) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[0][2]<orderMatrix[2][3]) __iv__return_expr_floorIsOrdered = motorDir; else if(floorNum>=3) __iv__return_expr_floorIsOrdered = motorDir; else if(orderMatrix[2][1]==orderMatrix[0][1]) if(orderMatrix[1][1]<motorDir) __iv__return_expr_floorIsOrdered = motorDir; else __iv__return_expr_floorIsOrdered = orderMatrix[1][1]; else __iv__return_expr_floorIsOrdered = orderMatrix[0][0]; else __iv__return_expr_floorIsOrdered = motorDir; else __iv__return_expr_floorIsOrdered = orderMatrix[0][0]; else __iv__return_expr_floorIsOrdered = orderMatrix[1][0]; else __iv__return_expr_floorIsOrdered = orderMatrix[1][3]; else __iv__return_expr_floorIsOrdered = motorDir; else __iv__return_expr_floorIsOrdered = orderMatrix[2][0]; 
	__CPROVER_assume(__iv__return_expr_floorIsOrdered == 0 || __iv__return_expr_floorIsOrdered == 1);
	return __iv__return_expr_floorIsOrdered;
}
complexity: 54
# constraints: 98

signed int __iv__isButtonPressed_stub() {
	signed int __iv__return_expr_isButtonPressed;
	if(orderMatrix[2][1]>=2) __iv__return_expr_isButtonPressed = 0; else if((-1)>=orderMatrix[2][1]) __iv__return_expr_isButtonPressed = 0; else if(1==orderMatrix[0][0]) __iv__return_expr_isButtonPressed = orderMatrix[0][0]; else if(1==orderMatrix[0][3]) __iv__return_expr_isButtonPressed = orderMatrix[0][3]; else if(1==orderMatrix[2][1]) __iv__return_expr_isButtonPressed = orderMatrix[2][1]; else if(orderMatrix[0][2]<(-1)) __iv__return_expr_isButtonPressed = orderMatrix[2][3]; else if(orderMatrix[1][2]<orderMatrix[2][3]) __iv__return_expr_isButtonPressed = orderMatrix[2][3]; else if(1==orderMatrix[0][2]) __iv__return_expr_isButtonPressed = orderMatrix[0][2]; else if(orderMatrix[1][1]<orderMatrix[1][2]) __iv__return_expr_isButtonPressed = orderMatrix[1][2]; else if(orderMatrix[2][0]==orderMatrix[0][2]) __iv__return_expr_isButtonPressed = orderMatrix[1][1]; else __iv__return_expr_isButtonPressed = orderMatrix[2][0]; 
	__CPROVER_assume(__iv__return_expr_isButtonPressed == 0 || __iv__return_expr_isButtonPressed == 1);
	return __iv__return_expr_isButtonPressed;
}
complexity: 10
# constraints: 21

run cbmc: (unwind: 610, timeout: 86400 sec)
cbmc running time: 1322.851 sec

verification results: 
property 'assert((state != 2));' is FALSE alarm.

synthesize new stub refined by counterexamples (unit timeout: 600 sec)
on each refinement:
refinement time: 16.545 sec

Iteration 14:
signed int __iv__elev_get_button_signal_stub(elev_button_type_t button, signed int floor) {
	signed int __iv__return_expr_elev_get_button_signal;
	signed int __iv__nondet_input_elev_get_button_signal_1 = __VERIFIER_nondet_signed_int();
	__iv__return_expr_elev_get_button_signal = __iv__nondet_input_elev_get_button_signal_1;
	__CPROVER_assume(__iv__return_expr_elev_get_button_signal == 0 || __iv__return_expr_elev_get_button_signal == 1);
	return __iv__return_expr_elev_get_button_signal;
}
complexity: 0
accuracy: 100.00%
coverage: 100.00%
# constraints: 2

signed int __iv__floorIsOrdered_stub(signed int floorNum, signed int motorDir) {
	signed int __iv__return_expr_floorIsOrdered;
	if((-1)==orderMatrix[1][2]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(motorDir>=2) __iv__return_expr_floorIsOrdered = 0; else if((-1)>=orderMatrix[2][1]) __iv__return_expr_floorIsOrdered = 0; else if((-1)>=orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = orderMatrix[2][0]; else if(orderMatrix[1][2]<(-1)) __iv__return_expr_floorIsOrdered = 0; else if((-1)>=orderMatrix[1][0]) __iv__return_expr_floorIsOrdered = 0; else if(3==orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = 0; else if((-1)>=orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[0][3]>=2) __iv__return_expr_floorIsOrdered = motorDir; else if(orderMatrix[1][2]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[0][0]; else if(orderMatrix[1][0]<orderMatrix[2][2]) __iv__return_expr_floorIsOrdered = motorDir; else if(orderMatrix[1][0]<orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = orderMatrix[0][2]; else if(orderMatrix[1][0]<orderMatrix[0][3]) __iv__return_expr_floorIsOrdered = orderMatrix[0][3]; else if(orderMatrix[1][2]<orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = orderMatrix[0][2]; else if(orderMatrix[1][2]<orderMatrix[0][3]) __iv__return_expr_floorIsOrdered = motorDir; else if(orderMatrix[1][2]<orderMatrix[2][2]) __iv__return_expr_floorIsOrdered = orderMatrix[1][3]; else if(orderMatrix[1][2]<orderMatrix[2][3]) __iv__return_expr_floorIsOrdered = motorDir; else if(orderMatrix[1][0]<orderMatrix[2][3]) __iv__return_expr_floorIsOrdered = motorDir; else if(orderMatrix[1][0]<orderMatrix[1][3]) __iv__return_expr_floorIsOrdered = orderMatrix[1][3]; else if(orderMatrix[1][2]<orderMatrix[1][3]) __iv__return_expr_floorIsOrdered = orderMatrix[1][3]; else if(orderMatrix[1][2]<orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = motorDir; else if(orderMatrix[1][2]<motorDir) __iv__return_expr_floorIsOrdered = motorDir; else if(orderMatrix[1][2]<orderMatrix[2][0]) __iv__return_expr_floorIsOrdered = orderMatrix[1][0]; else if(orderMatrix[1][2]<orderMatrix[1][0]) __iv__return_expr_floorIsOrdered = orderMatrix[1][0]; else if(1==orderMatrix[1][2]) if(orderMatrix[1][0]<motorDir) __iv__return_expr_floorIsOrdered = motorDir; else if(orderMatrix[0][3]<orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[1][0]<orderMatrix[2][0]) __iv__return_expr_floorIsOrdered = orderMatrix[2][0]; else if(orderMatrix[1][0]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[0][0]; else if(1==orderMatrix[1][0]) if(orderMatrix[2][2]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[0][0]; else if(orderMatrix[2][2]<orderMatrix[2][3]) __iv__return_expr_floorIsOrdered = motorDir; else if(orderMatrix[2][2]<orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = motorDir; else if(orderMatrix[2][2]<orderMatrix[0][3]) __iv__return_expr_floorIsOrdered = motorDir; else if(orderMatrix[2][2]<orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = motorDir; else if(orderMatrix[2][2]<orderMatrix[1][3]) __iv__return_expr_floorIsOrdered = orderMatrix[1][3]; else if(orderMatrix[2][2]<orderMatrix[2][0]) __iv__return_expr_floorIsOrdered = orderMatrix[1][0]; else if(orderMatrix[2][2]<orderMatrix[1][0]) __iv__return_expr_floorIsOrdered = orderMatrix[1][0]; else if(orderMatrix[2][1]<motorDir) __iv__return_expr_floorIsOrdered = motorDir; else if(orderMatrix[0][0]<orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = motorDir; else if(orderMatrix[2][0]<orderMatrix[0][3]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[2][0]<orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = motorDir; else if(floorNum<orderMatrix[2][1]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(floorNum<orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[2][1]<orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[1][3]<orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = orderMatrix[0][0]; else if(orderMatrix[1][3]>=orderMatrix[1][1]) if(orderMatrix[1][3]<orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[2][0]<motorDir) __iv__return_expr_floorIsOrdered = motorDir; else if(orderMatrix[2][0]<orderMatrix[2][2]) __iv__return_expr_floorIsOrdered = orderMatrix[1][3]; else if(orderMatrix[2][1]>=orderMatrix[1][1]) __iv__return_expr_floorIsOrdered = orderMatrix[2][1]; else __iv__return_expr_floorIsOrdered = orderMatrix[0][0]; else __iv__return_expr_floorIsOrdered = motorDir; else __iv__return_expr_floorIsOrdered = motorDir; else __iv__return_expr_floorIsOrdered = floorNum; 
	__CPROVER_assume(__iv__return_expr_floorIsOrdered == 0 || __iv__return_expr_floorIsOrdered == 1);
	return __iv__return_expr_floorIsOrdered;
}
complexity: 51
# constraints: 104

signed int __iv__isButtonPressed_stub() {
	signed int __iv__return_expr_isButtonPressed;
	if(orderMatrix[2][1]>=2) __iv__return_expr_isButtonPressed = 0; else if((-1)>=orderMatrix[2][1]) __iv__return_expr_isButtonPressed = 0; else if(1==orderMatrix[0][0]) __iv__return_expr_isButtonPressed = orderMatrix[0][0]; else if(1==orderMatrix[0][3]) __iv__return_expr_isButtonPressed = orderMatrix[0][3]; else if(1==orderMatrix[2][1]) __iv__return_expr_isButtonPressed = orderMatrix[2][1]; else if(orderMatrix[0][2]<(-1)) __iv__return_expr_isButtonPressed = orderMatrix[2][3]; else if(orderMatrix[1][2]<orderMatrix[2][3]) __iv__return_expr_isButtonPressed = orderMatrix[2][3]; else if(1==orderMatrix[0][2]) __iv__return_expr_isButtonPressed = orderMatrix[0][2]; else if(orderMatrix[1][1]<orderMatrix[1][2]) __iv__return_expr_isButtonPressed = orderMatrix[1][2]; else if(orderMatrix[2][0]==orderMatrix[0][2]) __iv__return_expr_isButtonPressed = orderMatrix[1][1]; else __iv__return_expr_isButtonPressed = orderMatrix[2][0]; 
	__CPROVER_assume(__iv__return_expr_isButtonPressed == 0 || __iv__return_expr_isButtonPressed == 1);
	return __iv__return_expr_isButtonPressed;
}
complexity: 10
# constraints: 21

run cbmc: (unwind: 610, timeout: 86400 sec)
cbmc running time: 1293.956 sec

verification results: 
property 'assert((state != 2));' is FALSE alarm.

synthesize new stub refined by counterexamples (unit timeout: 600 sec)
on each refinement:
refinement time: 17.558 sec

Iteration 15:
signed int __iv__elev_get_button_signal_stub(elev_button_type_t button, signed int floor) {
	signed int __iv__return_expr_elev_get_button_signal;
	signed int __iv__nondet_input_elev_get_button_signal_1 = __VERIFIER_nondet_signed_int();
	__iv__return_expr_elev_get_button_signal = __iv__nondet_input_elev_get_button_signal_1;
	__CPROVER_assume(__iv__return_expr_elev_get_button_signal == 0 || __iv__return_expr_elev_get_button_signal == 1);
	return __iv__return_expr_elev_get_button_signal;
}
complexity: 0
accuracy: 100.00%
coverage: 100.00%
# constraints: 2

signed int __iv__floorIsOrdered_stub(signed int floorNum, signed int motorDir) {
	signed int __iv__return_expr_floorIsOrdered;
	if((-1)==orderMatrix[1][2]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(motorDir>=2) __iv__return_expr_floorIsOrdered = 0; else if((-1)>=orderMatrix[2][1]) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[1][2]<(-1)) __iv__return_expr_floorIsOrdered = 0; else if((-1)>=orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = orderMatrix[2][0]; else if((-1)>=orderMatrix[1][0]) __iv__return_expr_floorIsOrdered = 0; else if(3==orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = 0; else if((-1)>=orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[0][3]>=2) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[0][3]>=motorDir) if(orderMatrix[0][3]<orderMatrix[2][3]) __iv__return_expr_floorIsOrdered = orderMatrix[1][3]; else if(orderMatrix[0][3]>=orderMatrix[2][2]) if(orderMatrix[1][2]<orderMatrix[2][3]) __iv__return_expr_floorIsOrdered = orderMatrix[1][3]; else if(orderMatrix[2][0]<orderMatrix[2][3]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[1][2]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[0][0]; else if(orderMatrix[2][2]<orderMatrix[2][3]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[1][0]<motorDir) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[1][0]<orderMatrix[2][3]) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[1][0]<orderMatrix[0][3]) __iv__return_expr_floorIsOrdered = orderMatrix[1][2]; else if(orderMatrix[1][0]<orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = orderMatrix[1][3]; else if(orderMatrix[1][0]<orderMatrix[1][3]) __iv__return_expr_floorIsOrdered = orderMatrix[1][3]; else if(orderMatrix[1][2]<orderMatrix[1][3]) __iv__return_expr_floorIsOrdered = orderMatrix[1][3]; else if(orderMatrix[0][3]<orderMatrix[1][3]) __iv__return_expr_floorIsOrdered = orderMatrix[1][3]; else if(orderMatrix[2][2]<orderMatrix[1][3]) __iv__return_expr_floorIsOrdered = orderMatrix[1][3]; else if(orderMatrix[2][0]<orderMatrix[1][3]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[0][3]<orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = orderMatrix[0][2]; else if(orderMatrix[0][3]<orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[2][0]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[0][0]; else if(orderMatrix[1][0]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[0][0]; else if(orderMatrix[1][0]<orderMatrix[2][0]) __iv__return_expr_floorIsOrdered = orderMatrix[2][0]; else if(orderMatrix[2][2]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[0][0]; else if(orderMatrix[1][0]<orderMatrix[2][1]) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[1][0]<orderMatrix[1][1]) __iv__return_expr_floorIsOrdered = floorNum; else if(orderMatrix[2][0]<orderMatrix[2][1]) __iv__return_expr_floorIsOrdered = orderMatrix[2][1]; else if(orderMatrix[0][3]<orderMatrix[2][1]) __iv__return_expr_floorIsOrdered = orderMatrix[2][0]; else if(orderMatrix[2][2]<orderMatrix[2][1]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[2][2]<orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[2][0]<orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[2][0]<orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = orderMatrix[0][2]; else if(orderMatrix[2][0]<orderMatrix[1][2]) __iv__return_expr_floorIsOrdered = orderMatrix[1][2]; else if(orderMatrix[2][0]>=motorDir) if(1==orderMatrix[2][0]) if(orderMatrix[1][2]<orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[1][2]<orderMatrix[2][0]) __iv__return_expr_floorIsOrdered = orderMatrix[2][0]; else if(orderMatrix[2][2]<orderMatrix[1][0]) __iv__return_expr_floorIsOrdered = orderMatrix[2][0]; else if(orderMatrix[2][1]>=motorDir) if(floorNum<orderMatrix[2][1]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(floorNum<orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[2][1]<orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[1][3]<orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(floorNum>=3) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[0][0]<orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[0][0]<orderMatrix[1][3]) __iv__return_expr_floorIsOrdered = 0; else if(motorDir<floorNum) if(orderMatrix[0][1]==floorNum) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[1][1]<orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[0][2]<orderMatrix[1][3]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[2][3]<orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[2][3]<orderMatrix[2][1]) __iv__return_expr_floorIsOrdered = orderMatrix[2][0]; else if(orderMatrix[1][1]<motorDir) __iv__return_expr_floorIsOrdered = orderMatrix[2][3]; else if(1==orderMatrix[0][2]) if(orderMatrix[1][3]<orderMatrix[2][3]) __iv__return_expr_floorIsOrdered = orderMatrix[0][2]; else if(orderMatrix[1][3]<orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = orderMatrix[0][2]; else if(orderMatrix[1][1]<orderMatrix[2][1]) __iv__return_expr_floorIsOrdered = orderMatrix[0][0]; else __iv__return_expr_floorIsOrdered = orderMatrix[1][1]; else __iv__return_expr_floorIsOrdered = 0; else __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else __iv__return_expr_floorIsOrdered = orderMatrix[0][3]; else __iv__return_expr_floorIsOrdered = 0; else __iv__return_expr_floorIsOrdered = orderMatrix[1][2]; else __iv__return_expr_floorIsOrdered = motorDir; 
	__CPROVER_assume(__iv__return_expr_floorIsOrdered == 0 || __iv__return_expr_floorIsOrdered == 1);
	return __iv__return_expr_floorIsOrdered;
}
complexity: 64
# constraints: 110

signed int __iv__isButtonPressed_stub() {
	signed int __iv__return_expr_isButtonPressed;
	if(orderMatrix[2][1]>=2) __iv__return_expr_isButtonPressed = 0; else if((-1)>=orderMatrix[2][1]) __iv__return_expr_isButtonPressed = 0; else if(orderMatrix[1][1]>=2) __iv__return_expr_isButtonPressed = orderMatrix[2][0]; else if(1==orderMatrix[0][0]) __iv__return_expr_isButtonPressed = orderMatrix[0][0]; else if(1==orderMatrix[0][3]) __iv__return_expr_isButtonPressed = orderMatrix[0][3]; else if(1==orderMatrix[1][2]) __iv__return_expr_isButtonPressed = orderMatrix[1][2]; else if(1==orderMatrix[2][3]) __iv__return_expr_isButtonPressed = orderMatrix[2][3]; else if(1==orderMatrix[2][1]) __iv__return_expr_isButtonPressed = orderMatrix[2][1]; else if(orderMatrix[2][2]==orderMatrix[1][2]) if(orderMatrix[1][3]<orderMatrix[1][1]) __iv__return_expr_isButtonPressed = orderMatrix[1][1]; else __iv__return_expr_isButtonPressed = orderMatrix[1][3]; else __iv__return_expr_isButtonPressed = orderMatrix[2][2]; 
	__CPROVER_assume(__iv__return_expr_isButtonPressed == 0 || __iv__return_expr_isButtonPressed == 1);
	return __iv__return_expr_isButtonPressed;
}
complexity: 10
# constraints: 22

run cbmc: (unwind: 610, timeout: 86400 sec)
cbmc running time: 1181.852 sec

verification results: 
property 'assert((state != 2));' is FALSE alarm.

synthesize new stub refined by counterexamples (unit timeout: 600 sec)
on each refinement:
refinement time: 29.631 sec

Iteration 16:
signed int __iv__elev_get_button_signal_stub(elev_button_type_t button, signed int floor) {
	signed int __iv__return_expr_elev_get_button_signal;
	signed int __iv__nondet_input_elev_get_button_signal_1 = __VERIFIER_nondet_signed_int();
	__iv__return_expr_elev_get_button_signal = __iv__nondet_input_elev_get_button_signal_1;
	__CPROVER_assume(__iv__return_expr_elev_get_button_signal == 0 || __iv__return_expr_elev_get_button_signal == 1);
	return __iv__return_expr_elev_get_button_signal;
}
complexity: 0
accuracy: 100.00%
coverage: 100.00%
# constraints: 2

signed int __iv__floorIsOrdered_stub(signed int floorNum, signed int motorDir) {
	signed int __iv__return_expr_floorIsOrdered;
	if((-1)==orderMatrix[1][2]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(motorDir>=2) __iv__return_expr_floorIsOrdered = 0; else if((-1)>=orderMatrix[2][1]) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[1][2]<(-1)) __iv__return_expr_floorIsOrdered = 0; else if((-1)>=orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = orderMatrix[2][0]; else if((-1)>=orderMatrix[1][0]) __iv__return_expr_floorIsOrdered = 0; else if(3==orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[0][3]>=2) __iv__return_expr_floorIsOrdered = 0; else if((-1)>=orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[1][0]<orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = orderMatrix[0][2]; else if(orderMatrix[1][0]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[0][0]; else if(orderMatrix[1][0]<orderMatrix[2][2]) __iv__return_expr_floorIsOrdered = orderMatrix[2][1]; else if(orderMatrix[1][0]<orderMatrix[2][3]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[2][2]<orderMatrix[2][3]) __iv__return_expr_floorIsOrdered = orderMatrix[1][3]; else if(orderMatrix[1][0]<orderMatrix[1][3]) __iv__return_expr_floorIsOrdered = orderMatrix[1][3]; else if(orderMatrix[0][3]<orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[1][0]<orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[2][2]<orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[1][2]<orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[1][2]<orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = orderMatrix[0][2]; else if(orderMatrix[1][2]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[0][0]; else if(orderMatrix[2][2]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[0][0]; else if(orderMatrix[2][2]<orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = orderMatrix[1][3]; else if(orderMatrix[1][0]>=orderMatrix[0][3]) if(orderMatrix[2][2]>=orderMatrix[0][3]) if(orderMatrix[1][2]>=orderMatrix[2][0]) if(orderMatrix[2][2]<orderMatrix[1][3]) __iv__return_expr_floorIsOrdered = orderMatrix[1][3]; else if(orderMatrix[1][0]>=orderMatrix[2][0]) if(orderMatrix[1][0]>=motorDir) if(orderMatrix[2][2]>=motorDir) if(orderMatrix[2][2]>=orderMatrix[2][0]) if(orderMatrix[2][2]<orderMatrix[1][0]) __iv__return_expr_floorIsOrdered = orderMatrix[1][0]; else if(orderMatrix[2][2]<orderMatrix[1][2]) __iv__return_expr_floorIsOrdered = 0; else if(1==orderMatrix[1][0]) if(orderMatrix[0][0]<orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(floorNum<orderMatrix[2][1]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[2][0]<orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(floorNum<orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[2][0]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[0][0]; else if(orderMatrix[0][3]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[0][0]; else if(orderMatrix[0][3]<orderMatrix[2][0]) __iv__return_expr_floorIsOrdered = orderMatrix[1][3]; else if(orderMatrix[0][3]<orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = orderMatrix[1][3]; else if(orderMatrix[0][3]<orderMatrix[1][2]) __iv__return_expr_floorIsOrdered = orderMatrix[1][3]; else if(orderMatrix[0][3]<motorDir) __iv__return_expr_floorIsOrdered = orderMatrix[1][0]; else if(orderMatrix[2][0]<orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = orderMatrix[0][2]; else if(orderMatrix[0][3]<orderMatrix[1][1]) __iv__return_expr_floorIsOrdered = orderMatrix[1][3]; else if(orderMatrix[0][3]<orderMatrix[1][0]) __iv__return_expr_floorIsOrdered = orderMatrix[1][3]; else if(orderMatrix[1][2]<orderMatrix[2][3]) __iv__return_expr_floorIsOrdered = orderMatrix[1][3]; else if(orderMatrix[1][2]>=motorDir) if(orderMatrix[1][2]==orderMatrix[0][3]) if(orderMatrix[2][1]<motorDir) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[2][1]<orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[1][3]<orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(floorNum>=3) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[0][0]>=orderMatrix[1][1]) if(orderMatrix[0][0]<orderMatrix[1][3]) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[1][3]>=motorDir) if(1==orderMatrix[0][0]) if(orderMatrix[1][1]<motorDir) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[1][1]<orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[1][1]<orderMatrix[2][1]) __iv__return_expr_floorIsOrdered = orderMatrix[0][0]; else __iv__return_expr_floorIsOrdered = orderMatrix[1][1]; else __iv__return_expr_floorIsOrdered = 0; else __iv__return_expr_floorIsOrdered = orderMatrix[1][2]; else __iv__return_expr_floorIsOrdered = orderMatrix[0][2]; else __iv__return_expr_floorIsOrdered = orderMatrix[1][0]; else __iv__return_expr_floorIsOrdered = 0; else __iv__return_expr_floorIsOrdered = floorNum; else __iv__return_expr_floorIsOrdered = orderMatrix[1][2]; else __iv__return_expr_floorIsOrdered = orderMatrix[1][0]; else __iv__return_expr_floorIsOrdered = motorDir; else __iv__return_expr_floorIsOrdered = orderMatrix[1][2]; else __iv__return_expr_floorIsOrdered = orderMatrix[1][0]; else __iv__return_expr_floorIsOrdered = orderMatrix[1][3]; else __iv__return_expr_floorIsOrdered = orderMatrix[2][1]; 
	__CPROVER_assume(__iv__return_expr_floorIsOrdered == 0 || __iv__return_expr_floorIsOrdered == 1);
	return __iv__return_expr_floorIsOrdered;
}
complexity: 61
# constraints: 117

signed int __iv__isButtonPressed_stub() {
	signed int __iv__return_expr_isButtonPressed;
	if(orderMatrix[2][1]>=2) __iv__return_expr_isButtonPressed = 0; else if((-1)>=orderMatrix[2][1]) __iv__return_expr_isButtonPressed = 0; else if(1==orderMatrix[0][0]) __iv__return_expr_isButtonPressed = orderMatrix[0][0]; else if(1==orderMatrix[0][3]) __iv__return_expr_isButtonPressed = orderMatrix[0][3]; else if(1==orderMatrix[2][1]) __iv__return_expr_isButtonPressed = orderMatrix[2][1]; else if(orderMatrix[0][2]<(-1)) __iv__return_expr_isButtonPressed = orderMatrix[2][3]; else if(orderMatrix[2][0]==orderMatrix[0][3]) if(1==orderMatrix[0][2]) __iv__return_expr_isButtonPressed = orderMatrix[1][3]; else if(orderMatrix[1][2]<orderMatrix[2][3]) __iv__return_expr_isButtonPressed = orderMatrix[2][3]; else if(orderMatrix[1][1]<orderMatrix[1][2]) __iv__return_expr_isButtonPressed = orderMatrix[1][2]; else if(orderMatrix[1][1]<orderMatrix[2][2]) __iv__return_expr_isButtonPressed = orderMatrix[2][2]; else __iv__return_expr_isButtonPressed = orderMatrix[1][1]; else __iv__return_expr_isButtonPressed = orderMatrix[2][0]; 
	__CPROVER_assume(__iv__return_expr_isButtonPressed == 0 || __iv__return_expr_isButtonPressed == 1);
	return __iv__return_expr_isButtonPressed;
}
complexity: 11
# constraints: 23

run cbmc: (unwind: 610, timeout: 86400 sec)
cbmc running time: 1377.46 sec

verification results: 
property 'assert((state != 2));' is FALSE alarm.

synthesize new stub refined by counterexamples (unit timeout: 600 sec)
on each refinement:
refinement time: 9.916 sec

Iteration 17:
signed int __iv__elev_get_button_signal_stub(elev_button_type_t button, signed int floor) {
	signed int __iv__return_expr_elev_get_button_signal;
	signed int __iv__nondet_input_elev_get_button_signal_1 = __VERIFIER_nondet_signed_int();
	__iv__return_expr_elev_get_button_signal = __iv__nondet_input_elev_get_button_signal_1;
	__CPROVER_assume(__iv__return_expr_elev_get_button_signal == 0 || __iv__return_expr_elev_get_button_signal == 1);
	return __iv__return_expr_elev_get_button_signal;
}
complexity: 0
accuracy: 100.00%
coverage: 100.00%
# constraints: 2

signed int __iv__floorIsOrdered_stub(signed int floorNum, signed int motorDir) {
	signed int __iv__return_expr_floorIsOrdered;
	if((-1)==orderMatrix[1][2]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if((-1)>=orderMatrix[0][1]) if(orderMatrix[2][1]>=3) __iv__return_expr_floorIsOrdered = orderMatrix[2][0]; else __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[1][2]<(-1)) __iv__return_expr_floorIsOrdered = 0; else if((-1)>=orderMatrix[1][0]) __iv__return_expr_floorIsOrdered = 0; else if(3==orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[0][3]>=2) __iv__return_expr_floorIsOrdered = 0; else if((-1)>=orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[0][3]>=orderMatrix[2][3]) if(orderMatrix[1][2]>=orderMatrix[2][3]) if(orderMatrix[2][0]>=orderMatrix[2][3]) if(orderMatrix[1][2]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[0][0]; else if(orderMatrix[2][2]>=orderMatrix[2][3]) if(orderMatrix[1][0]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[0][0]; else if(orderMatrix[2][0]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[0][3]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[0][0]; else if(orderMatrix[2][2]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[0][0]; else if(orderMatrix[0][3]<orderMatrix[2][2]) __iv__return_expr_floorIsOrdered = orderMatrix[1][0]; else if(orderMatrix[0][3]<orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[1][2]<orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[1][0]<orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[2][2]<orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[2][0]<orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[0][0]<orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[1][3]<orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(floorNum<orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(floorNum<orderMatrix[1][3]) __iv__return_expr_floorIsOrdered = orderMatrix[1][3]; else if(orderMatrix[2][1]<orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(floorNum<orderMatrix[2][0]) __iv__return_expr_floorIsOrdered = orderMatrix[2][0]; else if(floorNum<orderMatrix[1][0]) __iv__return_expr_floorIsOrdered = orderMatrix[2][1]; else if(floorNum<orderMatrix[1][1]) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[0][1]==floorNum) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[2][3]<orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[2][3]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[0][0]; else if(orderMatrix[0][2]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[1][1]<orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(floorNum>=3) __iv__return_expr_floorIsOrdered = orderMatrix[1][3]; else if(orderMatrix[2][0]<orderMatrix[1][3]) __iv__return_expr_floorIsOrdered = orderMatrix[1][3]; else if(orderMatrix[0][2]<orderMatrix[1][3]) __iv__return_expr_floorIsOrdered = orderMatrix[1][3]; else if(orderMatrix[1][2]<orderMatrix[1][3]) __iv__return_expr_floorIsOrdered = orderMatrix[1][3]; else if(orderMatrix[1][2]<orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = orderMatrix[0][2]; else if(orderMatrix[2][0]<orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = orderMatrix[0][2]; else if(orderMatrix[2][2]<orderMatrix[1][3]) __iv__return_expr_floorIsOrdered = orderMatrix[1][3]; else if(orderMatrix[2][3]<orderMatrix[1][3]) __iv__return_expr_floorIsOrdered = orderMatrix[1][3]; else if(orderMatrix[2][3]<orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = orderMatrix[0][2]; else if(orderMatrix[1][3]<orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = orderMatrix[0][2]; else if(orderMatrix[1][0]<orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = orderMatrix[1][3]; else if(orderMatrix[1][0]>=orderMatrix[2][3]) if(orderMatrix[1][0]<orderMatrix[2][2]) __iv__return_expr_floorIsOrdered = orderMatrix[2][0]; else if(orderMatrix[2][0]<orderMatrix[2][1]) __iv__return_expr_floorIsOrdered = orderMatrix[2][1]; else if(orderMatrix[2][0]<orderMatrix[1][2]) __iv__return_expr_floorIsOrdered = orderMatrix[1][2]; else if(orderMatrix[2][2]<orderMatrix[0][3]) __iv__return_expr_floorIsOrdered = orderMatrix[2][0]; else if(orderMatrix[1][2]<orderMatrix[2][0]) __iv__return_expr_floorIsOrdered = orderMatrix[2][0]; else if(orderMatrix[1][0]>=orderMatrix[1][1]) if(orderMatrix[0][3]<orderMatrix[1][0]) __iv__return_expr_floorIsOrdered = orderMatrix[2][0]; else if(orderMatrix[1][2]>=motorDir) if(orderMatrix[2][1]>=motorDir) if(orderMatrix[0][3]>=motorDir) if(orderMatrix[2][2]<orderMatrix[2][0]) __iv__return_expr_floorIsOrdered = orderMatrix[2][0]; else if(1==orderMatrix[2][0]) if(orderMatrix[2][3]<orderMatrix[2][0]) __iv__return_expr_floorIsOrdered = orderMatrix[2][0]; else if(orderMatrix[1][1]<motorDir) __iv__return_expr_floorIsOrdered = orderMatrix[2][0]; else if(1==orderMatrix[0][2]) if(orderMatrix[1][1]<orderMatrix[2][1]) __iv__return_expr_floorIsOrdered = orderMatrix[0][0]; else __iv__return_expr_floorIsOrdered = orderMatrix[1][1]; else __iv__return_expr_floorIsOrdered = 0; else __iv__return_expr_floorIsOrdered = orderMatrix[1][0]; else __iv__return_expr_floorIsOrdered = orderMatrix[2][0]; else __iv__return_expr_floorIsOrdered = orderMatrix[2][0]; else __iv__return_expr_floorIsOrdered = 0; else __iv__return_expr_floorIsOrdered = floorNum; else __iv__return_expr_floorIsOrdered = 0; else __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else __iv__return_expr_floorIsOrdered = orderMatrix[1][3]; else __iv__return_expr_floorIsOrdered = orderMatrix[2][3]; 
	__CPROVER_assume(__iv__return_expr_floorIsOrdered == 0 || __iv__return_expr_floorIsOrdered == 1);
	return __iv__return_expr_floorIsOrdered;
}
complexity: 64
# constraints: 121

signed int __iv__isButtonPressed_stub() {
	signed int __iv__return_expr_isButtonPressed;
	if(orderMatrix[2][1]>=2) __iv__return_expr_isButtonPressed = 0; else if((-1)>=orderMatrix[2][1]) __iv__return_expr_isButtonPressed = 0; else if(1==orderMatrix[0][0]) __iv__return_expr_isButtonPressed = orderMatrix[0][0]; else if(1==orderMatrix[0][3]) __iv__return_expr_isButtonPressed = orderMatrix[0][3]; else if(1==orderMatrix[2][1]) __iv__return_expr_isButtonPressed = orderMatrix[2][1]; else if(orderMatrix[0][2]<(-1)) __iv__return_expr_isButtonPressed = orderMatrix[2][3]; else if(orderMatrix[2][0]==orderMatrix[0][3]) if(1==orderMatrix[0][2]) __iv__return_expr_isButtonPressed = orderMatrix[1][3]; else if(orderMatrix[1][2]<orderMatrix[2][3]) __iv__return_expr_isButtonPressed = orderMatrix[2][3]; else if(orderMatrix[1][1]<orderMatrix[1][2]) __iv__return_expr_isButtonPressed = orderMatrix[1][2]; else if(orderMatrix[1][1]<orderMatrix[2][2]) __iv__return_expr_isButtonPressed = orderMatrix[2][2]; else __iv__return_expr_isButtonPressed = orderMatrix[1][1]; else __iv__return_expr_isButtonPressed = orderMatrix[2][0]; 
	__CPROVER_assume(__iv__return_expr_isButtonPressed == 0 || __iv__return_expr_isButtonPressed == 1);
	return __iv__return_expr_isButtonPressed;
}
complexity: 11
# constraints: 23

run cbmc: (unwind: 610, timeout: 86400 sec)
cbmc running time: 1607.575 sec

verification results: 
property 'assert((state != 2));' is FALSE alarm.

synthesize new stub refined by counterexamples (unit timeout: 600 sec)
on each refinement:
refinement time: 25.413 sec

Iteration 18:
signed int __iv__elev_get_button_signal_stub(elev_button_type_t button, signed int floor) {
	signed int __iv__return_expr_elev_get_button_signal;
	signed int __iv__nondet_input_elev_get_button_signal_1 = __VERIFIER_nondet_signed_int();
	__iv__return_expr_elev_get_button_signal = __iv__nondet_input_elev_get_button_signal_1;
	__CPROVER_assume(__iv__return_expr_elev_get_button_signal == 0 || __iv__return_expr_elev_get_button_signal == 1);
	return __iv__return_expr_elev_get_button_signal;
}
complexity: 0
accuracy: 100.00%
coverage: 100.00%
# constraints: 2

signed int __iv__floorIsOrdered_stub(signed int floorNum, signed int motorDir) {
	signed int __iv__return_expr_floorIsOrdered;
	if((-1)==orderMatrix[1][2]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(motorDir>=2) __iv__return_expr_floorIsOrdered = 0; else if((-1)>=orderMatrix[2][1]) __iv__return_expr_floorIsOrdered = 0; else if((-1)>=orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = orderMatrix[2][0]; else if(orderMatrix[1][2]<(-1)) __iv__return_expr_floorIsOrdered = 0; else if((-1)>=orderMatrix[1][0]) __iv__return_expr_floorIsOrdered = 0; else if(3==orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = 0; else if((-1)>=orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[0][3]>=2) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[1][0]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[0][0]; else if(orderMatrix[2][2]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[0][0]; else if(orderMatrix[0][3]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[0][0]; else if(orderMatrix[2][0]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(floorNum<orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(floorNum<orderMatrix[1][3]) __iv__return_expr_floorIsOrdered = orderMatrix[1][0]; else if(floorNum<orderMatrix[2][0]) __iv__return_expr_floorIsOrdered = orderMatrix[2][0]; else if(floorNum<orderMatrix[1][0]) __iv__return_expr_floorIsOrdered = orderMatrix[1][0]; else if(floorNum<orderMatrix[1][1]) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[1][2]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[0][0]; else if(orderMatrix[1][3]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[0][0]; else if((-1)==motorDir) __iv__return_expr_floorIsOrdered = orderMatrix[1][0]; else if(orderMatrix[0][2]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(2>=floorNum) if(orderMatrix[2][3]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[0][0]; else if(orderMatrix[2][1]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(motorDir<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[0][0]; else if(orderMatrix[1][1]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[0][1]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[0][0]; else if(1==orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[2][1]<orderMatrix[1][3]) if(orderMatrix[0][3]<orderMatrix[1][3]) __iv__return_expr_floorIsOrdered = orderMatrix[1][3]; else __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[1][1]<orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = orderMatrix[0][2]; else if(orderMatrix[2][0]>=orderMatrix[1][3]) if(motorDir<orderMatrix[1][3]) __iv__return_expr_floorIsOrdered = orderMatrix[2][0]; else if(motorDir<orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[1][1]<orderMatrix[1][3]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[1][2]<orderMatrix[1][3]) __iv__return_expr_floorIsOrdered = orderMatrix[0][2]; else if(orderMatrix[1][1]<orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[2][0]>=orderMatrix[2][3]) if(motorDir<orderMatrix[2][1]) __iv__return_expr_floorIsOrdered = orderMatrix[2][1]; else if(orderMatrix[2][0]>=orderMatrix[2][1]) if(motorDir<orderMatrix[2][3]) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[1][1]<orderMatrix[2][3]) __iv__return_expr_floorIsOrdered = orderMatrix[2][0]; else if(orderMatrix[1][1]<orderMatrix[1][0]) __iv__return_expr_floorIsOrdered = orderMatrix[2][0]; else if(orderMatrix[1][1]<orderMatrix[2][1]) __iv__return_expr_floorIsOrdered = orderMatrix[2][0]; else if(orderMatrix[1][1]<motorDir) __iv__return_expr_floorIsOrdered = orderMatrix[2][0]; else if(motorDir<orderMatrix[0][3]) __iv__return_expr_floorIsOrdered = orderMatrix[1][0]; else if(motorDir<orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = orderMatrix[0][2]; else if(motorDir<orderMatrix[1][2]) __iv__return_expr_floorIsOrdered = orderMatrix[2][0]; else if(motorDir<orderMatrix[1][0]) __iv__return_expr_floorIsOrdered = orderMatrix[2][0]; else if(motorDir<orderMatrix[1][1]) __iv__return_expr_floorIsOrdered = orderMatrix[1][1]; else if(orderMatrix[2][0]<orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[2][1]<orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[2][0]>=orderMatrix[0][3]) __iv__return_expr_floorIsOrdered = motorDir; else __iv__return_expr_floorIsOrdered = 0; else __iv__return_expr_floorIsOrdered = orderMatrix[1][0]; else __iv__return_expr_floorIsOrdered = orderMatrix[2][3]; else __iv__return_expr_floorIsOrdered = orderMatrix[1][0]; else __iv__return_expr_floorIsOrdered = orderMatrix[1][3]; 
	__CPROVER_assume(__iv__return_expr_floorIsOrdered == 0 || __iv__return_expr_floorIsOrdered == 1);
	return __iv__return_expr_floorIsOrdered;
}
complexity: 54
# constraints: 127

signed int __iv__isButtonPressed_stub() {
	signed int __iv__return_expr_isButtonPressed;
	if(orderMatrix[2][1]>=2) __iv__return_expr_isButtonPressed = 0; else if((-1)>=orderMatrix[2][1]) __iv__return_expr_isButtonPressed = 0; else if(1==orderMatrix[0][0]) __iv__return_expr_isButtonPressed = orderMatrix[0][0]; else if(1==orderMatrix[0][3]) __iv__return_expr_isButtonPressed = orderMatrix[0][3]; else if(1==orderMatrix[2][1]) __iv__return_expr_isButtonPressed = orderMatrix[2][1]; else if(orderMatrix[0][2]<(-1)) __iv__return_expr_isButtonPressed = orderMatrix[2][3]; else if(orderMatrix[2][0]==orderMatrix[0][3]) if(1==orderMatrix[0][2]) __iv__return_expr_isButtonPressed = orderMatrix[1][3]; else if(orderMatrix[1][2]<orderMatrix[2][3]) __iv__return_expr_isButtonPressed = orderMatrix[2][3]; else if(orderMatrix[1][1]<orderMatrix[1][2]) __iv__return_expr_isButtonPressed = orderMatrix[1][2]; else if(orderMatrix[1][1]<orderMatrix[2][2]) __iv__return_expr_isButtonPressed = orderMatrix[2][2]; else __iv__return_expr_isButtonPressed = orderMatrix[1][1]; else __iv__return_expr_isButtonPressed = orderMatrix[2][0]; 
	__CPROVER_assume(__iv__return_expr_isButtonPressed == 0 || __iv__return_expr_isButtonPressed == 1);
	return __iv__return_expr_isButtonPressed;
}
complexity: 11
# constraints: 23

run cbmc: (unwind: 610, timeout: 86400 sec)
cbmc running time: 926.713 sec

verification results: 
property 'assert((state != 2));' is FALSE alarm.

synthesize new stub refined by counterexamples (unit timeout: 600 sec)
on each refinement:
refinement time: 26.311 sec

Iteration 19:
signed int __iv__elev_get_button_signal_stub(elev_button_type_t button, signed int floor) {
	signed int __iv__return_expr_elev_get_button_signal;
	signed int __iv__nondet_input_elev_get_button_signal_1 = __VERIFIER_nondet_signed_int();
	__iv__return_expr_elev_get_button_signal = __iv__nondet_input_elev_get_button_signal_1;
	__CPROVER_assume(__iv__return_expr_elev_get_button_signal == 0 || __iv__return_expr_elev_get_button_signal == 1);
	return __iv__return_expr_elev_get_button_signal;
}
complexity: 0
accuracy: 100.00%
coverage: 100.00%
# constraints: 2

signed int __iv__floorIsOrdered_stub(signed int floorNum, signed int motorDir) {
	signed int __iv__return_expr_floorIsOrdered;
	if((-1)==orderMatrix[1][2]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(motorDir>=2) __iv__return_expr_floorIsOrdered = 0; else if((-1)>=orderMatrix[2][1]) __iv__return_expr_floorIsOrdered = 0; else if((-1)>=orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = orderMatrix[2][0]; else if(orderMatrix[1][2]<(-1)) __iv__return_expr_floorIsOrdered = 0; else if((-1)>=orderMatrix[1][0]) __iv__return_expr_floorIsOrdered = 0; else if(3==orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = 0; else if((-1)>=orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[0][3]>=2) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[1][0]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[0][0]; else if(orderMatrix[2][2]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[0][0]; else if(orderMatrix[0][3]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[0][0]; else if(orderMatrix[2][0]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[0][0]; else if(floorNum<orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(floorNum<orderMatrix[1][3]) __iv__return_expr_floorIsOrdered = orderMatrix[1][0]; else if(floorNum<orderMatrix[2][0]) __iv__return_expr_floorIsOrdered = orderMatrix[2][0]; else if(floorNum<orderMatrix[1][0]) __iv__return_expr_floorIsOrdered = orderMatrix[1][0]; else if(floorNum<orderMatrix[1][1]) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[1][2]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[0][0]; else if((-1)==motorDir) __iv__return_expr_floorIsOrdered = orderMatrix[1][0]; else if(orderMatrix[1][3]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[0][0]; else if(orderMatrix[2][3]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[0][0]; else if(orderMatrix[0][2]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[2][1]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(motorDir<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[0][0]; else if(orderMatrix[1][1]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[0][1]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[0][0]; else if(1==orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(motorDir<orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[1][1]<orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[0][3]<orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[2][1]<orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[1][2]<orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[1][3]<orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[1][0]<orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[0][2]<orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[2][2]<orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(1==orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[2][2]<orderMatrix[2][3]) __iv__return_expr_floorIsOrdered = motorDir; else if(orderMatrix[1][2]<orderMatrix[2][3]) __iv__return_expr_floorIsOrdered = orderMatrix[1][0]; else if(orderMatrix[2][1]<orderMatrix[2][3]) __iv__return_expr_floorIsOrdered = 0; else if(motorDir>=orderMatrix[2][3]) if(orderMatrix[2][1]<orderMatrix[1][3]) __iv__return_expr_floorIsOrdered = orderMatrix[1][0]; else if(motorDir>=orderMatrix[1][3]) if(orderMatrix[1][2]<orderMatrix[1][3]) __iv__return_expr_floorIsOrdered = orderMatrix[2][0]; else if(orderMatrix[1][2]<orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = orderMatrix[1][0]; else if(orderMatrix[1][1]<orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = motorDir; else if(orderMatrix[1][1]<orderMatrix[1][3]) __iv__return_expr_floorIsOrdered = motorDir; else if(orderMatrix[1][1]<orderMatrix[2][3]) __iv__return_expr_floorIsOrdered = orderMatrix[2][0]; else if(orderMatrix[1][1]<orderMatrix[2][2]) __iv__return_expr_floorIsOrdered = orderMatrix[2][0]; else if(orderMatrix[1][1]<orderMatrix[0][3]) __iv__return_expr_floorIsOrdered = orderMatrix[0][3]; else if(orderMatrix[1][1]<orderMatrix[1][0]) __iv__return_expr_floorIsOrdered = motorDir; else if(motorDir>=orderMatrix[2][1]) if(orderMatrix[1][1]<orderMatrix[2][1]) __iv__return_expr_floorIsOrdered = orderMatrix[2][0]; else if(orderMatrix[1][1]<motorDir) __iv__return_expr_floorIsOrdered = orderMatrix[2][0]; else if(orderMatrix[2][2]<orderMatrix[0][3]) __iv__return_expr_floorIsOrdered = orderMatrix[2][0]; else if(orderMatrix[1][2]<orderMatrix[2][1]) __iv__return_expr_floorIsOrdered = orderMatrix[2][0]; else if(orderMatrix[1][2]<orderMatrix[2][0]) __iv__return_expr_floorIsOrdered = orderMatrix[2][0]; else if(orderMatrix[0][2]<orderMatrix[2][0]) __iv__return_expr_floorIsOrdered = orderMatrix[2][0]; else if(orderMatrix[2][1]<orderMatrix[2][0]) __iv__return_expr_floorIsOrdered = orderMatrix[2][0]; else if(orderMatrix[2][1]<orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = orderMatrix[1][0]; else if(motorDir<orderMatrix[1][0]) __iv__return_expr_floorIsOrdered = orderMatrix[1][0]; else if(orderMatrix[0][0]<motorDir) if(orderMatrix[1][2]<orderMatrix[0][3]) __iv__return_expr_floorIsOrdered = 0; else __iv__return_expr_floorIsOrdered = motorDir; else __iv__return_expr_floorIsOrdered = orderMatrix[1][1]; else __iv__return_expr_floorIsOrdered = orderMatrix[2][0]; else __iv__return_expr_floorIsOrdered = orderMatrix[1][3]; else __iv__return_expr_floorIsOrdered = orderMatrix[1][3]; 
	__CPROVER_assume(__iv__return_expr_floorIsOrdered == 0 || __iv__return_expr_floorIsOrdered == 1);
	return __iv__return_expr_floorIsOrdered;
}
complexity: 64
# constraints: 129

signed int __iv__isButtonPressed_stub() {
	signed int __iv__return_expr_isButtonPressed;
	if(orderMatrix[2][1]>=2) __iv__return_expr_isButtonPressed = 0; else if((-1)>=orderMatrix[2][1]) __iv__return_expr_isButtonPressed = 0; else if(1==orderMatrix[0][0]) __iv__return_expr_isButtonPressed = orderMatrix[0][0]; else if(1==orderMatrix[0][3]) __iv__return_expr_isButtonPressed = orderMatrix[0][3]; else if(orderMatrix[2][3]<orderMatrix[0][0]) __iv__return_expr_isButtonPressed = orderMatrix[2][1]; else if(1==orderMatrix[2][1]) __iv__return_expr_isButtonPressed = orderMatrix[2][1]; else if(orderMatrix[1][1]<orderMatrix[1][2]) __iv__return_expr_isButtonPressed = orderMatrix[1][2]; else if(orderMatrix[1][2]<orderMatrix[2][3]) __iv__return_expr_isButtonPressed = orderMatrix[2][3]; else if(orderMatrix[0][2]<(-1)) __iv__return_expr_isButtonPressed = orderMatrix[2][0]; else if(orderMatrix[1][1]<orderMatrix[2][2]) __iv__return_expr_isButtonPressed = orderMatrix[2][2]; else if(orderMatrix[1][3]<orderMatrix[2][0]) __iv__return_expr_isButtonPressed = orderMatrix[2][0]; else if(orderMatrix[1][1]<orderMatrix[0][2]) __iv__return_expr_isButtonPressed = orderMatrix[1][3]; else if(1==orderMatrix[1][2]) __iv__return_expr_isButtonPressed = orderMatrix[2][3]; else if(orderMatrix[2][3]==orderMatrix[0][2]) if(orderMatrix[1][3]>=orderMatrix[1][1]) __iv__return_expr_isButtonPressed = orderMatrix[1][3]; else __iv__return_expr_isButtonPressed = orderMatrix[1][1]; else __iv__return_expr_isButtonPressed = orderMatrix[1][1]; 
	__CPROVER_assume(__iv__return_expr_isButtonPressed == 0 || __iv__return_expr_isButtonPressed == 1);
	return __iv__return_expr_isButtonPressed;
}
complexity: 15
# constraints: 24

run cbmc: (unwind: 610, timeout: 86400 sec)
cbmc running time: 1186.721 sec

verification results: 
property 'assert((state != 2));' is FALSE alarm.

synthesize new stub refined by counterexamples (unit timeout: 600 sec)
on each refinement:
refinement time: 26.203 sec

Iteration 20:
signed int __iv__elev_get_button_signal_stub(elev_button_type_t button, signed int floor) {
	signed int __iv__return_expr_elev_get_button_signal;
	signed int __iv__nondet_input_elev_get_button_signal_1 = __VERIFIER_nondet_signed_int();
	__iv__return_expr_elev_get_button_signal = __iv__nondet_input_elev_get_button_signal_1;
	__CPROVER_assume(__iv__return_expr_elev_get_button_signal == 0 || __iv__return_expr_elev_get_button_signal == 1);
	return __iv__return_expr_elev_get_button_signal;
}
complexity: 0
accuracy: 100.00%
coverage: 100.00%
# constraints: 2

signed int __iv__floorIsOrdered_stub(signed int floorNum, signed int motorDir) {
	signed int __iv__return_expr_floorIsOrdered;
	if((-1)==orderMatrix[1][2]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(motorDir>=2) __iv__return_expr_floorIsOrdered = 0; else if((-1)>=orderMatrix[2][1]) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[1][2]<(-1)) __iv__return_expr_floorIsOrdered = 0; else if((-1)>=orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = orderMatrix[2][0]; else if((-1)>=orderMatrix[1][0]) __iv__return_expr_floorIsOrdered = 0; else if(3==orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[0][3]>=2) __iv__return_expr_floorIsOrdered = 0; else if((-1)>=orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[1][0]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[0][0]; else if(floorNum<orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(floorNum<orderMatrix[0][3]) __iv__return_expr_floorIsOrdered = orderMatrix[0][0]; else if(floorNum<orderMatrix[1][3]) __iv__return_expr_floorIsOrdered = orderMatrix[1][3]; else if(floorNum<orderMatrix[2][0]) __iv__return_expr_floorIsOrdered = orderMatrix[2][0]; else if(floorNum<orderMatrix[1][0]) __iv__return_expr_floorIsOrdered = orderMatrix[2][1]; else if(floorNum<orderMatrix[1][1]) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[2][2]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[0][0]; else if(orderMatrix[0][3]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[0][0]; else if(orderMatrix[2][0]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[0][0]; else if(orderMatrix[1][2]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[0][0]; else if((-1)==motorDir) __iv__return_expr_floorIsOrdered = orderMatrix[1][0]; else if(orderMatrix[0][2]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[1][3]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[0][0]; else if(orderMatrix[2][3]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[0][0]; else if(orderMatrix[0][3]>=orderMatrix[0][2]) if(orderMatrix[0][3]<motorDir) __iv__return_expr_floorIsOrdered = motorDir; else if(orderMatrix[0][3]<orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[0][3]<orderMatrix[2][3]) __iv__return_expr_floorIsOrdered = orderMatrix[1][3]; else if(orderMatrix[0][3]<orderMatrix[2][2]) __iv__return_expr_floorIsOrdered = orderMatrix[1][3]; else if(orderMatrix[0][3]<orderMatrix[2][1]) __iv__return_expr_floorIsOrdered = orderMatrix[2][0]; else if(orderMatrix[0][3]<orderMatrix[1][3]) __iv__return_expr_floorIsOrdered = orderMatrix[1][3]; else if(orderMatrix[0][3]>=orderMatrix[1][2]) if(orderMatrix[0][3]<orderMatrix[1][0]) __iv__return_expr_floorIsOrdered = orderMatrix[2][0]; else if(1==orderMatrix[0][3]) if(orderMatrix[1][2]<orderMatrix[2][3]) __iv__return_expr_floorIsOrdered = orderMatrix[1][3]; else if(orderMatrix[1][2]<orderMatrix[1][3]) __iv__return_expr_floorIsOrdered = orderMatrix[1][3]; else if(motorDir>=orderMatrix[1][1]) if(orderMatrix[2][0]<orderMatrix[2][3]) __iv__return_expr_floorIsOrdered = orderMatrix[1][3]; else if(floorNum>=3) __iv__return_expr_floorIsOrdered = orderMatrix[1][3]; else if(orderMatrix[2][0]<orderMatrix[2][1]) __iv__return_expr_floorIsOrdered = orderMatrix[2][1]; else if(orderMatrix[2][0]>=orderMatrix[0][2]) if(orderMatrix[2][0]<orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(1==orderMatrix[2][0]) if(motorDir<orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(motorDir<orderMatrix[2][1]) __iv__return_expr_floorIsOrdered = orderMatrix[0][0]; else __iv__return_expr_floorIsOrdered = motorDir; else __iv__return_expr_floorIsOrdered = 0; else __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else __iv__return_expr_floorIsOrdered = orderMatrix[1][0]; else __iv__return_expr_floorIsOrdered = floorNum; else __iv__return_expr_floorIsOrdered = orderMatrix[2][0]; else __iv__return_expr_floorIsOrdered = orderMatrix[0][2]; 
	__CPROVER_assume(__iv__return_expr_floorIsOrdered == 0 || __iv__return_expr_floorIsOrdered == 1);
	return __iv__return_expr_floorIsOrdered;
}
complexity: 45
# constraints: 134

signed int __iv__isButtonPressed_stub() {
	signed int __iv__return_expr_isButtonPressed;
	if(orderMatrix[2][1]>=2) __iv__return_expr_isButtonPressed = 0; else if((-1)>=orderMatrix[2][1]) __iv__return_expr_isButtonPressed = 0; else if(1==orderMatrix[0][0]) __iv__return_expr_isButtonPressed = orderMatrix[0][0]; else if(1==orderMatrix[0][3]) __iv__return_expr_isButtonPressed = orderMatrix[0][3]; else if(1==orderMatrix[2][1]) __iv__return_expr_isButtonPressed = orderMatrix[2][1]; else if(orderMatrix[0][2]==orderMatrix[0][0]) if(orderMatrix[1][1]<orderMatrix[1][2]) __iv__return_expr_isButtonPressed = orderMatrix[1][2]; else if(orderMatrix[1][3]<orderMatrix[2][0]) __iv__return_expr_isButtonPressed = orderMatrix[2][0]; else if(orderMatrix[1][2]<orderMatrix[2][3]) __iv__return_expr_isButtonPressed = orderMatrix[2][3]; else if(orderMatrix[1][1]<orderMatrix[2][2]) __iv__return_expr_isButtonPressed = orderMatrix[2][2]; else if(orderMatrix[0][2]<(-1)) __iv__return_expr_isButtonPressed = orderMatrix[2][0]; else if(1==orderMatrix[1][2]) __iv__return_expr_isButtonPressed = orderMatrix[1][1]; else if(orderMatrix[1][3]<orderMatrix[1][1]) __iv__return_expr_isButtonPressed = orderMatrix[1][1]; else __iv__return_expr_isButtonPressed = orderMatrix[1][3]; else __iv__return_expr_isButtonPressed = orderMatrix[0][2]; 
	__CPROVER_assume(__iv__return_expr_isButtonPressed == 0 || __iv__return_expr_isButtonPressed == 1);
	return __iv__return_expr_isButtonPressed;
}
complexity: 13
# constraints: 25

run cbmc: (unwind: 610, timeout: 86400 sec)
cbmc running time: 1234.913 sec

verification results: 
property 'assert((state != 2));' is FALSE alarm.

synthesize new stub refined by counterexamples (unit timeout: 600 sec)
on each refinement:
refinement time: 30.912 sec

Iteration 21:
signed int __iv__elev_get_button_signal_stub(elev_button_type_t button, signed int floor) {
	signed int __iv__return_expr_elev_get_button_signal;
	signed int __iv__nondet_input_elev_get_button_signal_1 = __VERIFIER_nondet_signed_int();
	__iv__return_expr_elev_get_button_signal = __iv__nondet_input_elev_get_button_signal_1;
	__CPROVER_assume(__iv__return_expr_elev_get_button_signal == 0 || __iv__return_expr_elev_get_button_signal == 1);
	return __iv__return_expr_elev_get_button_signal;
}
complexity: 0
accuracy: 100.00%
coverage: 100.00%
# constraints: 2

signed int __iv__floorIsOrdered_stub(signed int floorNum, signed int motorDir) {
	signed int __iv__return_expr_floorIsOrdered;
	if((-1)==orderMatrix[1][2]) __iv__return_expr_floorIsOrdered = orderMatrix[0][0]; else if(motorDir>=2) __iv__return_expr_floorIsOrdered = 0; else if((-1)>=orderMatrix[2][1]) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[1][2]<(-1)) __iv__return_expr_floorIsOrdered = 0; else if((-1)>=orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = orderMatrix[2][0]; else if((-1)>=orderMatrix[1][0]) __iv__return_expr_floorIsOrdered = 0; else if(3==orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = 0; else if((-1)>=orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[0][3]>=2) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[1][0]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[0][0]; else if(floorNum<orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = orderMatrix[0][0]; else if(floorNum<orderMatrix[0][3]) __iv__return_expr_floorIsOrdered = orderMatrix[0][0]; else if(floorNum<orderMatrix[1][3]) __iv__return_expr_floorIsOrdered = orderMatrix[1][3]; else if(floorNum<orderMatrix[2][0]) __iv__return_expr_floorIsOrdered = orderMatrix[1][0]; else if(floorNum<orderMatrix[1][0]) __iv__return_expr_floorIsOrdered = orderMatrix[2][1]; else if(floorNum<orderMatrix[1][1]) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[2][2]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[0][0]; else if(orderMatrix[0][3]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[0][0]; else if(orderMatrix[2][0]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[0][0]; else if((-1)==motorDir) __iv__return_expr_floorIsOrdered = orderMatrix[1][0]; else if(orderMatrix[1][2]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[0][0]; else if(orderMatrix[1][3]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[0][0]; else if(orderMatrix[2][3]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[0][0]; else if(orderMatrix[0][2]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[0][0]; else if(orderMatrix[2][1]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[1][1]; else if(motorDir<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[0][0]; else if(orderMatrix[1][1]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[0][0]; else if(orderMatrix[0][1]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[0][0]; else if(1==orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[0][0]; else if(orderMatrix[1][0]>=motorDir) if(orderMatrix[0][3]<orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = orderMatrix[1][3]; else if(orderMatrix[1][1]>=orderMatrix[0][1]) if(orderMatrix[2][0]<orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = orderMatrix[0][2]; else if(motorDir<orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = orderMatrix[2][1]; else if(orderMatrix[0][2]>=orderMatrix[0][1]) if(orderMatrix[1][3]>=orderMatrix[0][1]) if(orderMatrix[2][3]<orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = orderMatrix[1][3]; else if(orderMatrix[2][2]<orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = orderMatrix[1][3]; else if(orderMatrix[1][2]<orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = orderMatrix[0][2]; else if(orderMatrix[1][2]>=orderMatrix[2][0]) if(orderMatrix[1][0]<orderMatrix[1][3]) __iv__return_expr_floorIsOrdered = orderMatrix[1][3]; else if(orderMatrix[1][0]<orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = orderMatrix[0][2]; else if(orderMatrix[1][0]<orderMatrix[1][1]) __iv__return_expr_floorIsOrdered = orderMatrix[1][1]; else if(orderMatrix[1][0]>=orderMatrix[2][2]) if(orderMatrix[1][0]>=orderMatrix[0][3]) if(orderMatrix[1][0]<orderMatrix[2][1]) __iv__return_expr_floorIsOrdered = orderMatrix[2][1]; else if(motorDir<orderMatrix[2][1]) __iv__return_expr_floorIsOrdered = orderMatrix[1][3]; else if(orderMatrix[2][2]<orderMatrix[0][3]) __iv__return_expr_floorIsOrdered = orderMatrix[1][3]; else if(orderMatrix[1][2]<orderMatrix[1][3]) __iv__return_expr_floorIsOrdered = orderMatrix[1][3]; else if(floorNum>=3) __iv__return_expr_floorIsOrdered = orderMatrix[1][3]; else if(orderMatrix[1][2]<orderMatrix[2][1]) __iv__return_expr_floorIsOrdered = orderMatrix[2][1]; else if(orderMatrix[0][2]<orderMatrix[1][3]) __iv__return_expr_floorIsOrdered = orderMatrix[1][3]; else if(motorDir<orderMatrix[1][3]) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[1][2]>=orderMatrix[2][3]) if(orderMatrix[2][0]<orderMatrix[1][3]) __iv__return_expr_floorIsOrdered = orderMatrix[1][3]; else if(orderMatrix[2][0]<orderMatrix[2][1]) __iv__return_expr_floorIsOrdered = orderMatrix[0][2]; else if(orderMatrix[2][0]<orderMatrix[2][3]) __iv__return_expr_floorIsOrdered = orderMatrix[0][2]; else if(orderMatrix[2][0]<orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = orderMatrix[0][2]; else if(orderMatrix[2][2]<orderMatrix[2][3]) __iv__return_expr_floorIsOrdered = orderMatrix[0][2]; else if(motorDir<orderMatrix[2][3]) __iv__return_expr_floorIsOrdered = 0; else if(motorDir<orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = orderMatrix[0][2]; else if(motorDir<orderMatrix[0][3]) __iv__return_expr_floorIsOrdered = orderMatrix[1][0]; else if(motorDir<orderMatrix[1][0]) __iv__return_expr_floorIsOrdered = orderMatrix[1][2]; else if(orderMatrix[1][2]>=orderMatrix[0][3]) __iv__return_expr_floorIsOrdered = orderMatrix[1][0]; else __iv__return_expr_floorIsOrdered = 0; else __iv__return_expr_floorIsOrdered = orderMatrix[1][0]; else __iv__return_expr_floorIsOrdered = orderMatrix[2][1]; else __iv__return_expr_floorIsOrdered = 0; else __iv__return_expr_floorIsOrdered = orderMatrix[2][0]; else __iv__return_expr_floorIsOrdered = orderMatrix[0][2]; else __iv__return_expr_floorIsOrdered = orderMatrix[1][3]; else __iv__return_expr_floorIsOrdered = orderMatrix[1][2]; else __iv__return_expr_floorIsOrdered = motorDir; 
	__CPROVER_assume(__iv__return_expr_floorIsOrdered == 0 || __iv__return_expr_floorIsOrdered == 1);
	return __iv__return_expr_floorIsOrdered;
}
complexity: 64
# constraints: 140

signed int __iv__isButtonPressed_stub() {
	signed int __iv__return_expr_isButtonPressed;
	if(orderMatrix[2][1]>=2) __iv__return_expr_isButtonPressed = 0; else if((-1)>=orderMatrix[2][1]) __iv__return_expr_isButtonPressed = 0; else if(1==orderMatrix[0][0]) __iv__return_expr_isButtonPressed = orderMatrix[0][0]; else if(1==orderMatrix[0][3]) __iv__return_expr_isButtonPressed = orderMatrix[0][3]; else if(1==orderMatrix[2][1]) __iv__return_expr_isButtonPressed = orderMatrix[2][1]; else if(orderMatrix[0][3]==orderMatrix[0][1]) if(orderMatrix[1][3]<orderMatrix[2][0]) __iv__return_expr_isButtonPressed = orderMatrix[2][0]; else if(orderMatrix[0][2]<(-1)) __iv__return_expr_isButtonPressed = orderMatrix[2][0]; else if(orderMatrix[1][2]<orderMatrix[2][3]) __iv__return_expr_isButtonPressed = orderMatrix[2][3]; else if(orderMatrix[1][1]<orderMatrix[1][2]) __iv__return_expr_isButtonPressed = orderMatrix[1][2]; else if(orderMatrix[1][1]<orderMatrix[2][2]) __iv__return_expr_isButtonPressed = orderMatrix[2][2]; else if(orderMatrix[1][0]<orderMatrix[2][0]) __iv__return_expr_isButtonPressed = orderMatrix[2][0]; else if(1==orderMatrix[1][0]) __iv__return_expr_isButtonPressed = orderMatrix[2][0]; else if(orderMatrix[1][1]<orderMatrix[1][3]) __iv__return_expr_isButtonPressed = orderMatrix[1][3]; else if(orderMatrix[1][1]<orderMatrix[0][2]) __iv__return_expr_isButtonPressed = orderMatrix[0][2]; else __iv__return_expr_isButtonPressed = orderMatrix[1][1]; else __iv__return_expr_isButtonPressed = orderMatrix[0][1]; 
	__CPROVER_assume(__iv__return_expr_isButtonPressed == 0 || __iv__return_expr_isButtonPressed == 1);
	return __iv__return_expr_isButtonPressed;
}
complexity: 15
# constraints: 26

run cbmc: (unwind: 610, timeout: 86400 sec)
cbmc running time: 1262.327 sec

verification results: 
property 'assert((state != 2));' is FALSE alarm.

synthesize new stub refined by counterexamples (unit timeout: 600 sec)
on each refinement:
refinement time: 30.174 sec

Iteration 22:
signed int __iv__elev_get_button_signal_stub(elev_button_type_t button, signed int floor) {
	signed int __iv__return_expr_elev_get_button_signal;
	signed int __iv__nondet_input_elev_get_button_signal_1 = __VERIFIER_nondet_signed_int();
	__iv__return_expr_elev_get_button_signal = __iv__nondet_input_elev_get_button_signal_1;
	__CPROVER_assume(__iv__return_expr_elev_get_button_signal == 0 || __iv__return_expr_elev_get_button_signal == 1);
	return __iv__return_expr_elev_get_button_signal;
}
complexity: 0
accuracy: 100.00%
coverage: 100.00%
# constraints: 2

signed int __iv__floorIsOrdered_stub(signed int floorNum, signed int motorDir) {
	signed int __iv__return_expr_floorIsOrdered;
	if((-1)>=orderMatrix[0][3]) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[2][3]>=2) __iv__return_expr_floorIsOrdered = 1; else if(3==orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[1][0]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[0][0]; else if(floorNum<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[0][0]; else if(orderMatrix[2][2]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[1][1]; else if(floorNum<orderMatrix[2][2]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(floorNum<orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = orderMatrix[0][2]; else if(floorNum<orderMatrix[1][3]) __iv__return_expr_floorIsOrdered = orderMatrix[1][3]; else if(floorNum<orderMatrix[2][0]) __iv__return_expr_floorIsOrdered = orderMatrix[1][1]; else if(floorNum<orderMatrix[1][0]) __iv__return_expr_floorIsOrdered = orderMatrix[1][1]; else if(floorNum<orderMatrix[2][1]) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[0][3]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[2][2]; else if(orderMatrix[2][0]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[1][3]; else if((-1)==motorDir) __iv__return_expr_floorIsOrdered = orderMatrix[1][1]; else if(orderMatrix[1][2]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[2][2]; else if(orderMatrix[1][3]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[2][2]; else if(orderMatrix[2][3]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[1][3]; else if(orderMatrix[0][2]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[1][3]; else if(motorDir<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[2][1]; else if(orderMatrix[0][0]==floorNum) __iv__return_expr_floorIsOrdered = orderMatrix[1][3]; else if(orderMatrix[0][1]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[1][3]; else if(orderMatrix[2][1]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[1][3]; else if(orderMatrix[1][1]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[1][3]; else if(1==orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[1][3]; else if(orderMatrix[1][1]<orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = orderMatrix[2][1]; else if(orderMatrix[1][2]<orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = orderMatrix[1][1]; else if(orderMatrix[1][0]<orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = orderMatrix[1][1]; else if(motorDir<orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = orderMatrix[1][1]; else if(orderMatrix[2][1]<orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = orderMatrix[1][1]; else if(orderMatrix[2][0]<orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = orderMatrix[2][2]; else if(orderMatrix[2][2]<orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = orderMatrix[1][1]; else if(orderMatrix[1][3]<orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = orderMatrix[2][2]; else if(orderMatrix[0][3]<orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = orderMatrix[1][3]; else if(orderMatrix[2][3]<orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = orderMatrix[1][3]; else if(orderMatrix[0][1]<orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = orderMatrix[1][3]; else if(orderMatrix[0][0]<orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = orderMatrix[1][3]; else if(2==floorNum) __iv__return_expr_floorIsOrdered = orderMatrix[1][2]; else if(orderMatrix[2][2]<orderMatrix[1][0]) __iv__return_expr_floorIsOrdered = orderMatrix[1][0]; else if(orderMatrix[2][3]<orderMatrix[1][3]) __iv__return_expr_floorIsOrdered = orderMatrix[1][3]; else if(orderMatrix[2][1]<orderMatrix[1][3]) __iv__return_expr_floorIsOrdered = orderMatrix[1][3]; else if(orderMatrix[1][1]<orderMatrix[1][3]) __iv__return_expr_floorIsOrdered = orderMatrix[1][3]; else if(orderMatrix[1][1]<orderMatrix[1][0]) __iv__return_expr_floorIsOrdered = 0; else if(motorDir<orderMatrix[1][0]) __iv__return_expr_floorIsOrdered = orderMatrix[2][2]; else if(orderMatrix[0][3]<orderMatrix[1][0]) __iv__return_expr_floorIsOrdered = orderMatrix[2][2]; else if(orderMatrix[1][0]==floorNum) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[2][3]<orderMatrix[2][2]) __iv__return_expr_floorIsOrdered = orderMatrix[2][2]; else if(orderMatrix[1][2]<orderMatrix[1][3]) __iv__return_expr_floorIsOrdered = orderMatrix[1][3]; else if(orderMatrix[0][3]<orderMatrix[2][2]) __iv__return_expr_floorIsOrdered = orderMatrix[2][2]; else if(orderMatrix[2][0]<orderMatrix[2][2]) __iv__return_expr_floorIsOrdered = orderMatrix[1][3]; else if(orderMatrix[0][1]<orderMatrix[2][2]) __iv__return_expr_floorIsOrdered = 0; else if(floorNum>=3) __iv__return_expr_floorIsOrdered = orderMatrix[1][3]; else if(orderMatrix[0][1]<orderMatrix[2][3]) __iv__return_expr_floorIsOrdered = orderMatrix[1][1]; else if(orderMatrix[2][0]<orderMatrix[2][3]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[1][1]<orderMatrix[2][2]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[1][1]<orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[2][0]<orderMatrix[2][1]) __iv__return_expr_floorIsOrdered = orderMatrix[2][1]; else if(orderMatrix[1][1]<orderMatrix[2][1]) __iv__return_expr_floorIsOrdered = orderMatrix[2][1]; else __iv__return_expr_floorIsOrdered = orderMatrix[1][1]; 
	__CPROVER_assume(__iv__return_expr_floorIsOrdered == 0 || __iv__return_expr_floorIsOrdered == 1);
	return __iv__return_expr_floorIsOrdered;
}
complexity: 58
# constraints: 150

signed int __iv__isButtonPressed_stub() {
	signed int __iv__return_expr_isButtonPressed;
	if(orderMatrix[2][1]>=2) __iv__return_expr_isButtonPressed = 0; else if((-1)>=orderMatrix[2][1]) __iv__return_expr_isButtonPressed = 0; else if(1==orderMatrix[0][0]) __iv__return_expr_isButtonPressed = orderMatrix[0][0]; else if(1==orderMatrix[0][3]) __iv__return_expr_isButtonPressed = orderMatrix[0][3]; else if(1==orderMatrix[2][1]) __iv__return_expr_isButtonPressed = orderMatrix[2][1]; else if(orderMatrix[0][3]==orderMatrix[0][1]) if(orderMatrix[1][3]<orderMatrix[2][0]) __iv__return_expr_isButtonPressed = orderMatrix[2][0]; else if(orderMatrix[0][2]<(-1)) __iv__return_expr_isButtonPressed = orderMatrix[2][0]; else if(orderMatrix[1][2]<orderMatrix[2][3]) __iv__return_expr_isButtonPressed = orderMatrix[2][3]; else if(orderMatrix[1][1]<orderMatrix[1][2]) __iv__return_expr_isButtonPressed = orderMatrix[1][2]; else if(orderMatrix[1][1]<orderMatrix[2][2]) __iv__return_expr_isButtonPressed = orderMatrix[2][2]; else if(orderMatrix[1][0]<orderMatrix[2][0]) __iv__return_expr_isButtonPressed = orderMatrix[2][0]; else if(1==orderMatrix[1][0]) __iv__return_expr_isButtonPressed = orderMatrix[2][0]; else if(orderMatrix[1][1]<orderMatrix[1][3]) __iv__return_expr_isButtonPressed = orderMatrix[1][3]; else if(orderMatrix[1][1]<orderMatrix[0][2]) __iv__return_expr_isButtonPressed = orderMatrix[0][2]; else __iv__return_expr_isButtonPressed = orderMatrix[1][1]; else __iv__return_expr_isButtonPressed = orderMatrix[0][1]; 
	__CPROVER_assume(__iv__return_expr_isButtonPressed == 0 || __iv__return_expr_isButtonPressed == 1);
	return __iv__return_expr_isButtonPressed;
}
complexity: 15
# constraints: 26

run cbmc: (unwind: 610, timeout: 86400 sec)
cbmc running time: 1282.825 sec

verification results: 
property 'assert((state != 2));' is FALSE alarm.

synthesize new stub refined by counterexamples (unit timeout: 600 sec)
on each refinement:
refinement time: 19.526 sec

Iteration 23:
signed int __iv__elev_get_button_signal_stub(elev_button_type_t button, signed int floor) {
	signed int __iv__return_expr_elev_get_button_signal;
	signed int __iv__nondet_input_elev_get_button_signal_1 = __VERIFIER_nondet_signed_int();
	__iv__return_expr_elev_get_button_signal = __iv__nondet_input_elev_get_button_signal_1;
	__CPROVER_assume(__iv__return_expr_elev_get_button_signal == 0 || __iv__return_expr_elev_get_button_signal == 1);
	return __iv__return_expr_elev_get_button_signal;
}
complexity: 0
accuracy: 100.00%
coverage: 100.00%
# constraints: 2

signed int __iv__floorIsOrdered_stub(signed int floorNum, signed int motorDir) {
	signed int __iv__return_expr_floorIsOrdered;
	if((-1)==orderMatrix[1][2]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if((-1)>=orderMatrix[0][1]) if(orderMatrix[1][2]<orderMatrix[2][3]) __iv__return_expr_floorIsOrdered = orderMatrix[2][0]; else __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[1][2]<(-1)) __iv__return_expr_floorIsOrdered = 0; else if((-1)>=orderMatrix[1][0]) __iv__return_expr_floorIsOrdered = 0; else if(3==orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = 0; else if((-1)>=orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[0][3]>=2) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[1][0]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[0][0]; else if(orderMatrix[2][2]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[0][0]; else if(orderMatrix[0][3]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[0][0]; else if(floorNum<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(floorNum<orderMatrix[2][3]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(floorNum<orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = orderMatrix[0][2]; else if(floorNum<orderMatrix[1][3]) __iv__return_expr_floorIsOrdered = orderMatrix[1][3]; else if(floorNum<orderMatrix[2][0]) __iv__return_expr_floorIsOrdered = orderMatrix[2][0]; else if(floorNum<orderMatrix[1][0]) __iv__return_expr_floorIsOrdered = orderMatrix[2][1]; else if(floorNum<orderMatrix[1][1]) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[1][2]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[0][0]; else if(orderMatrix[1][3]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[0][0]; else if(orderMatrix[2][0]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[0][0]; else if((-1)==motorDir) __iv__return_expr_floorIsOrdered = orderMatrix[1][0]; else if(orderMatrix[2][3]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[0][0]; else if(orderMatrix[0][2]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[0][0]; else if(orderMatrix[2][1]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = motorDir; else if(motorDir<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[0][0]; else if(orderMatrix[1][1]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[0][1]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[0][0]; else if(1==orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[1][2]<orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = orderMatrix[0][2]; else if(orderMatrix[1][0]<orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = orderMatrix[0][2]; else if(orderMatrix[1][1]<orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = orderMatrix[2][1]; else if(motorDir<orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = orderMatrix[0][2]; else if(orderMatrix[2][1]<orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = orderMatrix[0][2]; else if(orderMatrix[2][0]<orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = orderMatrix[0][2]; else if(orderMatrix[2][1]<orderMatrix[1][3]) __iv__return_expr_floorIsOrdered = orderMatrix[1][3]; else if(orderMatrix[2][2]<orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = orderMatrix[0][2]; else if(orderMatrix[1][3]<orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = orderMatrix[0][2]; else if(orderMatrix[0][3]<orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = orderMatrix[1][3]; else if(orderMatrix[2][3]<orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[0][1]<orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = orderMatrix[1][3]; else if(orderMatrix[0][0]<orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[2][0]<orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[2][1]<orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[0][3]>=orderMatrix[2][2]) if(orderMatrix[1][1]<orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[2][3]<orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[1][2]<orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[0][3]<orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[0][3]<orderMatrix[1][3]) __iv__return_expr_floorIsOrdered = orderMatrix[1][3]; else if(orderMatrix[2][3]<orderMatrix[1][3]) __iv__return_expr_floorIsOrdered = orderMatrix[1][3]; else if(motorDir<orderMatrix[1][3]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(motorDir<orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[1][3]<orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[1][0]<orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[0][3]<orderMatrix[2][3]) __iv__return_expr_floorIsOrdered = orderMatrix[2][3]; else if(motorDir<orderMatrix[2][1]) __iv__return_expr_floorIsOrdered = orderMatrix[2][1]; else if(orderMatrix[1][0]<orderMatrix[1][3]) __iv__return_expr_floorIsOrdered = orderMatrix[1][3]; else if(orderMatrix[1][0]<orderMatrix[2][3]) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[1][0]>=orderMatrix[2][2]) if(orderMatrix[1][0]<orderMatrix[0][3]) __iv__return_expr_floorIsOrdered = orderMatrix[2][0]; else if(orderMatrix[1][2]<orderMatrix[2][0]) __iv__return_expr_floorIsOrdered = orderMatrix[2][0]; else if(orderMatrix[1][0]<orderMatrix[2][1]) __iv__return_expr_floorIsOrdered = orderMatrix[2][0]; else if(orderMatrix[1][0]<orderMatrix[2][0]) __iv__return_expr_floorIsOrdered = orderMatrix[2][0]; else if(orderMatrix[0][3]<orderMatrix[2][1]) __iv__return_expr_floorIsOrdered = orderMatrix[2][1]; else if(orderMatrix[0][3]<orderMatrix[1][0]) __iv__return_expr_floorIsOrdered = orderMatrix[2][0]; else if(orderMatrix[2][1]<orderMatrix[2][0]) __iv__return_expr_floorIsOrdered = 0; else if(motorDir<orderMatrix[2][3]) __iv__return_expr_floorIsOrdered = orderMatrix[2][3]; else if(motorDir<orderMatrix[1][0]) __iv__return_expr_floorIsOrdered = orderMatrix[1][0]; else if(motorDir<orderMatrix[1][1]) __iv__return_expr_floorIsOrdered = orderMatrix[1][1]; else if(orderMatrix[1][0]>=orderMatrix[1][1]) __iv__return_expr_floorIsOrdered = orderMatrix[2][1]; else __iv__return_expr_floorIsOrdered = orderMatrix[1][1]; else __iv__return_expr_floorIsOrdered = orderMatrix[2][0]; else __iv__return_expr_floorIsOrdered = orderMatrix[2][2]; 
	__CPROVER_assume(__iv__return_expr_floorIsOrdered == 0 || __iv__return_expr_floorIsOrdered == 1);
	return __iv__return_expr_floorIsOrdered;
}
complexity: 71
# constraints: 158

signed int __iv__isButtonPressed_stub() {
	signed int __iv__return_expr_isButtonPressed;
	if(orderMatrix[2][1]>=2) __iv__return_expr_isButtonPressed = 0; else if((-1)>=orderMatrix[2][1]) __iv__return_expr_isButtonPressed = 0; else if(1==orderMatrix[0][0]) __iv__return_expr_isButtonPressed = orderMatrix[0][0]; else if(1==orderMatrix[0][3]) __iv__return_expr_isButtonPressed = orderMatrix[0][3]; else if(1==orderMatrix[2][1]) __iv__return_expr_isButtonPressed = orderMatrix[2][1]; else if(orderMatrix[0][3]==orderMatrix[0][1]) if(orderMatrix[1][3]<orderMatrix[2][0]) __iv__return_expr_isButtonPressed = orderMatrix[2][0]; else if(orderMatrix[0][2]<(-1)) __iv__return_expr_isButtonPressed = orderMatrix[2][0]; else if(orderMatrix[1][2]<orderMatrix[2][3]) __iv__return_expr_isButtonPressed = orderMatrix[2][3]; else if(orderMatrix[1][1]<orderMatrix[1][2]) __iv__return_expr_isButtonPressed = orderMatrix[1][2]; else if(orderMatrix[1][1]<orderMatrix[2][2]) __iv__return_expr_isButtonPressed = orderMatrix[2][2]; else if(orderMatrix[1][0]<orderMatrix[2][0]) __iv__return_expr_isButtonPressed = orderMatrix[2][0]; else if(1==orderMatrix[1][0]) __iv__return_expr_isButtonPressed = orderMatrix[2][0]; else if(orderMatrix[1][1]<orderMatrix[1][3]) __iv__return_expr_isButtonPressed = orderMatrix[1][3]; else if(orderMatrix[1][1]<orderMatrix[0][2]) __iv__return_expr_isButtonPressed = orderMatrix[0][2]; else __iv__return_expr_isButtonPressed = orderMatrix[1][1]; else __iv__return_expr_isButtonPressed = orderMatrix[0][1]; 
	__CPROVER_assume(__iv__return_expr_isButtonPressed == 0 || __iv__return_expr_isButtonPressed == 1);
	return __iv__return_expr_isButtonPressed;
}
complexity: 15
# constraints: 26

run cbmc: (unwind: 610, timeout: 86400 sec)
cbmc running time: 1878.831 sec

verification results: 
property 'assert((state != 2));' is FALSE alarm.

synthesize new stub refined by counterexamples (unit timeout: 600 sec)
on each refinement:
refinement time: 19.127 sec

Iteration 24:
signed int __iv__elev_get_button_signal_stub(elev_button_type_t button, signed int floor) {
	signed int __iv__return_expr_elev_get_button_signal;
	signed int __iv__nondet_input_elev_get_button_signal_1 = __VERIFIER_nondet_signed_int();
	__iv__return_expr_elev_get_button_signal = __iv__nondet_input_elev_get_button_signal_1;
	__CPROVER_assume(__iv__return_expr_elev_get_button_signal == 0 || __iv__return_expr_elev_get_button_signal == 1);
	return __iv__return_expr_elev_get_button_signal;
}
complexity: 0
accuracy: 100.00%
coverage: 100.00%
# constraints: 2

signed int __iv__floorIsOrdered_stub(signed int floorNum, signed int motorDir) {
	signed int __iv__return_expr_floorIsOrdered;
	if((-1)==orderMatrix[1][2]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if((-1)>=orderMatrix[0][1]) if(orderMatrix[1][2]<orderMatrix[2][3]) __iv__return_expr_floorIsOrdered = orderMatrix[2][0]; else __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[1][2]<(-1)) __iv__return_expr_floorIsOrdered = 0; else if((-1)>=orderMatrix[1][0]) __iv__return_expr_floorIsOrdered = 0; else if(3==orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = 0; else if((-1)>=orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[0][3]>=2) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[1][0]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[0][0]; else if(orderMatrix[0][3]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[0][0]; else if(orderMatrix[2][2]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[0][0]; else if(orderMatrix[0][3]<orderMatrix[2][2]) __iv__return_expr_floorIsOrdered = orderMatrix[2][2]; else if(orderMatrix[0][3]<orderMatrix[2][3]) __iv__return_expr_floorIsOrdered = orderMatrix[2][3]; else if(orderMatrix[0][3]<orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[0][3]<orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = orderMatrix[0][2]; else if(orderMatrix[0][3]<orderMatrix[1][3]) __iv__return_expr_floorIsOrdered = orderMatrix[1][3]; else if(orderMatrix[0][3]>=orderMatrix[1][0]) if(orderMatrix[0][3]<orderMatrix[2][0]) __iv__return_expr_floorIsOrdered = orderMatrix[2][0]; else if(orderMatrix[0][3]<orderMatrix[2][1]) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[0][3]>=orderMatrix[1][1]) if(1==orderMatrix[0][3]) if(orderMatrix[1][2]<orderMatrix[1][3]) __iv__return_expr_floorIsOrdered = orderMatrix[1][3]; else if(orderMatrix[2][2]<orderMatrix[1][3]) __iv__return_expr_floorIsOrdered = orderMatrix[1][3]; else if(orderMatrix[2][2]<orderMatrix[2][3]) __iv__return_expr_floorIsOrdered = orderMatrix[0][2]; else if(orderMatrix[2][2]<orderMatrix[2][0]) __iv__return_expr_floorIsOrdered = orderMatrix[2][0]; else if(orderMatrix[2][2]<orderMatrix[2][1]) __iv__return_expr_floorIsOrdered = orderMatrix[2][1]; else if(orderMatrix[2][2]<motorDir) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[2][2]<orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[2][2]<orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = orderMatrix[0][2]; else if(orderMatrix[1][2]<orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[1][2]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[0][0]; else if(orderMatrix[1][2]<orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[1][2]<orderMatrix[2][3]) __iv__return_expr_floorIsOrdered = orderMatrix[2][3]; else if(orderMatrix[1][2]<orderMatrix[2][0]) __iv__return_expr_floorIsOrdered = orderMatrix[2][0]; else if(orderMatrix[1][2]<motorDir) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[1][2]==orderMatrix[0][3]) if(orderMatrix[1][0]<orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = orderMatrix[1][3]; else if(orderMatrix[1][0]<motorDir) __iv__return_expr_floorIsOrdered = orderMatrix[2][3]; else if(orderMatrix[1][0]<orderMatrix[1][3]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[1][0]<orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[1][0]<orderMatrix[2][3]) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[2][0]<motorDir) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[1][3]<motorDir) __iv__return_expr_floorIsOrdered = orderMatrix[2][0]; else if(floorNum<orderMatrix[2][1]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(floorNum<orderMatrix[1][3]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(floorNum<orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[2][0]<orderMatrix[1][3]) __iv__return_expr_floorIsOrdered = orderMatrix[1][3]; else if(orderMatrix[2][0]<orderMatrix[2][1]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[2][0]<orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = orderMatrix[0][2]; else if(orderMatrix[2][0]<orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[2][0]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[0][0]; else if(orderMatrix[1][3]<orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[1][3]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[0][0]; else if(orderMatrix[1][3]<orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = orderMatrix[0][2]; else if(orderMatrix[1][3]>=1) if(orderMatrix[0][0]<orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(floorNum>=3) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[0][0]<orderMatrix[2][1]) __iv__return_expr_floorIsOrdered = orderMatrix[1][3]; else if(orderMatrix[0][0]>=orderMatrix[1][1]) if(1==orderMatrix[0][0]) if(orderMatrix[2][1]<orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[2][1]<motorDir) __iv__return_expr_floorIsOrdered = orderMatrix[0][0]; else if(orderMatrix[1][1]<orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[0][1]==floorNum) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[2][3]<orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[0][2]<orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[0][2]>=orderMatrix[1][1]) if(orderMatrix[0][2]<orderMatrix[1][3]) __iv__return_expr_floorIsOrdered = orderMatrix[0][0]; else if(orderMatrix[1][1]<motorDir) __iv__return_expr_floorIsOrdered = orderMatrix[0][0]; else if(orderMatrix[1][1]<orderMatrix[2][1]) __iv__return_expr_floorIsOrdered = orderMatrix[0][0]; else __iv__return_expr_floorIsOrdered = orderMatrix[1][1]; else __iv__return_expr_floorIsOrdered = orderMatrix[0][0]; else __iv__return_expr_floorIsOrdered = 0; else __iv__return_expr_floorIsOrdered = orderMatrix[1][3]; else __iv__return_expr_floorIsOrdered = 0; else __iv__return_expr_floorIsOrdered = orderMatrix[0][3]; else __iv__return_expr_floorIsOrdered = 0; else __iv__return_expr_floorIsOrdered = orderMatrix[1][1]; else __iv__return_expr_floorIsOrdered = orderMatrix[1][0]; 
	__CPROVER_assume(__iv__return_expr_floorIsOrdered == 0 || __iv__return_expr_floorIsOrdered == 1);
	return __iv__return_expr_floorIsOrdered;
}
complexity: 70
# constraints: 164

signed int __iv__isButtonPressed_stub() {
	signed int __iv__return_expr_isButtonPressed;
	if(orderMatrix[2][1]>=2) __iv__return_expr_isButtonPressed = 0; else if((-1)>=orderMatrix[2][1]) __iv__return_expr_isButtonPressed = 0; else if(1==orderMatrix[0][0]) __iv__return_expr_isButtonPressed = orderMatrix[0][0]; else if(orderMatrix[1][1]<orderMatrix[1][2]) __iv__return_expr_isButtonPressed = orderMatrix[1][2]; else if(1==orderMatrix[0][3]) __iv__return_expr_isButtonPressed = orderMatrix[0][3]; else if(orderMatrix[1][1]>=2) __iv__return_expr_isButtonPressed = orderMatrix[2][0]; else if(1==orderMatrix[2][3]) __iv__return_expr_isButtonPressed = orderMatrix[2][3]; else if(1==orderMatrix[2][2]) __iv__return_expr_isButtonPressed = orderMatrix[2][2]; else if(orderMatrix[2][3]<orderMatrix[0][0]) __iv__return_expr_isButtonPressed = orderMatrix[2][1]; else if(1==orderMatrix[2][1]) __iv__return_expr_isButtonPressed = orderMatrix[2][1]; else if(orderMatrix[2][0]<orderMatrix[0][1]) __iv__return_expr_isButtonPressed = orderMatrix[0][1]; else if(orderMatrix[1][3]<orderMatrix[2][0]) __iv__return_expr_isButtonPressed = orderMatrix[2][0]; else if(1==orderMatrix[0][1]) __iv__return_expr_isButtonPressed = orderMatrix[2][0]; else if(orderMatrix[1][0]<orderMatrix[2][0]) __iv__return_expr_isButtonPressed = orderMatrix[2][0]; else if(1==orderMatrix[2][0]) __iv__return_expr_isButtonPressed = orderMatrix[2][0]; else if(orderMatrix[1][1]<orderMatrix[1][3]) __iv__return_expr_isButtonPressed = orderMatrix[1][3]; else if(orderMatrix[1][1]<orderMatrix[0][2]) __iv__return_expr_isButtonPressed = orderMatrix[0][2]; else __iv__return_expr_isButtonPressed = orderMatrix[1][1]; 
	__CPROVER_assume(__iv__return_expr_isButtonPressed == 0 || __iv__return_expr_isButtonPressed == 1);
	return __iv__return_expr_isButtonPressed;
}
complexity: 17
# constraints: 28

run cbmc: (unwind: 610, timeout: 86400 sec)
cbmc running time: 1745.506 sec

verification results: 
property 'assert((state != 2));' is FALSE alarm.

synthesize new stub refined by counterexamples (unit timeout: 600 sec)
on each refinement:
refinement time: 66.684 sec

Iteration 25:
signed int __iv__elev_get_button_signal_stub(elev_button_type_t button, signed int floor) {
	signed int __iv__return_expr_elev_get_button_signal;
	signed int __iv__nondet_input_elev_get_button_signal_1 = __VERIFIER_nondet_signed_int();
	__iv__return_expr_elev_get_button_signal = __iv__nondet_input_elev_get_button_signal_1;
	__CPROVER_assume(__iv__return_expr_elev_get_button_signal == 0 || __iv__return_expr_elev_get_button_signal == 1);
	return __iv__return_expr_elev_get_button_signal;
}
complexity: 0
accuracy: 100.00%
coverage: 100.00%
# constraints: 2

signed int __iv__floorIsOrdered_stub(signed int floorNum, signed int motorDir) {
	signed int __iv__return_expr_floorIsOrdered;
	if((-1)==orderMatrix[1][2]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(motorDir>=2) __iv__return_expr_floorIsOrdered = 0; else if((-1)>=orderMatrix[2][1]) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[1][2]<(-1)) __iv__return_expr_floorIsOrdered = 0; else if((-1)>=orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = orderMatrix[2][0]; else if((-1)>=orderMatrix[1][0]) __iv__return_expr_floorIsOrdered = 0; else if(3==orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = 0; else if((-1)>=orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[0][3]>=2) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[1][0]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[0][0]; else if(orderMatrix[2][2]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[0][0]; else if(floorNum<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(floorNum<orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(floorNum<orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = orderMatrix[1][2]; else if(floorNum<orderMatrix[2][3]) __iv__return_expr_floorIsOrdered = orderMatrix[2][3]; else if(floorNum<orderMatrix[2][2]) __iv__return_expr_floorIsOrdered = orderMatrix[1][2]; else if(floorNum<orderMatrix[1][3]) __iv__return_expr_floorIsOrdered = orderMatrix[1][3]; else if(floorNum<orderMatrix[2][0]) __iv__return_expr_floorIsOrdered = orderMatrix[2][0]; else if(floorNum<orderMatrix[1][0]) __iv__return_expr_floorIsOrdered = orderMatrix[2][1]; else if(floorNum<orderMatrix[1][1]) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[0][3]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[0][0]; else if(orderMatrix[1][2]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[0][0]; else if(orderMatrix[1][2]>=orderMatrix[0][2]) if(orderMatrix[1][0]<orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = orderMatrix[1][2]; else if(orderMatrix[2][2]<orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = orderMatrix[1][2]; else if(orderMatrix[2][2]<orderMatrix[0][3]) __iv__return_expr_floorIsOrdered = orderMatrix[0][3]; else if(orderMatrix[2][2]<orderMatrix[2][3]) __iv__return_expr_floorIsOrdered = orderMatrix[2][3]; else if(orderMatrix[2][2]<orderMatrix[1][3]) __iv__return_expr_floorIsOrdered = orderMatrix[1][3]; else if(orderMatrix[1][0]<orderMatrix[1][3]) __iv__return_expr_floorIsOrdered = orderMatrix[1][3]; else if(orderMatrix[0][3]<orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[1][2]<orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[1][0]<orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[0][0]<orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[1][2]>=orderMatrix[2][0]) if(orderMatrix[1][0]<orderMatrix[0][3]) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[1][0]<orderMatrix[2][3]) __iv__return_expr_floorIsOrdered = orderMatrix[2][3]; else if(orderMatrix[1][0]<orderMatrix[2][2]) __iv__return_expr_floorIsOrdered = orderMatrix[2][2]; else if(orderMatrix[1][0]<orderMatrix[1][1]) __iv__return_expr_floorIsOrdered = orderMatrix[1][1]; else if(orderMatrix[1][0]<orderMatrix[2][1]) __iv__return_expr_floorIsOrdered = orderMatrix[1][2]; else if(orderMatrix[1][0]<orderMatrix[2][0]) __iv__return_expr_floorIsOrdered = orderMatrix[1][2]; else if(orderMatrix[2][2]<orderMatrix[2][1]) __iv__return_expr_floorIsOrdered = orderMatrix[2][1]; else if(orderMatrix[2][2]<orderMatrix[2][0]) __iv__return_expr_floorIsOrdered = orderMatrix[1][2]; else if(orderMatrix[2][2]<orderMatrix[1][0]) __iv__return_expr_floorIsOrdered = orderMatrix[1][2]; else if(orderMatrix[2][2]<motorDir) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[1][2]>=orderMatrix[2][1]) if(orderMatrix[1][2]<orderMatrix[1][3]) __iv__return_expr_floorIsOrdered = orderMatrix[1][3]; else if(orderMatrix[1][2]<orderMatrix[2][3]) __iv__return_expr_floorIsOrdered = orderMatrix[2][3]; else if(orderMatrix[0][3]<orderMatrix[1][3]) __iv__return_expr_floorIsOrdered = orderMatrix[1][3]; else if(orderMatrix[0][3]<orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = orderMatrix[2][3]; else if(orderMatrix[0][3]<orderMatrix[1][0]) __iv__return_expr_floorIsOrdered = orderMatrix[1][0]; else if(orderMatrix[1][2]>=motorDir) if(orderMatrix[1][2]==orderMatrix[1][0]) if(orderMatrix[2][0]<motorDir) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[2][0]<orderMatrix[1][3]) __iv__return_expr_floorIsOrdered = orderMatrix[1][3]; else if(orderMatrix[2][0]<orderMatrix[2][1]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[2][0]<orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = orderMatrix[1][2]; else if(orderMatrix[2][0]<orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[2][0]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[0][0]; else if(orderMatrix[1][3]<orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[1][3]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[0][0]; else if(floorNum>=3) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[2][1]<orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[1][1]<orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[0][1]==floorNum) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[2][3]<orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[2][3]>=motorDir) if(orderMatrix[0][2]<orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[0][2]<orderMatrix[1][1]) __iv__return_expr_floorIsOrdered = orderMatrix[0][0]; else if(orderMatrix[0][2]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[0][0]; else if(orderMatrix[0][2]<motorDir) __iv__return_expr_floorIsOrdered = orderMatrix[2][3]; else if(orderMatrix[0][2]<orderMatrix[1][3]) __iv__return_expr_floorIsOrdered = orderMatrix[1][3]; else if(orderMatrix[0][2]<orderMatrix[2][3]) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[1][3]>=motorDir) if(orderMatrix[1][3]<orderMatrix[2][3]) __iv__return_expr_floorIsOrdered = orderMatrix[2][3]; else if(orderMatrix[1][3]>=1) if(orderMatrix[0][0]>=motorDir) if(1==orderMatrix[0][0]) if(motorDir<floorNum) if(orderMatrix[2][3]<orderMatrix[1][3]) __iv__return_expr_floorIsOrdered = orderMatrix[0][0]; else if(orderMatrix[2][1]<floorNum) if(0==motorDir) __iv__return_expr_floorIsOrdered = 0; else __iv__return_expr_floorIsOrdered = orderMatrix[0][0]; else __iv__return_expr_floorIsOrdered = orderMatrix[0][0]; else __iv__return_expr_floorIsOrdered = orderMatrix[0][0]; else __iv__return_expr_floorIsOrdered = 0; else __iv__return_expr_floorIsOrdered = orderMatrix[1][3]; else __iv__return_expr_floorIsOrdered = orderMatrix[1][2]; else __iv__return_expr_floorIsOrdered = orderMatrix[2][3]; else __iv__return_expr_floorIsOrdered = orderMatrix[1][2]; else __iv__return_expr_floorIsOrdered = orderMatrix[1][0]; else __iv__return_expr_floorIsOrdered = 0; else __iv__return_expr_floorIsOrdered = orderMatrix[1][3]; else __iv__return_expr_floorIsOrdered = orderMatrix[2][0]; else __iv__return_expr_floorIsOrdered = orderMatrix[0][2]; 
	__CPROVER_assume(__iv__return_expr_floorIsOrdered == 0 || __iv__return_expr_floorIsOrdered == 1);
	return __iv__return_expr_floorIsOrdered;
}
complexity: 81
# constraints: 166

signed int __iv__isButtonPressed_stub() {
	signed int __iv__return_expr_isButtonPressed;
	if(orderMatrix[2][1]>=2) __iv__return_expr_isButtonPressed = 0; else if((-1)>=orderMatrix[2][1]) __iv__return_expr_isButtonPressed = 0; else if(1==orderMatrix[0][0]) __iv__return_expr_isButtonPressed = orderMatrix[0][0]; else if(orderMatrix[1][1]<orderMatrix[1][2]) __iv__return_expr_isButtonPressed = orderMatrix[1][2]; else if(1==orderMatrix[0][3]) __iv__return_expr_isButtonPressed = orderMatrix[0][3]; else if(orderMatrix[1][1]>=2) __iv__return_expr_isButtonPressed = orderMatrix[2][0]; else if(1==orderMatrix[2][3]) __iv__return_expr_isButtonPressed = orderMatrix[2][3]; else if(1==orderMatrix[2][2]) __iv__return_expr_isButtonPressed = orderMatrix[2][2]; else if(orderMatrix[2][3]<orderMatrix[0][0]) __iv__return_expr_isButtonPressed = orderMatrix[2][1]; else if(1==orderMatrix[2][1]) __iv__return_expr_isButtonPressed = orderMatrix[2][1]; else if(orderMatrix[2][0]<orderMatrix[0][1]) __iv__return_expr_isButtonPressed = orderMatrix[0][1]; else if(orderMatrix[1][3]<orderMatrix[2][0]) __iv__return_expr_isButtonPressed = orderMatrix[2][0]; else if(1==orderMatrix[0][1]) __iv__return_expr_isButtonPressed = orderMatrix[2][0]; else if(orderMatrix[1][0]<orderMatrix[2][0]) __iv__return_expr_isButtonPressed = orderMatrix[2][0]; else if(1==orderMatrix[2][0]) __iv__return_expr_isButtonPressed = orderMatrix[2][0]; else if(orderMatrix[1][1]<orderMatrix[1][3]) __iv__return_expr_isButtonPressed = orderMatrix[1][3]; else if(orderMatrix[1][1]<orderMatrix[0][2]) __iv__return_expr_isButtonPressed = orderMatrix[0][2]; else __iv__return_expr_isButtonPressed = orderMatrix[1][1]; 
	__CPROVER_assume(__iv__return_expr_isButtonPressed == 0 || __iv__return_expr_isButtonPressed == 1);
	return __iv__return_expr_isButtonPressed;
}
complexity: 17
# constraints: 28

run cbmc: (unwind: 610, timeout: 86400 sec)
cbmc running time: 1407.961 sec

verification results: 
property 'assert((state != 2));' is FALSE alarm.

synthesize new stub refined by counterexamples (unit timeout: 600 sec)
on each refinement:
refinement time: 74.821 sec

Iteration 26:
signed int __iv__elev_get_button_signal_stub(elev_button_type_t button, signed int floor) {
	signed int __iv__return_expr_elev_get_button_signal;
	signed int __iv__nondet_input_elev_get_button_signal_1 = __VERIFIER_nondet_signed_int();
	__iv__return_expr_elev_get_button_signal = __iv__nondet_input_elev_get_button_signal_1;
	__CPROVER_assume(__iv__return_expr_elev_get_button_signal == 0 || __iv__return_expr_elev_get_button_signal == 1);
	return __iv__return_expr_elev_get_button_signal;
}
complexity: 0
accuracy: 100.00%
coverage: 100.00%
# constraints: 2

signed int __iv__floorIsOrdered_stub(signed int floorNum, signed int motorDir) {
	signed int __iv__return_expr_floorIsOrdered;
	if(motorDir>=2) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[1][2]<(-1)) __iv__return_expr_floorIsOrdered = 0; else if((-1)==orderMatrix[1][2]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if((-1)>=orderMatrix[2][1]) __iv__return_expr_floorIsOrdered = 0; else if((-1)>=orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = orderMatrix[2][0]; else if((-1)>=orderMatrix[1][0]) __iv__return_expr_floorIsOrdered = 0; else if(3==orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = 0; else if((-1)>=orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[0][3]>=2) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[1][0]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[0][0]; else if(orderMatrix[2][2]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[0][0]; else if(orderMatrix[0][3]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[0][0]; else if(floorNum<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(floorNum<orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(floorNum<orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = orderMatrix[0][2]; else if(floorNum<orderMatrix[2][3]) __iv__return_expr_floorIsOrdered = orderMatrix[2][3]; else if(floorNum<orderMatrix[2][2]) __iv__return_expr_floorIsOrdered = orderMatrix[1][0]; else if(floorNum<orderMatrix[1][3]) __iv__return_expr_floorIsOrdered = orderMatrix[1][3]; else if(floorNum<orderMatrix[2][0]) __iv__return_expr_floorIsOrdered = orderMatrix[2][0]; else if(floorNum<orderMatrix[1][0]) __iv__return_expr_floorIsOrdered = orderMatrix[2][1]; else if(floorNum<orderMatrix[1][1]) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[1][2]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[0][0]; else if(orderMatrix[2][3]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[0][0]; else if(orderMatrix[0][2]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[0][0]; else if(orderMatrix[2][0]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[0][0]; else if(orderMatrix[1][3]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[0][0]; else if((-1)==motorDir) __iv__return_expr_floorIsOrdered = orderMatrix[1][0]; else if(floorNum>=3) __iv__return_expr_floorIsOrdered = orderMatrix[1][3]; else if(orderMatrix[2][2]<orderMatrix[1][3]) __iv__return_expr_floorIsOrdered = orderMatrix[1][3]; else if(orderMatrix[2][3]<orderMatrix[1][3]) __iv__return_expr_floorIsOrdered = orderMatrix[1][3]; else if(orderMatrix[1][0]<orderMatrix[1][3]) __iv__return_expr_floorIsOrdered = orderMatrix[1][3]; else if(orderMatrix[1][0]<orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = orderMatrix[0][2]; else if(orderMatrix[1][2]<orderMatrix[1][3]) __iv__return_expr_floorIsOrdered = orderMatrix[1][3]; else if(orderMatrix[0][2]<orderMatrix[1][3]) __iv__return_expr_floorIsOrdered = orderMatrix[1][3]; else if(orderMatrix[2][0]<orderMatrix[1][3]) __iv__return_expr_floorIsOrdered = orderMatrix[1][3]; else if(orderMatrix[0][3]<orderMatrix[1][3]) __iv__return_expr_floorIsOrdered = orderMatrix[1][3]; else if(orderMatrix[1][2]<orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = orderMatrix[0][2]; else if(orderMatrix[2][3]<orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = orderMatrix[0][2]; else if(orderMatrix[2][0]<orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = orderMatrix[0][2]; else if(orderMatrix[0][3]<orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = orderMatrix[0][2]; else if(orderMatrix[2][2]<orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = orderMatrix[0][2]; else if(orderMatrix[1][3]<orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = orderMatrix[0][2]; else if(orderMatrix[2][2]<orderMatrix[2][3]) __iv__return_expr_floorIsOrdered = orderMatrix[2][3]; else if(orderMatrix[0][3]<orderMatrix[2][3]) __iv__return_expr_floorIsOrdered = orderMatrix[2][3]; else if(orderMatrix[0][3]<orderMatrix[2][2]) __iv__return_expr_floorIsOrdered = orderMatrix[2][2]; else if(orderMatrix[2][0]<orderMatrix[2][3]) __iv__return_expr_floorIsOrdered = orderMatrix[2][3]; else if(orderMatrix[1][2]<orderMatrix[2][3]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[1][2]<orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[0][3]<orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[2][3]<orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[0][3]<orderMatrix[2][1]) __iv__return_expr_floorIsOrdered = orderMatrix[2][1]; else if(orderMatrix[2][0]<orderMatrix[2][1]) __iv__return_expr_floorIsOrdered = orderMatrix[2][1]; else if(orderMatrix[2][2]<orderMatrix[0][3]) __iv__return_expr_floorIsOrdered = orderMatrix[2][0]; else if(orderMatrix[1][2]<orderMatrix[2][1]) __iv__return_expr_floorIsOrdered = orderMatrix[2][0]; else if(orderMatrix[1][2]<orderMatrix[2][0]) __iv__return_expr_floorIsOrdered = orderMatrix[2][0]; else if(orderMatrix[2][2]<orderMatrix[2][0]) __iv__return_expr_floorIsOrdered = orderMatrix[2][0]; else if(orderMatrix[0][3]<orderMatrix[1][0]) __iv__return_expr_floorIsOrdered = orderMatrix[1][0]; else if(orderMatrix[2][2]<orderMatrix[1][1]) __iv__return_expr_floorIsOrdered = orderMatrix[1][1]; else if(orderMatrix[1][2]<motorDir) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[1][2]<orderMatrix[1][1]) __iv__return_expr_floorIsOrdered = orderMatrix[1][0]; else if(orderMatrix[2][0]<orderMatrix[0][3]) __iv__return_expr_floorIsOrdered = orderMatrix[1][0]; else if(orderMatrix[2][3]<orderMatrix[2][0]) __iv__return_expr_floorIsOrdered = orderMatrix[2][0]; else if(motorDir<orderMatrix[1][1]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[1][3]<orderMatrix[2][1]) __iv__return_expr_floorIsOrdered = orderMatrix[2][3]; else if(orderMatrix[1][3]<orderMatrix[1][0]) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[1][0]<orderMatrix[2][3]) __iv__return_expr_floorIsOrdered = 0; else if(motorDir<orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[1][1]<orderMatrix[2][1]) __iv__return_expr_floorIsOrdered = orderMatrix[0][0]; else if(motorDir<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = 0; else if(motorDir<orderMatrix[1][3]) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[1][1]<orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[1][1]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[0][0]; else if(orderMatrix[0][0]<orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[0][0]<orderMatrix[1][3]) __iv__return_expr_floorIsOrdered = orderMatrix[1][3]; else if(orderMatrix[2][1]==floorNum) __iv__return_expr_floorIsOrdered = orderMatrix[0][0]; else if(orderMatrix[1][2]==floorNum) __iv__return_expr_floorIsOrdered = 0; else __iv__return_expr_floorIsOrdered = orderMatrix[1][2]; 
	__CPROVER_assume(__iv__return_expr_floorIsOrdered == 0 || __iv__return_expr_floorIsOrdered == 1);
	return __iv__return_expr_floorIsOrdered;
}
complexity: 76
# constraints: 170

signed int __iv__isButtonPressed_stub() {
	signed int __iv__return_expr_isButtonPressed;
	if(orderMatrix[2][1]>=2) __iv__return_expr_isButtonPressed = 0; else if((-1)>=orderMatrix[2][1]) __iv__return_expr_isButtonPressed = 0; else if(1==orderMatrix[0][0]) __iv__return_expr_isButtonPressed = orderMatrix[0][0]; else if(orderMatrix[1][1]<orderMatrix[1][2]) __iv__return_expr_isButtonPressed = orderMatrix[1][2]; else if(1==orderMatrix[0][3]) __iv__return_expr_isButtonPressed = orderMatrix[0][3]; else if(orderMatrix[1][1]>=2) __iv__return_expr_isButtonPressed = orderMatrix[2][0]; else if(1==orderMatrix[2][3]) __iv__return_expr_isButtonPressed = orderMatrix[2][3]; else if(1==orderMatrix[2][2]) __iv__return_expr_isButtonPressed = orderMatrix[2][2]; else if(orderMatrix[2][3]<orderMatrix[0][0]) __iv__return_expr_isButtonPressed = orderMatrix[2][1]; else if(1==orderMatrix[2][1]) __iv__return_expr_isButtonPressed = orderMatrix[2][1]; else if(orderMatrix[2][0]<orderMatrix[0][1]) __iv__return_expr_isButtonPressed = orderMatrix[0][1]; else if(orderMatrix[1][3]<orderMatrix[2][0]) __iv__return_expr_isButtonPressed = orderMatrix[2][0]; else if(1==orderMatrix[0][1]) __iv__return_expr_isButtonPressed = orderMatrix[2][0]; else if(orderMatrix[1][0]<orderMatrix[2][0]) __iv__return_expr_isButtonPressed = orderMatrix[2][0]; else if(1==orderMatrix[2][0]) __iv__return_expr_isButtonPressed = orderMatrix[2][0]; else if(orderMatrix[1][1]<orderMatrix[1][3]) __iv__return_expr_isButtonPressed = orderMatrix[1][3]; else if(orderMatrix[1][1]<orderMatrix[0][2]) __iv__return_expr_isButtonPressed = orderMatrix[0][2]; else __iv__return_expr_isButtonPressed = orderMatrix[1][1]; 
	__CPROVER_assume(__iv__return_expr_isButtonPressed == 0 || __iv__return_expr_isButtonPressed == 1);
	return __iv__return_expr_isButtonPressed;
}
complexity: 17
# constraints: 28

run cbmc: (unwind: 610, timeout: 86400 sec)
cbmc running time: 1559.83 sec

verification results: 
property 'assert((state != 2));' is FALSE alarm.

synthesize new stub refined by counterexamples (unit timeout: 600 sec)
on each refinement:
refinement time: 51.63 sec

Iteration 27:
signed int __iv__elev_get_button_signal_stub(elev_button_type_t button, signed int floor) {
	signed int __iv__return_expr_elev_get_button_signal;
	signed int __iv__nondet_input_elev_get_button_signal_1 = __VERIFIER_nondet_signed_int();
	__iv__return_expr_elev_get_button_signal = __iv__nondet_input_elev_get_button_signal_1;
	__CPROVER_assume(__iv__return_expr_elev_get_button_signal == 0 || __iv__return_expr_elev_get_button_signal == 1);
	return __iv__return_expr_elev_get_button_signal;
}
complexity: 0
accuracy: 100.00%
coverage: 100.00%
# constraints: 2

signed int __iv__floorIsOrdered_stub(signed int floorNum, signed int motorDir) {
	signed int __iv__return_expr_floorIsOrdered;
	if((-1)==orderMatrix[1][2]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(motorDir>=2) __iv__return_expr_floorIsOrdered = 0; else if((-1)>=orderMatrix[2][1]) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[1][2]<(-1)) __iv__return_expr_floorIsOrdered = 0; else if((-1)>=orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = orderMatrix[2][0]; else if((-1)>=orderMatrix[1][0]) __iv__return_expr_floorIsOrdered = 0; else if(3==orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = 0; else if((-1)>=orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[0][3]>=2) __iv__return_expr_floorIsOrdered = motorDir; else if(floorNum<orderMatrix[2][0]) __iv__return_expr_floorIsOrdered = orderMatrix[2][0]; else if(orderMatrix[1][0]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[0][0]; else if(floorNum<orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(floorNum<orderMatrix[1][3]) __iv__return_expr_floorIsOrdered = orderMatrix[1][3]; else if(floorNum<orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = orderMatrix[0][2]; else if(floorNum<orderMatrix[2][3]) __iv__return_expr_floorIsOrdered = orderMatrix[2][3]; else if(floorNum<orderMatrix[2][2]) __iv__return_expr_floorIsOrdered = orderMatrix[2][2]; else if(floorNum>=orderMatrix[1][0]) if(floorNum<orderMatrix[1][1]) __iv__return_expr_floorIsOrdered = motorDir; else if(orderMatrix[2][2]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[0][0]; else if(orderMatrix[0][3]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[0][0]; else if(orderMatrix[2][0]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[0][0]; else if(orderMatrix[1][2]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[0][0]; else if(orderMatrix[1][3]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[0][0]; else if(orderMatrix[0][2]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = motorDir; else if(orderMatrix[2][3]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[0][0]; else if(floorNum>=3) __iv__return_expr_floorIsOrdered = orderMatrix[1][3]; else if(orderMatrix[2][2]<orderMatrix[1][3]) __iv__return_expr_floorIsOrdered = orderMatrix[1][3]; else if(orderMatrix[0][3]<orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = motorDir; else if(orderMatrix[2][0]<orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[2][2]<orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = motorDir; else if(orderMatrix[2][3]<orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = motorDir; else if(orderMatrix[1][2]<orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = motorDir; else if(orderMatrix[1][3]<orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[1][0]<orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[2][1]<orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = motorDir; else if(orderMatrix[0][0]<orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = motorDir; else if(orderMatrix[0][1]<floorNum) if(orderMatrix[1][1]<orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = motorDir; else if(1==orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = motorDir; else if(orderMatrix[1][0]<orderMatrix[1][3]) __iv__return_expr_floorIsOrdered = orderMatrix[1][3]; else if(orderMatrix[1][0]<orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = orderMatrix[0][2]; else if(orderMatrix[1][2]<orderMatrix[1][3]) __iv__return_expr_floorIsOrdered = orderMatrix[1][3]; else if(orderMatrix[1][2]<orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = orderMatrix[0][2]; else if(orderMatrix[2][3]<orderMatrix[1][3]) __iv__return_expr_floorIsOrdered = orderMatrix[1][3]; else if(orderMatrix[2][3]<orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = orderMatrix[0][2]; else if(orderMatrix[0][2]<orderMatrix[1][3]) __iv__return_expr_floorIsOrdered = orderMatrix[1][3]; else if(orderMatrix[2][0]<orderMatrix[1][3]) __iv__return_expr_floorIsOrdered = motorDir; else if(orderMatrix[0][3]<orderMatrix[1][3]) __iv__return_expr_floorIsOrdered = motorDir; else if(orderMatrix[2][0]<orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = orderMatrix[0][2]; else if(orderMatrix[0][3]<orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = orderMatrix[0][2]; else if(orderMatrix[2][2]<orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = motorDir; else if(orderMatrix[2][2]<orderMatrix[2][3]) __iv__return_expr_floorIsOrdered = motorDir; else if(orderMatrix[1][2]<orderMatrix[2][3]) __iv__return_expr_floorIsOrdered = orderMatrix[2][3]; else if(orderMatrix[0][3]<orderMatrix[2][3]) __iv__return_expr_floorIsOrdered = motorDir; else if(orderMatrix[2][0]<orderMatrix[2][3]) __iv__return_expr_floorIsOrdered = motorDir; else if(orderMatrix[1][0]<orderMatrix[2][3]) __iv__return_expr_floorIsOrdered = motorDir; else if(orderMatrix[0][3]<orderMatrix[2][2]) __iv__return_expr_floorIsOrdered = motorDir; else if(orderMatrix[1][0]<orderMatrix[2][2]) __iv__return_expr_floorIsOrdered = motorDir; else if(orderMatrix[1][0]<orderMatrix[1][1]) __iv__return_expr_floorIsOrdered = orderMatrix[1][1]; else if(orderMatrix[1][2]<orderMatrix[2][1]) __iv__return_expr_floorIsOrdered = motorDir; else if(orderMatrix[1][2]<orderMatrix[2][0]) __iv__return_expr_floorIsOrdered = orderMatrix[2][0]; else if(orderMatrix[2][2]<orderMatrix[0][3]) __iv__return_expr_floorIsOrdered = orderMatrix[2][1]; else if(orderMatrix[1][2]<motorDir) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[1][2]<orderMatrix[1][1]) __iv__return_expr_floorIsOrdered = orderMatrix[0][3]; else if(orderMatrix[2][0]<orderMatrix[0][3]) __iv__return_expr_floorIsOrdered = motorDir; else if(orderMatrix[2][3]<orderMatrix[0][3]) __iv__return_expr_floorIsOrdered = motorDir; else if(orderMatrix[2][2]<orderMatrix[2][1]) __iv__return_expr_floorIsOrdered = orderMatrix[2][0]; else if(orderMatrix[1][0]<orderMatrix[2][0]) __iv__return_expr_floorIsOrdered = motorDir; else if(orderMatrix[2][2]<orderMatrix[2][0]) __iv__return_expr_floorIsOrdered = orderMatrix[2][0]; else if(orderMatrix[0][2]<orderMatrix[2][1]) __iv__return_expr_floorIsOrdered = motorDir; else if(orderMatrix[0][2]<orderMatrix[2][3]) __iv__return_expr_floorIsOrdered = motorDir; else if(orderMatrix[1][3]<orderMatrix[2][1]) __iv__return_expr_floorIsOrdered = motorDir; else if(orderMatrix[1][3]<orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = orderMatrix[0][2]; else if(orderMatrix[0][0]<orderMatrix[2][1]) __iv__return_expr_floorIsOrdered = motorDir; else if(orderMatrix[1][1]<orderMatrix[2][1]) __iv__return_expr_floorIsOrdered = orderMatrix[0][0]; else if(motorDir>=orderMatrix[2][1]) if(motorDir>=orderMatrix[0][0]) if(motorDir>=orderMatrix[2][0]) if(motorDir>=orderMatrix[1][1]) if(orderMatrix[2][2]<orderMatrix[1][1]) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[2][0]==orderMatrix[1][0]) if(orderMatrix[1][1]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = motorDir; else if(orderMatrix[0][0]<orderMatrix[1][3]) __iv__return_expr_floorIsOrdered = motorDir; else if(orderMatrix[2][1]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = motorDir; else if(2==floorNum) __iv__return_expr_floorIsOrdered = motorDir; else __iv__return_expr_floorIsOrdered = orderMatrix[0][0]; else __iv__return_expr_floorIsOrdered = motorDir; else __iv__return_expr_floorIsOrdered = orderMatrix[1][1]; else __iv__return_expr_floorIsOrdered = motorDir; else __iv__return_expr_floorIsOrdered = motorDir; else __iv__return_expr_floorIsOrdered = orderMatrix[1][1]; else __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else __iv__return_expr_floorIsOrdered = orderMatrix[1][0]; 
	__CPROVER_assume(__iv__return_expr_floorIsOrdered == 0 || __iv__return_expr_floorIsOrdered == 1);
	return __iv__return_expr_floorIsOrdered;
}
complexity: 85
# constraints: 176

signed int __iv__isButtonPressed_stub() {
	signed int __iv__return_expr_isButtonPressed;
	if(orderMatrix[2][1]>=2) __iv__return_expr_isButtonPressed = 0; else if((-1)>=orderMatrix[2][1]) __iv__return_expr_isButtonPressed = 0; else if(1==orderMatrix[0][0]) __iv__return_expr_isButtonPressed = orderMatrix[0][0]; else if(orderMatrix[1][1]<orderMatrix[1][2]) __iv__return_expr_isButtonPressed = orderMatrix[1][2]; else if(1==orderMatrix[0][3]) __iv__return_expr_isButtonPressed = orderMatrix[0][3]; else if(orderMatrix[1][1]>=2) __iv__return_expr_isButtonPressed = orderMatrix[2][0]; else if(1==orderMatrix[2][3]) __iv__return_expr_isButtonPressed = orderMatrix[2][3]; else if(1==orderMatrix[2][2]) __iv__return_expr_isButtonPressed = orderMatrix[2][2]; else if(orderMatrix[2][3]<orderMatrix[0][0]) __iv__return_expr_isButtonPressed = orderMatrix[2][1]; else if(1==orderMatrix[2][1]) __iv__return_expr_isButtonPressed = orderMatrix[2][1]; else if(orderMatrix[2][0]<orderMatrix[0][1]) __iv__return_expr_isButtonPressed = orderMatrix[0][1]; else if(orderMatrix[1][3]<orderMatrix[2][0]) __iv__return_expr_isButtonPressed = orderMatrix[2][0]; else if(1==orderMatrix[0][1]) __iv__return_expr_isButtonPressed = orderMatrix[2][0]; else if(orderMatrix[1][0]<orderMatrix[2][0]) __iv__return_expr_isButtonPressed = orderMatrix[2][0]; else if(1==orderMatrix[2][0]) __iv__return_expr_isButtonPressed = orderMatrix[2][0]; else if(orderMatrix[1][1]<orderMatrix[1][3]) __iv__return_expr_isButtonPressed = orderMatrix[1][3]; else if(orderMatrix[1][1]<orderMatrix[0][2]) __iv__return_expr_isButtonPressed = orderMatrix[0][2]; else __iv__return_expr_isButtonPressed = orderMatrix[1][1]; 
	__CPROVER_assume(__iv__return_expr_isButtonPressed == 0 || __iv__return_expr_isButtonPressed == 1);
	return __iv__return_expr_isButtonPressed;
}
complexity: 17
# constraints: 28

run cbmc: (unwind: 610, timeout: 86400 sec)
cbmc running time: 2082.191 sec

verification results: 
property 'assert((state != 2));' is TRUE alarm.

total CBMC running time: 40262.664 sec
total true alarm finding time: 0.0 sec
total refinement time: 499.402 sec, # of refinements: 27
peak memory usage: 14225.09 MB