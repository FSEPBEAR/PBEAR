--src data/elev/src/p2/elev.c --wd results/elevator/p2/ --unwind 1000 --object-bits 14 --synth-dir results/elevator/synth --synth-timeout 600 --synth-max-size 512 --synth-max-height 15 
code parsing time: 0.757 sec

select target function calls:
elev_get_button_signal((elev_button_type_t)(button), floorNum) (call id 49) influences 5 external nodes
internal node ratio: 0.85% (6 of 709)

floorIsOrdered(previousMainFloor, motorDirection) (call id 20) influences 13 external nodes
internal node ratio: 19.32% (137 of 709)

isButtonPressed() (call id 11) influences 7 external nodes
internal node ratio: 2.96% (21 of 709)

floorIsOrdered(previousMainFloor, motorDirection) (call id 14) influences 13 external nodes
internal node ratio: 12.69% (90 of 709)

find the best target combination:
predict complexity: (unwind 1000)
criterion unwind: 8
elev_get_button_signal((elev_button_type_t)(button), floorNum): original cmplx: 1, stub cmplx: 0
floorIsOrdered(previousMainFloor, motorDirection): original cmplx: 157, stub cmplx: 3
isButtonPressed(): original cmplx: 136, stub cmplx: 3
total cmplx: 8198

Jul 30, 2023 4:41:05 AM iv_checker.select.TargetFunctionSelector printRank
INFO: 
1. elev_get_button_signal((elev_button_type_t)(button), floorNum); floorIsOrdered(previousMainFloor, motorDirection); isButtonPressed(); floorIsOrdered(previousMainFloor, motorDirection);  fitness: 5.959
2. elev_get_button_signal((elev_button_type_t)(button), floorNum); floorIsOrdered(previousMainFloor, motorDirection); floorIsOrdered(previousMainFloor, motorDirection);  fitness: 5.367
3. floorIsOrdered(previousMainFloor, motorDirection); isButtonPressed(); floorIsOrdered(previousMainFloor, motorDirection);  fitness: 4.803
4. elev_get_button_signal((elev_button_type_t)(button), floorNum); isButtonPressed();  fitness: 4.592
5. floorIsOrdered(previousMainFloor, motorDirection); floorIsOrdered(previousMainFloor, motorDirection);  fitness: 4.107

call elev_get_button_signal((elev_button_type_t)(button), floorNum) (call id 49)
call floorIsOrdered(previousMainFloor, motorDirection) (call id 20)
call isButtonPressed() (call id 11)
call floorIsOrdered(previousMainFloor, motorDirection) (call id 14)
Iteration 0:
signed int __iv__elev_get_button_signal_stub(elev_button_type_t button, signed int floor) {
	signed int __iv__return_expr_elev_get_button_signal;
	signed int __iv__nondet_input_elev_get_button_signal_1 = __VERIFIER_nondet_signed_int();
	__iv__return_expr_elev_get_button_signal = __iv__nondet_input_elev_get_button_signal_1;
	__CPROVER_assume(__iv__return_expr_elev_get_button_signal == 0 || __iv__return_expr_elev_get_button_signal == 1);
	return __iv__return_expr_elev_get_button_signal;
}
complexity: 0
accuracy: 100.00%
coverage: 100.00%
# constraints: 2

signed int __iv__floorIsOrdered_stub(signed int floorNum, signed int motorDir) {
	signed int __iv__return_expr_floorIsOrdered;
	if(1==orderMatrix[2][0]) __iv__return_expr_floorIsOrdered = 1; else if(motorDir>=2) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[0][3]==motorDir) __iv__return_expr_floorIsOrdered = 1; else __iv__return_expr_floorIsOrdered = 0; 
	__CPROVER_assume(__iv__return_expr_floorIsOrdered == 0 || __iv__return_expr_floorIsOrdered == 1);
	return __iv__return_expr_floorIsOrdered;
}
complexity: 3
accuracy: 77.56%
coverage: 100.00%
# constraints: 9

signed int __iv__isButtonPressed_stub() {
	signed int __iv__return_expr_isButtonPressed;
	if(1==orderMatrix[0][0]) __iv__return_expr_isButtonPressed = orderMatrix[0][0]; else if(1==orderMatrix[0][3]) __iv__return_expr_isButtonPressed = 1; else if(1==orderMatrix[2][1]) __iv__return_expr_isButtonPressed = 1; else __iv__return_expr_isButtonPressed = 0; 
	__CPROVER_assume(__iv__return_expr_isButtonPressed == 0 || __iv__return_expr_isButtonPressed == 1);
	return __iv__return_expr_isButtonPressed;
}
complexity: 3
accuracy: 83.83%
coverage: 100.00%
# constraints: 10

run cbmc: (unwind: 10, timeout: 86400 sec)
cbmc running time: 1.471 sec

verification results: 
property 'assert((state != 2));' is not violated.

total CBMC running time: 1.471 sec
total true alarm finding time: 0.0 sec
total refinement time: 0.0 sec, # of refinements: 0
peak memory usage: 142.91 MB

call elev_get_button_signal((elev_button_type_t)(button), floorNum) (call id 49)
call floorIsOrdered(previousMainFloor, motorDirection) (call id 20)
call isButtonPressed() (call id 11)
call floorIsOrdered(previousMainFloor, motorDirection) (call id 14)
Iteration 0:
signed int __iv__elev_get_button_signal_stub(elev_button_type_t button, signed int floor) {
	signed int __iv__return_expr_elev_get_button_signal;
	signed int __iv__nondet_input_elev_get_button_signal_1 = __VERIFIER_nondet_signed_int();
	__iv__return_expr_elev_get_button_signal = __iv__nondet_input_elev_get_button_signal_1;
	__CPROVER_assume(__iv__return_expr_elev_get_button_signal == 0 || __iv__return_expr_elev_get_button_signal == 1);
	return __iv__return_expr_elev_get_button_signal;
}
complexity: 0
accuracy: 100.00%
coverage: 100.00%
# constraints: 2

signed int __iv__floorIsOrdered_stub(signed int floorNum, signed int motorDir) {
	signed int __iv__return_expr_floorIsOrdered;
	if(1==orderMatrix[2][0]) __iv__return_expr_floorIsOrdered = 1; else if(motorDir>=2) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[0][3]==motorDir) __iv__return_expr_floorIsOrdered = 1; else __iv__return_expr_floorIsOrdered = 0; 
	__CPROVER_assume(__iv__return_expr_floorIsOrdered == 0 || __iv__return_expr_floorIsOrdered == 1);
	return __iv__return_expr_floorIsOrdered;
}
complexity: 3
accuracy: 77.56%
coverage: 100.00%
# constraints: 9

signed int __iv__isButtonPressed_stub() {
	signed int __iv__return_expr_isButtonPressed;
	if(1==orderMatrix[0][0]) __iv__return_expr_isButtonPressed = orderMatrix[0][0]; else if(1==orderMatrix[0][3]) __iv__return_expr_isButtonPressed = 1; else if(1==orderMatrix[2][1]) __iv__return_expr_isButtonPressed = 1; else __iv__return_expr_isButtonPressed = 0; 
	__CPROVER_assume(__iv__return_expr_isButtonPressed == 0 || __iv__return_expr_isButtonPressed == 1);
	return __iv__return_expr_isButtonPressed;
}
complexity: 3
accuracy: 83.83%
coverage: 100.00%
# constraints: 10

run cbmc: (unwind: 20, timeout: 86400 sec)
cbmc running time: 3.751 sec

verification results: 
property 'assert((state != 2));' is not violated.

total CBMC running time: 5.222 sec
total true alarm finding time: 0.0 sec
total refinement time: 0.0 sec, # of refinements: 0
peak memory usage: 252.54 MB

call elev_get_button_signal((elev_button_type_t)(button), floorNum) (call id 49)
call floorIsOrdered(previousMainFloor, motorDirection) (call id 20)
call isButtonPressed() (call id 11)
call floorIsOrdered(previousMainFloor, motorDirection) (call id 14)
Iteration 0:
signed int __iv__elev_get_button_signal_stub(elev_button_type_t button, signed int floor) {
	signed int __iv__return_expr_elev_get_button_signal;
	signed int __iv__nondet_input_elev_get_button_signal_1 = __VERIFIER_nondet_signed_int();
	__iv__return_expr_elev_get_button_signal = __iv__nondet_input_elev_get_button_signal_1;
	__CPROVER_assume(__iv__return_expr_elev_get_button_signal == 0 || __iv__return_expr_elev_get_button_signal == 1);
	return __iv__return_expr_elev_get_button_signal;
}
complexity: 0
accuracy: 100.00%
coverage: 100.00%
# constraints: 2

signed int __iv__floorIsOrdered_stub(signed int floorNum, signed int motorDir) {
	signed int __iv__return_expr_floorIsOrdered;
	if(1==orderMatrix[2][0]) __iv__return_expr_floorIsOrdered = 1; else if(motorDir>=2) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[0][3]==motorDir) __iv__return_expr_floorIsOrdered = 1; else __iv__return_expr_floorIsOrdered = 0; 
	__CPROVER_assume(__iv__return_expr_floorIsOrdered == 0 || __iv__return_expr_floorIsOrdered == 1);
	return __iv__return_expr_floorIsOrdered;
}
complexity: 3
accuracy: 77.56%
coverage: 100.00%
# constraints: 9

signed int __iv__isButtonPressed_stub() {
	signed int __iv__return_expr_isButtonPressed;
	if(1==orderMatrix[0][0]) __iv__return_expr_isButtonPressed = orderMatrix[0][0]; else if(1==orderMatrix[0][3]) __iv__return_expr_isButtonPressed = 1; else if(1==orderMatrix[2][1]) __iv__return_expr_isButtonPressed = 1; else __iv__return_expr_isButtonPressed = 0; 
	__CPROVER_assume(__iv__return_expr_isButtonPressed == 0 || __iv__return_expr_isButtonPressed == 1);
	return __iv__return_expr_isButtonPressed;
}
complexity: 3
accuracy: 83.83%
coverage: 100.00%
# constraints: 10

run cbmc: (unwind: 30, timeout: 86400 sec)
cbmc running time: 6.714 sec

verification results: 
property 'assert((state != 2));' is not violated.

total CBMC running time: 11.936 sec
total true alarm finding time: 0.0 sec
total refinement time: 0.0 sec, # of refinements: 0
peak memory usage: 371.67 MB

call elev_get_button_signal((elev_button_type_t)(button), floorNum) (call id 49)
call floorIsOrdered(previousMainFloor, motorDirection) (call id 20)
call isButtonPressed() (call id 11)
call floorIsOrdered(previousMainFloor, motorDirection) (call id 14)
Iteration 0:
signed int __iv__elev_get_button_signal_stub(elev_button_type_t button, signed int floor) {
	signed int __iv__return_expr_elev_get_button_signal;
	signed int __iv__nondet_input_elev_get_button_signal_1 = __VERIFIER_nondet_signed_int();
	__iv__return_expr_elev_get_button_signal = __iv__nondet_input_elev_get_button_signal_1;
	__CPROVER_assume(__iv__return_expr_elev_get_button_signal == 0 || __iv__return_expr_elev_get_button_signal == 1);
	return __iv__return_expr_elev_get_button_signal;
}
complexity: 0
accuracy: 100.00%
coverage: 100.00%
# constraints: 2

signed int __iv__floorIsOrdered_stub(signed int floorNum, signed int motorDir) {
	signed int __iv__return_expr_floorIsOrdered;
	if(1==orderMatrix[2][0]) __iv__return_expr_floorIsOrdered = 1; else if(motorDir>=2) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[0][3]==motorDir) __iv__return_expr_floorIsOrdered = 1; else __iv__return_expr_floorIsOrdered = 0; 
	__CPROVER_assume(__iv__return_expr_floorIsOrdered == 0 || __iv__return_expr_floorIsOrdered == 1);
	return __iv__return_expr_floorIsOrdered;
}
complexity: 3
accuracy: 77.56%
coverage: 100.00%
# constraints: 9

signed int __iv__isButtonPressed_stub() {
	signed int __iv__return_expr_isButtonPressed;
	if(1==orderMatrix[0][0]) __iv__return_expr_isButtonPressed = orderMatrix[0][0]; else if(1==orderMatrix[0][3]) __iv__return_expr_isButtonPressed = 1; else if(1==orderMatrix[2][1]) __iv__return_expr_isButtonPressed = 1; else __iv__return_expr_isButtonPressed = 0; 
	__CPROVER_assume(__iv__return_expr_isButtonPressed == 0 || __iv__return_expr_isButtonPressed == 1);
	return __iv__return_expr_isButtonPressed;
}
complexity: 3
accuracy: 83.83%
coverage: 100.00%
# constraints: 10

run cbmc: (unwind: 40, timeout: 86400 sec)
cbmc running time: 9.621 sec

verification results: 
property 'assert((state != 2));' is not violated.

total CBMC running time: 21.557 sec
total true alarm finding time: 0.0 sec
total refinement time: 0.0 sec, # of refinements: 0
peak memory usage: 568.62 MB

call elev_get_button_signal((elev_button_type_t)(button), floorNum) (call id 49)
call floorIsOrdered(previousMainFloor, motorDirection) (call id 20)
call isButtonPressed() (call id 11)
call floorIsOrdered(previousMainFloor, motorDirection) (call id 14)
Iteration 0:
signed int __iv__elev_get_button_signal_stub(elev_button_type_t button, signed int floor) {
	signed int __iv__return_expr_elev_get_button_signal;
	signed int __iv__nondet_input_elev_get_button_signal_1 = __VERIFIER_nondet_signed_int();
	__iv__return_expr_elev_get_button_signal = __iv__nondet_input_elev_get_button_signal_1;
	__CPROVER_assume(__iv__return_expr_elev_get_button_signal == 0 || __iv__return_expr_elev_get_button_signal == 1);
	return __iv__return_expr_elev_get_button_signal;
}
complexity: 0
accuracy: 100.00%
coverage: 100.00%
# constraints: 2

signed int __iv__floorIsOrdered_stub(signed int floorNum, signed int motorDir) {
	signed int __iv__return_expr_floorIsOrdered;
	if(1==orderMatrix[2][0]) __iv__return_expr_floorIsOrdered = 1; else if(motorDir>=2) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[0][3]==motorDir) __iv__return_expr_floorIsOrdered = 1; else __iv__return_expr_floorIsOrdered = 0; 
	__CPROVER_assume(__iv__return_expr_floorIsOrdered == 0 || __iv__return_expr_floorIsOrdered == 1);
	return __iv__return_expr_floorIsOrdered;
}
complexity: 3
accuracy: 77.56%
coverage: 100.00%
# constraints: 9

signed int __iv__isButtonPressed_stub() {
	signed int __iv__return_expr_isButtonPressed;
	if(1==orderMatrix[0][0]) __iv__return_expr_isButtonPressed = orderMatrix[0][0]; else if(1==orderMatrix[0][3]) __iv__return_expr_isButtonPressed = 1; else if(1==orderMatrix[2][1]) __iv__return_expr_isButtonPressed = 1; else __iv__return_expr_isButtonPressed = 0; 
	__CPROVER_assume(__iv__return_expr_isButtonPressed == 0 || __iv__return_expr_isButtonPressed == 1);
	return __iv__return_expr_isButtonPressed;
}
complexity: 3
accuracy: 83.83%
coverage: 100.00%
# constraints: 10

run cbmc: (unwind: 50, timeout: 86400 sec)
cbmc running time: 11.972 sec

verification results: 
property 'assert((state != 2));' is not violated.

total CBMC running time: 33.529 sec
total true alarm finding time: 0.0 sec
total refinement time: 0.0 sec, # of refinements: 0
peak memory usage: 660.79 MB

call elev_get_button_signal((elev_button_type_t)(button), floorNum) (call id 49)
call floorIsOrdered(previousMainFloor, motorDirection) (call id 20)
call isButtonPressed() (call id 11)
call floorIsOrdered(previousMainFloor, motorDirection) (call id 14)
Iteration 0:
signed int __iv__elev_get_button_signal_stub(elev_button_type_t button, signed int floor) {
	signed int __iv__return_expr_elev_get_button_signal;
	signed int __iv__nondet_input_elev_get_button_signal_1 = __VERIFIER_nondet_signed_int();
	__iv__return_expr_elev_get_button_signal = __iv__nondet_input_elev_get_button_signal_1;
	__CPROVER_assume(__iv__return_expr_elev_get_button_signal == 0 || __iv__return_expr_elev_get_button_signal == 1);
	return __iv__return_expr_elev_get_button_signal;
}
complexity: 0
accuracy: 100.00%
coverage: 100.00%
# constraints: 2

signed int __iv__floorIsOrdered_stub(signed int floorNum, signed int motorDir) {
	signed int __iv__return_expr_floorIsOrdered;
	if(1==orderMatrix[2][0]) __iv__return_expr_floorIsOrdered = 1; else if(motorDir>=2) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[0][3]==motorDir) __iv__return_expr_floorIsOrdered = 1; else __iv__return_expr_floorIsOrdered = 0; 
	__CPROVER_assume(__iv__return_expr_floorIsOrdered == 0 || __iv__return_expr_floorIsOrdered == 1);
	return __iv__return_expr_floorIsOrdered;
}
complexity: 3
accuracy: 77.56%
coverage: 100.00%
# constraints: 9

signed int __iv__isButtonPressed_stub() {
	signed int __iv__return_expr_isButtonPressed;
	if(1==orderMatrix[0][0]) __iv__return_expr_isButtonPressed = orderMatrix[0][0]; else if(1==orderMatrix[0][3]) __iv__return_expr_isButtonPressed = 1; else if(1==orderMatrix[2][1]) __iv__return_expr_isButtonPressed = 1; else __iv__return_expr_isButtonPressed = 0; 
	__CPROVER_assume(__iv__return_expr_isButtonPressed == 0 || __iv__return_expr_isButtonPressed == 1);
	return __iv__return_expr_isButtonPressed;
}
complexity: 3
accuracy: 83.83%
coverage: 100.00%
# constraints: 10

run cbmc: (unwind: 60, timeout: 86400 sec)
cbmc running time: 15.686 sec

verification results: 
property 'assert((state != 2));' is not violated.

total CBMC running time: 49.215 sec
total true alarm finding time: 0.0 sec
total refinement time: 0.0 sec, # of refinements: 0
peak memory usage: 779.02 MB

call elev_get_button_signal((elev_button_type_t)(button), floorNum) (call id 49)
call floorIsOrdered(previousMainFloor, motorDirection) (call id 20)
call isButtonPressed() (call id 11)
call floorIsOrdered(previousMainFloor, motorDirection) (call id 14)
Iteration 0:
signed int __iv__elev_get_button_signal_stub(elev_button_type_t button, signed int floor) {
	signed int __iv__return_expr_elev_get_button_signal;
	signed int __iv__nondet_input_elev_get_button_signal_1 = __VERIFIER_nondet_signed_int();
	__iv__return_expr_elev_get_button_signal = __iv__nondet_input_elev_get_button_signal_1;
	__CPROVER_assume(__iv__return_expr_elev_get_button_signal == 0 || __iv__return_expr_elev_get_button_signal == 1);
	return __iv__return_expr_elev_get_button_signal;
}
complexity: 0
accuracy: 100.00%
coverage: 100.00%
# constraints: 2

signed int __iv__floorIsOrdered_stub(signed int floorNum, signed int motorDir) {
	signed int __iv__return_expr_floorIsOrdered;
	if(1==orderMatrix[2][0]) __iv__return_expr_floorIsOrdered = 1; else if(motorDir>=2) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[0][3]==motorDir) __iv__return_expr_floorIsOrdered = 1; else __iv__return_expr_floorIsOrdered = 0; 
	__CPROVER_assume(__iv__return_expr_floorIsOrdered == 0 || __iv__return_expr_floorIsOrdered == 1);
	return __iv__return_expr_floorIsOrdered;
}
complexity: 3
accuracy: 77.56%
coverage: 100.00%
# constraints: 9

signed int __iv__isButtonPressed_stub() {
	signed int __iv__return_expr_isButtonPressed;
	if(1==orderMatrix[0][0]) __iv__return_expr_isButtonPressed = orderMatrix[0][0]; else if(1==orderMatrix[0][3]) __iv__return_expr_isButtonPressed = 1; else if(1==orderMatrix[2][1]) __iv__return_expr_isButtonPressed = 1; else __iv__return_expr_isButtonPressed = 0; 
	__CPROVER_assume(__iv__return_expr_isButtonPressed == 0 || __iv__return_expr_isButtonPressed == 1);
	return __iv__return_expr_isButtonPressed;
}
complexity: 3
accuracy: 83.83%
coverage: 100.00%
# constraints: 10

run cbmc: (unwind: 70, timeout: 86400 sec)
cbmc running time: 20.261 sec

verification results: 
property 'assert((state != 2));' is not violated.

total CBMC running time: 69.476 sec
total true alarm finding time: 0.0 sec
total refinement time: 0.0 sec, # of refinements: 0
peak memory usage: 937.14 MB

call elev_get_button_signal((elev_button_type_t)(button), floorNum) (call id 49)
call floorIsOrdered(previousMainFloor, motorDirection) (call id 20)
call isButtonPressed() (call id 11)
call floorIsOrdered(previousMainFloor, motorDirection) (call id 14)
Iteration 0:
signed int __iv__elev_get_button_signal_stub(elev_button_type_t button, signed int floor) {
	signed int __iv__return_expr_elev_get_button_signal;
	signed int __iv__nondet_input_elev_get_button_signal_1 = __VERIFIER_nondet_signed_int();
	__iv__return_expr_elev_get_button_signal = __iv__nondet_input_elev_get_button_signal_1;
	__CPROVER_assume(__iv__return_expr_elev_get_button_signal == 0 || __iv__return_expr_elev_get_button_signal == 1);
	return __iv__return_expr_elev_get_button_signal;
}
complexity: 0
accuracy: 100.00%
coverage: 100.00%
# constraints: 2

signed int __iv__floorIsOrdered_stub(signed int floorNum, signed int motorDir) {
	signed int __iv__return_expr_floorIsOrdered;
	if(1==orderMatrix[2][0]) __iv__return_expr_floorIsOrdered = 1; else if(motorDir>=2) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[0][3]==motorDir) __iv__return_expr_floorIsOrdered = 1; else __iv__return_expr_floorIsOrdered = 0; 
	__CPROVER_assume(__iv__return_expr_floorIsOrdered == 0 || __iv__return_expr_floorIsOrdered == 1);
	return __iv__return_expr_floorIsOrdered;
}
complexity: 3
accuracy: 77.56%
coverage: 100.00%
# constraints: 9

signed int __iv__isButtonPressed_stub() {
	signed int __iv__return_expr_isButtonPressed;
	if(1==orderMatrix[0][0]) __iv__return_expr_isButtonPressed = orderMatrix[0][0]; else if(1==orderMatrix[0][3]) __iv__return_expr_isButtonPressed = 1; else if(1==orderMatrix[2][1]) __iv__return_expr_isButtonPressed = 1; else __iv__return_expr_isButtonPressed = 0; 
	__CPROVER_assume(__iv__return_expr_isButtonPressed == 0 || __iv__return_expr_isButtonPressed == 1);
	return __iv__return_expr_isButtonPressed;
}
complexity: 3
accuracy: 83.83%
coverage: 100.00%
# constraints: 10

run cbmc: (unwind: 80, timeout: 86400 sec)
cbmc running time: 18.988 sec

verification results: 
property 'assert((state != 2));' is not violated.

total CBMC running time: 88.464 sec
total true alarm finding time: 0.0 sec
total refinement time: 0.0 sec, # of refinements: 0
peak memory usage: 1054.03 MB

call elev_get_button_signal((elev_button_type_t)(button), floorNum) (call id 49)
call floorIsOrdered(previousMainFloor, motorDirection) (call id 20)
call isButtonPressed() (call id 11)
call floorIsOrdered(previousMainFloor, motorDirection) (call id 14)
Iteration 0:
signed int __iv__elev_get_button_signal_stub(elev_button_type_t button, signed int floor) {
	signed int __iv__return_expr_elev_get_button_signal;
	signed int __iv__nondet_input_elev_get_button_signal_1 = __VERIFIER_nondet_signed_int();
	__iv__return_expr_elev_get_button_signal = __iv__nondet_input_elev_get_button_signal_1;
	__CPROVER_assume(__iv__return_expr_elev_get_button_signal == 0 || __iv__return_expr_elev_get_button_signal == 1);
	return __iv__return_expr_elev_get_button_signal;
}
complexity: 0
accuracy: 100.00%
coverage: 100.00%
# constraints: 2

signed int __iv__floorIsOrdered_stub(signed int floorNum, signed int motorDir) {
	signed int __iv__return_expr_floorIsOrdered;
	if(1==orderMatrix[2][0]) __iv__return_expr_floorIsOrdered = 1; else if(motorDir>=2) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[0][3]==motorDir) __iv__return_expr_floorIsOrdered = 1; else __iv__return_expr_floorIsOrdered = 0; 
	__CPROVER_assume(__iv__return_expr_floorIsOrdered == 0 || __iv__return_expr_floorIsOrdered == 1);
	return __iv__return_expr_floorIsOrdered;
}
complexity: 3
accuracy: 77.56%
coverage: 100.00%
# constraints: 9

signed int __iv__isButtonPressed_stub() {
	signed int __iv__return_expr_isButtonPressed;
	if(1==orderMatrix[0][0]) __iv__return_expr_isButtonPressed = orderMatrix[0][0]; else if(1==orderMatrix[0][3]) __iv__return_expr_isButtonPressed = 1; else if(1==orderMatrix[2][1]) __iv__return_expr_isButtonPressed = 1; else __iv__return_expr_isButtonPressed = 0; 
	__CPROVER_assume(__iv__return_expr_isButtonPressed == 0 || __iv__return_expr_isButtonPressed == 1);
	return __iv__return_expr_isButtonPressed;
}
complexity: 3
accuracy: 83.83%
coverage: 100.00%
# constraints: 10

run cbmc: (unwind: 90, timeout: 86400 sec)
cbmc running time: 22.491 sec

verification results: 
property 'assert((state != 2));' is not violated.

total CBMC running time: 110.955 sec
total true alarm finding time: 0.0 sec
total refinement time: 0.0 sec, # of refinements: 0
peak memory usage: 1255.77 MB

call elev_get_button_signal((elev_button_type_t)(button), floorNum) (call id 49)
call floorIsOrdered(previousMainFloor, motorDirection) (call id 20)
call isButtonPressed() (call id 11)
call floorIsOrdered(previousMainFloor, motorDirection) (call id 14)
Iteration 0:
signed int __iv__elev_get_button_signal_stub(elev_button_type_t button, signed int floor) {
	signed int __iv__return_expr_elev_get_button_signal;
	signed int __iv__nondet_input_elev_get_button_signal_1 = __VERIFIER_nondet_signed_int();
	__iv__return_expr_elev_get_button_signal = __iv__nondet_input_elev_get_button_signal_1;
	__CPROVER_assume(__iv__return_expr_elev_get_button_signal == 0 || __iv__return_expr_elev_get_button_signal == 1);
	return __iv__return_expr_elev_get_button_signal;
}
complexity: 0
accuracy: 100.00%
coverage: 100.00%
# constraints: 2

signed int __iv__floorIsOrdered_stub(signed int floorNum, signed int motorDir) {
	signed int __iv__return_expr_floorIsOrdered;
	if(1==orderMatrix[2][0]) __iv__return_expr_floorIsOrdered = 1; else if(motorDir>=2) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[0][3]==motorDir) __iv__return_expr_floorIsOrdered = 1; else __iv__return_expr_floorIsOrdered = 0; 
	__CPROVER_assume(__iv__return_expr_floorIsOrdered == 0 || __iv__return_expr_floorIsOrdered == 1);
	return __iv__return_expr_floorIsOrdered;
}
complexity: 3
accuracy: 77.56%
coverage: 100.00%
# constraints: 9

signed int __iv__isButtonPressed_stub() {
	signed int __iv__return_expr_isButtonPressed;
	if(1==orderMatrix[0][0]) __iv__return_expr_isButtonPressed = orderMatrix[0][0]; else if(1==orderMatrix[0][3]) __iv__return_expr_isButtonPressed = 1; else if(1==orderMatrix[2][1]) __iv__return_expr_isButtonPressed = 1; else __iv__return_expr_isButtonPressed = 0; 
	__CPROVER_assume(__iv__return_expr_isButtonPressed == 0 || __iv__return_expr_isButtonPressed == 1);
	return __iv__return_expr_isButtonPressed;
}
complexity: 3
accuracy: 83.83%
coverage: 100.00%
# constraints: 10

run cbmc: (unwind: 100, timeout: 86400 sec)
cbmc running time: 24.803 sec

verification results: 
property 'assert((state != 2));' is not violated.

total CBMC running time: 135.758 sec
total true alarm finding time: 0.0 sec
total refinement time: 0.0 sec, # of refinements: 0
peak memory usage: 1311.09 MB

call elev_get_button_signal((elev_button_type_t)(button), floorNum) (call id 49)
call floorIsOrdered(previousMainFloor, motorDirection) (call id 20)
call isButtonPressed() (call id 11)
call floorIsOrdered(previousMainFloor, motorDirection) (call id 14)
Iteration 0:
signed int __iv__elev_get_button_signal_stub(elev_button_type_t button, signed int floor) {
	signed int __iv__return_expr_elev_get_button_signal;
	signed int __iv__nondet_input_elev_get_button_signal_1 = __VERIFIER_nondet_signed_int();
	__iv__return_expr_elev_get_button_signal = __iv__nondet_input_elev_get_button_signal_1;
	__CPROVER_assume(__iv__return_expr_elev_get_button_signal == 0 || __iv__return_expr_elev_get_button_signal == 1);
	return __iv__return_expr_elev_get_button_signal;
}
complexity: 0
accuracy: 100.00%
coverage: 100.00%
# constraints: 2

signed int __iv__floorIsOrdered_stub(signed int floorNum, signed int motorDir) {
	signed int __iv__return_expr_floorIsOrdered;
	if(1==orderMatrix[2][0]) __iv__return_expr_floorIsOrdered = 1; else if(motorDir>=2) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[0][3]==motorDir) __iv__return_expr_floorIsOrdered = 1; else __iv__return_expr_floorIsOrdered = 0; 
	__CPROVER_assume(__iv__return_expr_floorIsOrdered == 0 || __iv__return_expr_floorIsOrdered == 1);
	return __iv__return_expr_floorIsOrdered;
}
complexity: 3
accuracy: 77.56%
coverage: 100.00%
# constraints: 9

signed int __iv__isButtonPressed_stub() {
	signed int __iv__return_expr_isButtonPressed;
	if(1==orderMatrix[0][0]) __iv__return_expr_isButtonPressed = orderMatrix[0][0]; else if(1==orderMatrix[0][3]) __iv__return_expr_isButtonPressed = 1; else if(1==orderMatrix[2][1]) __iv__return_expr_isButtonPressed = 1; else __iv__return_expr_isButtonPressed = 0; 
	__CPROVER_assume(__iv__return_expr_isButtonPressed == 0 || __iv__return_expr_isButtonPressed == 1);
	return __iv__return_expr_isButtonPressed;
}
complexity: 3
accuracy: 83.83%
coverage: 100.00%
# constraints: 10

run cbmc: (unwind: 110, timeout: 86400 sec)
cbmc running time: 27.044 sec

verification results: 
property 'assert((state != 2));' is not violated.

total CBMC running time: 162.802 sec
total true alarm finding time: 0.0 sec
total refinement time: 0.0 sec, # of refinements: 0
peak memory usage: 1513.46 MB

call elev_get_button_signal((elev_button_type_t)(button), floorNum) (call id 49)
call floorIsOrdered(previousMainFloor, motorDirection) (call id 20)
call isButtonPressed() (call id 11)
call floorIsOrdered(previousMainFloor, motorDirection) (call id 14)
Iteration 0:
signed int __iv__elev_get_button_signal_stub(elev_button_type_t button, signed int floor) {
	signed int __iv__return_expr_elev_get_button_signal;
	signed int __iv__nondet_input_elev_get_button_signal_1 = __VERIFIER_nondet_signed_int();
	__iv__return_expr_elev_get_button_signal = __iv__nondet_input_elev_get_button_signal_1;
	__CPROVER_assume(__iv__return_expr_elev_get_button_signal == 0 || __iv__return_expr_elev_get_button_signal == 1);
	return __iv__return_expr_elev_get_button_signal;
}
complexity: 0
accuracy: 100.00%
coverage: 100.00%
# constraints: 2

signed int __iv__floorIsOrdered_stub(signed int floorNum, signed int motorDir) {
	signed int __iv__return_expr_floorIsOrdered;
	if(1==orderMatrix[2][0]) __iv__return_expr_floorIsOrdered = 1; else if(motorDir>=2) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[0][3]==motorDir) __iv__return_expr_floorIsOrdered = 1; else __iv__return_expr_floorIsOrdered = 0; 
	__CPROVER_assume(__iv__return_expr_floorIsOrdered == 0 || __iv__return_expr_floorIsOrdered == 1);
	return __iv__return_expr_floorIsOrdered;
}
complexity: 3
accuracy: 77.56%
coverage: 100.00%
# constraints: 9

signed int __iv__isButtonPressed_stub() {
	signed int __iv__return_expr_isButtonPressed;
	if(1==orderMatrix[0][0]) __iv__return_expr_isButtonPressed = orderMatrix[0][0]; else if(1==orderMatrix[0][3]) __iv__return_expr_isButtonPressed = 1; else if(1==orderMatrix[2][1]) __iv__return_expr_isButtonPressed = 1; else __iv__return_expr_isButtonPressed = 0; 
	__CPROVER_assume(__iv__return_expr_isButtonPressed == 0 || __iv__return_expr_isButtonPressed == 1);
	return __iv__return_expr_isButtonPressed;
}
complexity: 3
accuracy: 83.83%
coverage: 100.00%
# constraints: 10

run cbmc: (unwind: 120, timeout: 86400 sec)
cbmc running time: 31.814 sec

verification results: 
property 'assert((state != 2));' is not violated.

total CBMC running time: 194.616 sec
total true alarm finding time: 0.0 sec
total refinement time: 0.0 sec, # of refinements: 0
peak memory usage: 1615.76 MB

call elev_get_button_signal((elev_button_type_t)(button), floorNum) (call id 49)
call floorIsOrdered(previousMainFloor, motorDirection) (call id 20)
call isButtonPressed() (call id 11)
call floorIsOrdered(previousMainFloor, motorDirection) (call id 14)
Iteration 0:
signed int __iv__elev_get_button_signal_stub(elev_button_type_t button, signed int floor) {
	signed int __iv__return_expr_elev_get_button_signal;
	signed int __iv__nondet_input_elev_get_button_signal_1 = __VERIFIER_nondet_signed_int();
	__iv__return_expr_elev_get_button_signal = __iv__nondet_input_elev_get_button_signal_1;
	__CPROVER_assume(__iv__return_expr_elev_get_button_signal == 0 || __iv__return_expr_elev_get_button_signal == 1);
	return __iv__return_expr_elev_get_button_signal;
}
complexity: 0
accuracy: 100.00%
coverage: 100.00%
# constraints: 2

signed int __iv__floorIsOrdered_stub(signed int floorNum, signed int motorDir) {
	signed int __iv__return_expr_floorIsOrdered;
	if(1==orderMatrix[2][0]) __iv__return_expr_floorIsOrdered = 1; else if(motorDir>=2) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[0][3]==motorDir) __iv__return_expr_floorIsOrdered = 1; else __iv__return_expr_floorIsOrdered = 0; 
	__CPROVER_assume(__iv__return_expr_floorIsOrdered == 0 || __iv__return_expr_floorIsOrdered == 1);
	return __iv__return_expr_floorIsOrdered;
}
complexity: 3
accuracy: 77.56%
coverage: 100.00%
# constraints: 9

signed int __iv__isButtonPressed_stub() {
	signed int __iv__return_expr_isButtonPressed;
	if(1==orderMatrix[0][0]) __iv__return_expr_isButtonPressed = orderMatrix[0][0]; else if(1==orderMatrix[0][3]) __iv__return_expr_isButtonPressed = 1; else if(1==orderMatrix[2][1]) __iv__return_expr_isButtonPressed = 1; else __iv__return_expr_isButtonPressed = 0; 
	__CPROVER_assume(__iv__return_expr_isButtonPressed == 0 || __iv__return_expr_isButtonPressed == 1);
	return __iv__return_expr_isButtonPressed;
}
complexity: 3
accuracy: 83.83%
coverage: 100.00%
# constraints: 10

run cbmc: (unwind: 130, timeout: 86400 sec)
cbmc running time: 29.407 sec

verification results: 
property 'assert((state != 2));' is not violated.

total CBMC running time: 224.023 sec
total true alarm finding time: 0.0 sec
total refinement time: 0.0 sec, # of refinements: 0
peak memory usage: 1851.13 MB

call elev_get_button_signal((elev_button_type_t)(button), floorNum) (call id 49)
call floorIsOrdered(previousMainFloor, motorDirection) (call id 20)
call isButtonPressed() (call id 11)
call floorIsOrdered(previousMainFloor, motorDirection) (call id 14)
Iteration 0:
signed int __iv__elev_get_button_signal_stub(elev_button_type_t button, signed int floor) {
	signed int __iv__return_expr_elev_get_button_signal;
	signed int __iv__nondet_input_elev_get_button_signal_1 = __VERIFIER_nondet_signed_int();
	__iv__return_expr_elev_get_button_signal = __iv__nondet_input_elev_get_button_signal_1;
	__CPROVER_assume(__iv__return_expr_elev_get_button_signal == 0 || __iv__return_expr_elev_get_button_signal == 1);
	return __iv__return_expr_elev_get_button_signal;
}
complexity: 0
accuracy: 100.00%
coverage: 100.00%
# constraints: 2

signed int __iv__floorIsOrdered_stub(signed int floorNum, signed int motorDir) {
	signed int __iv__return_expr_floorIsOrdered;
	if(1==orderMatrix[2][0]) __iv__return_expr_floorIsOrdered = 1; else if(motorDir>=2) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[0][3]==motorDir) __iv__return_expr_floorIsOrdered = 1; else __iv__return_expr_floorIsOrdered = 0; 
	__CPROVER_assume(__iv__return_expr_floorIsOrdered == 0 || __iv__return_expr_floorIsOrdered == 1);
	return __iv__return_expr_floorIsOrdered;
}
complexity: 3
accuracy: 77.56%
coverage: 100.00%
# constraints: 9

signed int __iv__isButtonPressed_stub() {
	signed int __iv__return_expr_isButtonPressed;
	if(1==orderMatrix[0][0]) __iv__return_expr_isButtonPressed = orderMatrix[0][0]; else if(1==orderMatrix[0][3]) __iv__return_expr_isButtonPressed = 1; else if(1==orderMatrix[2][1]) __iv__return_expr_isButtonPressed = 1; else __iv__return_expr_isButtonPressed = 0; 
	__CPROVER_assume(__iv__return_expr_isButtonPressed == 0 || __iv__return_expr_isButtonPressed == 1);
	return __iv__return_expr_isButtonPressed;
}
complexity: 3
accuracy: 83.83%
coverage: 100.00%
# constraints: 10

run cbmc: (unwind: 140, timeout: 86400 sec)
cbmc running time: 33.213 sec

verification results: 
property 'assert((state != 2));' is not violated.

total CBMC running time: 257.236 sec
total true alarm finding time: 0.0 sec
total refinement time: 0.0 sec, # of refinements: 0
peak memory usage: 2012.31 MB

call elev_get_button_signal((elev_button_type_t)(button), floorNum) (call id 49)
call floorIsOrdered(previousMainFloor, motorDirection) (call id 20)
call isButtonPressed() (call id 11)
call floorIsOrdered(previousMainFloor, motorDirection) (call id 14)
Iteration 0:
signed int __iv__elev_get_button_signal_stub(elev_button_type_t button, signed int floor) {
	signed int __iv__return_expr_elev_get_button_signal;
	signed int __iv__nondet_input_elev_get_button_signal_1 = __VERIFIER_nondet_signed_int();
	__iv__return_expr_elev_get_button_signal = __iv__nondet_input_elev_get_button_signal_1;
	__CPROVER_assume(__iv__return_expr_elev_get_button_signal == 0 || __iv__return_expr_elev_get_button_signal == 1);
	return __iv__return_expr_elev_get_button_signal;
}
complexity: 0
accuracy: 100.00%
coverage: 100.00%
# constraints: 2

signed int __iv__floorIsOrdered_stub(signed int floorNum, signed int motorDir) {
	signed int __iv__return_expr_floorIsOrdered;
	if(1==orderMatrix[2][0]) __iv__return_expr_floorIsOrdered = 1; else if(motorDir>=2) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[0][3]==motorDir) __iv__return_expr_floorIsOrdered = 1; else __iv__return_expr_floorIsOrdered = 0; 
	__CPROVER_assume(__iv__return_expr_floorIsOrdered == 0 || __iv__return_expr_floorIsOrdered == 1);
	return __iv__return_expr_floorIsOrdered;
}
complexity: 3
accuracy: 77.56%
coverage: 100.00%
# constraints: 9

signed int __iv__isButtonPressed_stub() {
	signed int __iv__return_expr_isButtonPressed;
	if(1==orderMatrix[0][0]) __iv__return_expr_isButtonPressed = orderMatrix[0][0]; else if(1==orderMatrix[0][3]) __iv__return_expr_isButtonPressed = 1; else if(1==orderMatrix[2][1]) __iv__return_expr_isButtonPressed = 1; else __iv__return_expr_isButtonPressed = 0; 
	__CPROVER_assume(__iv__return_expr_isButtonPressed == 0 || __iv__return_expr_isButtonPressed == 1);
	return __iv__return_expr_isButtonPressed;
}
complexity: 3
accuracy: 83.83%
coverage: 100.00%
# constraints: 10

run cbmc: (unwind: 150, timeout: 86400 sec)
cbmc running time: 46.153 sec

verification results: 
property 'assert((state != 2));' is not violated.

total CBMC running time: 303.389 sec
total true alarm finding time: 0.0 sec
total refinement time: 0.0 sec, # of refinements: 0
peak memory usage: 2037.44 MB

call elev_get_button_signal((elev_button_type_t)(button), floorNum) (call id 49)
call floorIsOrdered(previousMainFloor, motorDirection) (call id 20)
call isButtonPressed() (call id 11)
call floorIsOrdered(previousMainFloor, motorDirection) (call id 14)
Iteration 0:
signed int __iv__elev_get_button_signal_stub(elev_button_type_t button, signed int floor) {
	signed int __iv__return_expr_elev_get_button_signal;
	signed int __iv__nondet_input_elev_get_button_signal_1 = __VERIFIER_nondet_signed_int();
	__iv__return_expr_elev_get_button_signal = __iv__nondet_input_elev_get_button_signal_1;
	__CPROVER_assume(__iv__return_expr_elev_get_button_signal == 0 || __iv__return_expr_elev_get_button_signal == 1);
	return __iv__return_expr_elev_get_button_signal;
}
complexity: 0
accuracy: 100.00%
coverage: 100.00%
# constraints: 2

signed int __iv__floorIsOrdered_stub(signed int floorNum, signed int motorDir) {
	signed int __iv__return_expr_floorIsOrdered;
	if(1==orderMatrix[2][0]) __iv__return_expr_floorIsOrdered = 1; else if(motorDir>=2) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[0][3]==motorDir) __iv__return_expr_floorIsOrdered = 1; else __iv__return_expr_floorIsOrdered = 0; 
	__CPROVER_assume(__iv__return_expr_floorIsOrdered == 0 || __iv__return_expr_floorIsOrdered == 1);
	return __iv__return_expr_floorIsOrdered;
}
complexity: 3
accuracy: 77.56%
coverage: 100.00%
# constraints: 9

signed int __iv__isButtonPressed_stub() {
	signed int __iv__return_expr_isButtonPressed;
	if(1==orderMatrix[0][0]) __iv__return_expr_isButtonPressed = orderMatrix[0][0]; else if(1==orderMatrix[0][3]) __iv__return_expr_isButtonPressed = 1; else if(1==orderMatrix[2][1]) __iv__return_expr_isButtonPressed = 1; else __iv__return_expr_isButtonPressed = 0; 
	__CPROVER_assume(__iv__return_expr_isButtonPressed == 0 || __iv__return_expr_isButtonPressed == 1);
	return __iv__return_expr_isButtonPressed;
}
complexity: 3
accuracy: 83.83%
coverage: 100.00%
# constraints: 10

run cbmc: (unwind: 160, timeout: 86400 sec)
cbmc running time: 40.526 sec

verification results: 
property 'assert((state != 2));' is not violated.

total CBMC running time: 343.915 sec
total true alarm finding time: 0.0 sec
total refinement time: 0.0 sec, # of refinements: 0
peak memory usage: 2303.34 MB

call elev_get_button_signal((elev_button_type_t)(button), floorNum) (call id 49)
call floorIsOrdered(previousMainFloor, motorDirection) (call id 20)
call isButtonPressed() (call id 11)
call floorIsOrdered(previousMainFloor, motorDirection) (call id 14)
Iteration 0:
signed int __iv__elev_get_button_signal_stub(elev_button_type_t button, signed int floor) {
	signed int __iv__return_expr_elev_get_button_signal;
	signed int __iv__nondet_input_elev_get_button_signal_1 = __VERIFIER_nondet_signed_int();
	__iv__return_expr_elev_get_button_signal = __iv__nondet_input_elev_get_button_signal_1;
	__CPROVER_assume(__iv__return_expr_elev_get_button_signal == 0 || __iv__return_expr_elev_get_button_signal == 1);
	return __iv__return_expr_elev_get_button_signal;
}
complexity: 0
accuracy: 100.00%
coverage: 100.00%
# constraints: 2

signed int __iv__floorIsOrdered_stub(signed int floorNum, signed int motorDir) {
	signed int __iv__return_expr_floorIsOrdered;
	if(1==orderMatrix[2][0]) __iv__return_expr_floorIsOrdered = 1; else if(motorDir>=2) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[0][3]==motorDir) __iv__return_expr_floorIsOrdered = 1; else __iv__return_expr_floorIsOrdered = 0; 
	__CPROVER_assume(__iv__return_expr_floorIsOrdered == 0 || __iv__return_expr_floorIsOrdered == 1);
	return __iv__return_expr_floorIsOrdered;
}
complexity: 3
accuracy: 77.56%
coverage: 100.00%
# constraints: 9

signed int __iv__isButtonPressed_stub() {
	signed int __iv__return_expr_isButtonPressed;
	if(1==orderMatrix[0][0]) __iv__return_expr_isButtonPressed = orderMatrix[0][0]; else if(1==orderMatrix[0][3]) __iv__return_expr_isButtonPressed = 1; else if(1==orderMatrix[2][1]) __iv__return_expr_isButtonPressed = 1; else __iv__return_expr_isButtonPressed = 0; 
	__CPROVER_assume(__iv__return_expr_isButtonPressed == 0 || __iv__return_expr_isButtonPressed == 1);
	return __iv__return_expr_isButtonPressed;
}
complexity: 3
accuracy: 83.83%
coverage: 100.00%
# constraints: 10

run cbmc: (unwind: 170, timeout: 86400 sec)
cbmc running time: 43.397 sec

verification results: 
property 'assert((state != 2));' is not violated.

total CBMC running time: 387.312 sec
total true alarm finding time: 0.0 sec
total refinement time: 0.0 sec, # of refinements: 0
peak memory usage: 2303.34 MB

call elev_get_button_signal((elev_button_type_t)(button), floorNum) (call id 49)
call floorIsOrdered(previousMainFloor, motorDirection) (call id 20)
call isButtonPressed() (call id 11)
call floorIsOrdered(previousMainFloor, motorDirection) (call id 14)
Iteration 0:
signed int __iv__elev_get_button_signal_stub(elev_button_type_t button, signed int floor) {
	signed int __iv__return_expr_elev_get_button_signal;
	signed int __iv__nondet_input_elev_get_button_signal_1 = __VERIFIER_nondet_signed_int();
	__iv__return_expr_elev_get_button_signal = __iv__nondet_input_elev_get_button_signal_1;
	__CPROVER_assume(__iv__return_expr_elev_get_button_signal == 0 || __iv__return_expr_elev_get_button_signal == 1);
	return __iv__return_expr_elev_get_button_signal;
}
complexity: 0
accuracy: 100.00%
coverage: 100.00%
# constraints: 2

signed int __iv__floorIsOrdered_stub(signed int floorNum, signed int motorDir) {
	signed int __iv__return_expr_floorIsOrdered;
	if(1==orderMatrix[2][0]) __iv__return_expr_floorIsOrdered = 1; else if(motorDir>=2) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[0][3]==motorDir) __iv__return_expr_floorIsOrdered = 1; else __iv__return_expr_floorIsOrdered = 0; 
	__CPROVER_assume(__iv__return_expr_floorIsOrdered == 0 || __iv__return_expr_floorIsOrdered == 1);
	return __iv__return_expr_floorIsOrdered;
}
complexity: 3
accuracy: 77.56%
coverage: 100.00%
# constraints: 9

signed int __iv__isButtonPressed_stub() {
	signed int __iv__return_expr_isButtonPressed;
	if(1==orderMatrix[0][0]) __iv__return_expr_isButtonPressed = orderMatrix[0][0]; else if(1==orderMatrix[0][3]) __iv__return_expr_isButtonPressed = 1; else if(1==orderMatrix[2][1]) __iv__return_expr_isButtonPressed = 1; else __iv__return_expr_isButtonPressed = 0; 
	__CPROVER_assume(__iv__return_expr_isButtonPressed == 0 || __iv__return_expr_isButtonPressed == 1);
	return __iv__return_expr_isButtonPressed;
}
complexity: 3
accuracy: 83.83%
coverage: 100.00%
# constraints: 10

run cbmc: (unwind: 180, timeout: 86400 sec)
cbmc running time: 51.574 sec

verification results: 
property 'assert((state != 2));' is not violated.

total CBMC running time: 438.886 sec
total true alarm finding time: 0.0 sec
total refinement time: 0.0 sec, # of refinements: 0
peak memory usage: 2434.58 MB

call elev_get_button_signal((elev_button_type_t)(button), floorNum) (call id 49)
call floorIsOrdered(previousMainFloor, motorDirection) (call id 20)
call isButtonPressed() (call id 11)
call floorIsOrdered(previousMainFloor, motorDirection) (call id 14)
Iteration 0:
signed int __iv__elev_get_button_signal_stub(elev_button_type_t button, signed int floor) {
	signed int __iv__return_expr_elev_get_button_signal;
	signed int __iv__nondet_input_elev_get_button_signal_1 = __VERIFIER_nondet_signed_int();
	__iv__return_expr_elev_get_button_signal = __iv__nondet_input_elev_get_button_signal_1;
	__CPROVER_assume(__iv__return_expr_elev_get_button_signal == 0 || __iv__return_expr_elev_get_button_signal == 1);
	return __iv__return_expr_elev_get_button_signal;
}
complexity: 0
accuracy: 100.00%
coverage: 100.00%
# constraints: 2

signed int __iv__floorIsOrdered_stub(signed int floorNum, signed int motorDir) {
	signed int __iv__return_expr_floorIsOrdered;
	if(1==orderMatrix[2][0]) __iv__return_expr_floorIsOrdered = 1; else if(motorDir>=2) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[0][3]==motorDir) __iv__return_expr_floorIsOrdered = 1; else __iv__return_expr_floorIsOrdered = 0; 
	__CPROVER_assume(__iv__return_expr_floorIsOrdered == 0 || __iv__return_expr_floorIsOrdered == 1);
	return __iv__return_expr_floorIsOrdered;
}
complexity: 3
accuracy: 77.56%
coverage: 100.00%
# constraints: 9

signed int __iv__isButtonPressed_stub() {
	signed int __iv__return_expr_isButtonPressed;
	if(1==orderMatrix[0][0]) __iv__return_expr_isButtonPressed = orderMatrix[0][0]; else if(1==orderMatrix[0][3]) __iv__return_expr_isButtonPressed = 1; else if(1==orderMatrix[2][1]) __iv__return_expr_isButtonPressed = 1; else __iv__return_expr_isButtonPressed = 0; 
	__CPROVER_assume(__iv__return_expr_isButtonPressed == 0 || __iv__return_expr_isButtonPressed == 1);
	return __iv__return_expr_isButtonPressed;
}
complexity: 3
accuracy: 83.83%
coverage: 100.00%
# constraints: 10

run cbmc: (unwind: 190, timeout: 86400 sec)
cbmc running time: 53.724 sec

verification results: 
property 'assert((state != 2));' is not violated.

total CBMC running time: 492.61 sec
total true alarm finding time: 0.0 sec
total refinement time: 0.0 sec, # of refinements: 0
peak memory usage: 2727.25 MB

call elev_get_button_signal((elev_button_type_t)(button), floorNum) (call id 49)
call floorIsOrdered(previousMainFloor, motorDirection) (call id 20)
call isButtonPressed() (call id 11)
call floorIsOrdered(previousMainFloor, motorDirection) (call id 14)
Iteration 0:
signed int __iv__elev_get_button_signal_stub(elev_button_type_t button, signed int floor) {
	signed int __iv__return_expr_elev_get_button_signal;
	signed int __iv__nondet_input_elev_get_button_signal_1 = __VERIFIER_nondet_signed_int();
	__iv__return_expr_elev_get_button_signal = __iv__nondet_input_elev_get_button_signal_1;
	__CPROVER_assume(__iv__return_expr_elev_get_button_signal == 0 || __iv__return_expr_elev_get_button_signal == 1);
	return __iv__return_expr_elev_get_button_signal;
}
complexity: 0
accuracy: 100.00%
coverage: 100.00%
# constraints: 2

signed int __iv__floorIsOrdered_stub(signed int floorNum, signed int motorDir) {
	signed int __iv__return_expr_floorIsOrdered;
	if(1==orderMatrix[2][0]) __iv__return_expr_floorIsOrdered = 1; else if(motorDir>=2) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[0][3]==motorDir) __iv__return_expr_floorIsOrdered = 1; else __iv__return_expr_floorIsOrdered = 0; 
	__CPROVER_assume(__iv__return_expr_floorIsOrdered == 0 || __iv__return_expr_floorIsOrdered == 1);
	return __iv__return_expr_floorIsOrdered;
}
complexity: 3
accuracy: 77.56%
coverage: 100.00%
# constraints: 9

signed int __iv__isButtonPressed_stub() {
	signed int __iv__return_expr_isButtonPressed;
	if(1==orderMatrix[0][0]) __iv__return_expr_isButtonPressed = orderMatrix[0][0]; else if(1==orderMatrix[0][3]) __iv__return_expr_isButtonPressed = 1; else if(1==orderMatrix[2][1]) __iv__return_expr_isButtonPressed = 1; else __iv__return_expr_isButtonPressed = 0; 
	__CPROVER_assume(__iv__return_expr_isButtonPressed == 0 || __iv__return_expr_isButtonPressed == 1);
	return __iv__return_expr_isButtonPressed;
}
complexity: 3
accuracy: 83.83%
coverage: 100.00%
# constraints: 10

run cbmc: (unwind: 200, timeout: 86400 sec)
cbmc running time: 64.384 sec

verification results: 
property 'assert((state != 2));' is not violated.

total CBMC running time: 556.994 sec
total true alarm finding time: 0.0 sec
total refinement time: 0.0 sec, # of refinements: 0
peak memory usage: 2898.55 MB

call elev_get_button_signal((elev_button_type_t)(button), floorNum) (call id 49)
call floorIsOrdered(previousMainFloor, motorDirection) (call id 20)
call isButtonPressed() (call id 11)
call floorIsOrdered(previousMainFloor, motorDirection) (call id 14)
Iteration 0:
signed int __iv__elev_get_button_signal_stub(elev_button_type_t button, signed int floor) {
	signed int __iv__return_expr_elev_get_button_signal;
	signed int __iv__nondet_input_elev_get_button_signal_1 = __VERIFIER_nondet_signed_int();
	__iv__return_expr_elev_get_button_signal = __iv__nondet_input_elev_get_button_signal_1;
	__CPROVER_assume(__iv__return_expr_elev_get_button_signal == 0 || __iv__return_expr_elev_get_button_signal == 1);
	return __iv__return_expr_elev_get_button_signal;
}
complexity: 0
accuracy: 100.00%
coverage: 100.00%
# constraints: 2

signed int __iv__floorIsOrdered_stub(signed int floorNum, signed int motorDir) {
	signed int __iv__return_expr_floorIsOrdered;
	if(1==orderMatrix[2][0]) __iv__return_expr_floorIsOrdered = 1; else if(motorDir>=2) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[0][3]==motorDir) __iv__return_expr_floorIsOrdered = 1; else __iv__return_expr_floorIsOrdered = 0; 
	__CPROVER_assume(__iv__return_expr_floorIsOrdered == 0 || __iv__return_expr_floorIsOrdered == 1);
	return __iv__return_expr_floorIsOrdered;
}
complexity: 3
accuracy: 77.56%
coverage: 100.00%
# constraints: 9

signed int __iv__isButtonPressed_stub() {
	signed int __iv__return_expr_isButtonPressed;
	if(1==orderMatrix[0][0]) __iv__return_expr_isButtonPressed = orderMatrix[0][0]; else if(1==orderMatrix[0][3]) __iv__return_expr_isButtonPressed = 1; else if(1==orderMatrix[2][1]) __iv__return_expr_isButtonPressed = 1; else __iv__return_expr_isButtonPressed = 0; 
	__CPROVER_assume(__iv__return_expr_isButtonPressed == 0 || __iv__return_expr_isButtonPressed == 1);
	return __iv__return_expr_isButtonPressed;
}
complexity: 3
accuracy: 83.83%
coverage: 100.00%
# constraints: 10

run cbmc: (unwind: 210, timeout: 86400 sec)
cbmc running time: 55.842 sec

verification results: 
property 'assert((state != 2));' is not violated.

total CBMC running time: 612.836 sec
total true alarm finding time: 0.0 sec
total refinement time: 0.0 sec, # of refinements: 0
peak memory usage: 2916.09 MB

call elev_get_button_signal((elev_button_type_t)(button), floorNum) (call id 49)
call floorIsOrdered(previousMainFloor, motorDirection) (call id 20)
call isButtonPressed() (call id 11)
call floorIsOrdered(previousMainFloor, motorDirection) (call id 14)
Iteration 0:
signed int __iv__elev_get_button_signal_stub(elev_button_type_t button, signed int floor) {
	signed int __iv__return_expr_elev_get_button_signal;
	signed int __iv__nondet_input_elev_get_button_signal_1 = __VERIFIER_nondet_signed_int();
	__iv__return_expr_elev_get_button_signal = __iv__nondet_input_elev_get_button_signal_1;
	__CPROVER_assume(__iv__return_expr_elev_get_button_signal == 0 || __iv__return_expr_elev_get_button_signal == 1);
	return __iv__return_expr_elev_get_button_signal;
}
complexity: 0
accuracy: 100.00%
coverage: 100.00%
# constraints: 2

signed int __iv__floorIsOrdered_stub(signed int floorNum, signed int motorDir) {
	signed int __iv__return_expr_floorIsOrdered;
	if(1==orderMatrix[2][0]) __iv__return_expr_floorIsOrdered = 1; else if(motorDir>=2) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[0][3]==motorDir) __iv__return_expr_floorIsOrdered = 1; else __iv__return_expr_floorIsOrdered = 0; 
	__CPROVER_assume(__iv__return_expr_floorIsOrdered == 0 || __iv__return_expr_floorIsOrdered == 1);
	return __iv__return_expr_floorIsOrdered;
}
complexity: 3
accuracy: 77.56%
coverage: 100.00%
# constraints: 9

signed int __iv__isButtonPressed_stub() {
	signed int __iv__return_expr_isButtonPressed;
	if(1==orderMatrix[0][0]) __iv__return_expr_isButtonPressed = orderMatrix[0][0]; else if(1==orderMatrix[0][3]) __iv__return_expr_isButtonPressed = 1; else if(1==orderMatrix[2][1]) __iv__return_expr_isButtonPressed = 1; else __iv__return_expr_isButtonPressed = 0; 
	__CPROVER_assume(__iv__return_expr_isButtonPressed == 0 || __iv__return_expr_isButtonPressed == 1);
	return __iv__return_expr_isButtonPressed;
}
complexity: 3
accuracy: 83.83%
coverage: 100.00%
# constraints: 10

run cbmc: (unwind: 220, timeout: 86400 sec)
cbmc running time: 63.563 sec

verification results: 
property 'assert((state != 2));' is not violated.

total CBMC running time: 676.399 sec
total true alarm finding time: 0.0 sec
total refinement time: 0.0 sec, # of refinements: 0
peak memory usage: 3233.76 MB

call elev_get_button_signal((elev_button_type_t)(button), floorNum) (call id 49)
call floorIsOrdered(previousMainFloor, motorDirection) (call id 20)
call isButtonPressed() (call id 11)
call floorIsOrdered(previousMainFloor, motorDirection) (call id 14)
Iteration 0:
signed int __iv__elev_get_button_signal_stub(elev_button_type_t button, signed int floor) {
	signed int __iv__return_expr_elev_get_button_signal;
	signed int __iv__nondet_input_elev_get_button_signal_1 = __VERIFIER_nondet_signed_int();
	__iv__return_expr_elev_get_button_signal = __iv__nondet_input_elev_get_button_signal_1;
	__CPROVER_assume(__iv__return_expr_elev_get_button_signal == 0 || __iv__return_expr_elev_get_button_signal == 1);
	return __iv__return_expr_elev_get_button_signal;
}
complexity: 0
accuracy: 100.00%
coverage: 100.00%
# constraints: 2

signed int __iv__floorIsOrdered_stub(signed int floorNum, signed int motorDir) {
	signed int __iv__return_expr_floorIsOrdered;
	if(1==orderMatrix[2][0]) __iv__return_expr_floorIsOrdered = 1; else if(motorDir>=2) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[0][3]==motorDir) __iv__return_expr_floorIsOrdered = 1; else __iv__return_expr_floorIsOrdered = 0; 
	__CPROVER_assume(__iv__return_expr_floorIsOrdered == 0 || __iv__return_expr_floorIsOrdered == 1);
	return __iv__return_expr_floorIsOrdered;
}
complexity: 3
accuracy: 77.56%
coverage: 100.00%
# constraints: 9

signed int __iv__isButtonPressed_stub() {
	signed int __iv__return_expr_isButtonPressed;
	if(1==orderMatrix[0][0]) __iv__return_expr_isButtonPressed = orderMatrix[0][0]; else if(1==orderMatrix[0][3]) __iv__return_expr_isButtonPressed = 1; else if(1==orderMatrix[2][1]) __iv__return_expr_isButtonPressed = 1; else __iv__return_expr_isButtonPressed = 0; 
	__CPROVER_assume(__iv__return_expr_isButtonPressed == 0 || __iv__return_expr_isButtonPressed == 1);
	return __iv__return_expr_isButtonPressed;
}
complexity: 3
accuracy: 83.83%
coverage: 100.00%
# constraints: 10

run cbmc: (unwind: 230, timeout: 86400 sec)
cbmc running time: 73.431 sec

verification results: 
property 'assert((state != 2));' is not violated.

total CBMC running time: 749.83 sec
total true alarm finding time: 0.0 sec
total refinement time: 0.0 sec, # of refinements: 0
peak memory usage: 3370.59 MB

call elev_get_button_signal((elev_button_type_t)(button), floorNum) (call id 49)
call floorIsOrdered(previousMainFloor, motorDirection) (call id 20)
call isButtonPressed() (call id 11)
call floorIsOrdered(previousMainFloor, motorDirection) (call id 14)
Iteration 0:
signed int __iv__elev_get_button_signal_stub(elev_button_type_t button, signed int floor) {
	signed int __iv__return_expr_elev_get_button_signal;
	signed int __iv__nondet_input_elev_get_button_signal_1 = __VERIFIER_nondet_signed_int();
	__iv__return_expr_elev_get_button_signal = __iv__nondet_input_elev_get_button_signal_1;
	__CPROVER_assume(__iv__return_expr_elev_get_button_signal == 0 || __iv__return_expr_elev_get_button_signal == 1);
	return __iv__return_expr_elev_get_button_signal;
}
complexity: 0
accuracy: 100.00%
coverage: 100.00%
# constraints: 2

signed int __iv__floorIsOrdered_stub(signed int floorNum, signed int motorDir) {
	signed int __iv__return_expr_floorIsOrdered;
	if(1==orderMatrix[2][0]) __iv__return_expr_floorIsOrdered = 1; else if(motorDir>=2) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[0][3]==motorDir) __iv__return_expr_floorIsOrdered = 1; else __iv__return_expr_floorIsOrdered = 0; 
	__CPROVER_assume(__iv__return_expr_floorIsOrdered == 0 || __iv__return_expr_floorIsOrdered == 1);
	return __iv__return_expr_floorIsOrdered;
}
complexity: 3
accuracy: 77.56%
coverage: 100.00%
# constraints: 9

signed int __iv__isButtonPressed_stub() {
	signed int __iv__return_expr_isButtonPressed;
	if(1==orderMatrix[0][0]) __iv__return_expr_isButtonPressed = orderMatrix[0][0]; else if(1==orderMatrix[0][3]) __iv__return_expr_isButtonPressed = 1; else if(1==orderMatrix[2][1]) __iv__return_expr_isButtonPressed = 1; else __iv__return_expr_isButtonPressed = 0; 
	__CPROVER_assume(__iv__return_expr_isButtonPressed == 0 || __iv__return_expr_isButtonPressed == 1);
	return __iv__return_expr_isButtonPressed;
}
complexity: 3
accuracy: 83.83%
coverage: 100.00%
# constraints: 10

run cbmc: (unwind: 240, timeout: 86400 sec)
cbmc running time: 59.393 sec

verification results: 
property 'assert((state != 2));' is not violated.

total CBMC running time: 809.223 sec
total true alarm finding time: 0.0 sec
total refinement time: 0.0 sec, # of refinements: 0
peak memory usage: 3370.59 MB

call elev_get_button_signal((elev_button_type_t)(button), floorNum) (call id 49)
call floorIsOrdered(previousMainFloor, motorDirection) (call id 20)
call isButtonPressed() (call id 11)
call floorIsOrdered(previousMainFloor, motorDirection) (call id 14)
Iteration 0:
signed int __iv__elev_get_button_signal_stub(elev_button_type_t button, signed int floor) {
	signed int __iv__return_expr_elev_get_button_signal;
	signed int __iv__nondet_input_elev_get_button_signal_1 = __VERIFIER_nondet_signed_int();
	__iv__return_expr_elev_get_button_signal = __iv__nondet_input_elev_get_button_signal_1;
	__CPROVER_assume(__iv__return_expr_elev_get_button_signal == 0 || __iv__return_expr_elev_get_button_signal == 1);
	return __iv__return_expr_elev_get_button_signal;
}
complexity: 0
accuracy: 100.00%
coverage: 100.00%
# constraints: 2

signed int __iv__floorIsOrdered_stub(signed int floorNum, signed int motorDir) {
	signed int __iv__return_expr_floorIsOrdered;
	if(1==orderMatrix[2][0]) __iv__return_expr_floorIsOrdered = 1; else if(motorDir>=2) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[0][3]==motorDir) __iv__return_expr_floorIsOrdered = 1; else __iv__return_expr_floorIsOrdered = 0; 
	__CPROVER_assume(__iv__return_expr_floorIsOrdered == 0 || __iv__return_expr_floorIsOrdered == 1);
	return __iv__return_expr_floorIsOrdered;
}
complexity: 3
accuracy: 77.56%
coverage: 100.00%
# constraints: 9

signed int __iv__isButtonPressed_stub() {
	signed int __iv__return_expr_isButtonPressed;
	if(1==orderMatrix[0][0]) __iv__return_expr_isButtonPressed = orderMatrix[0][0]; else if(1==orderMatrix[0][3]) __iv__return_expr_isButtonPressed = 1; else if(1==orderMatrix[2][1]) __iv__return_expr_isButtonPressed = 1; else __iv__return_expr_isButtonPressed = 0; 
	__CPROVER_assume(__iv__return_expr_isButtonPressed == 0 || __iv__return_expr_isButtonPressed == 1);
	return __iv__return_expr_isButtonPressed;
}
complexity: 3
accuracy: 83.83%
coverage: 100.00%
# constraints: 10

run cbmc: (unwind: 250, timeout: 86400 sec)
cbmc running time: 75.581 sec

verification results: 
property 'assert((state != 2));' is not violated.

total CBMC running time: 884.804 sec
total true alarm finding time: 0.0 sec
total refinement time: 0.0 sec, # of refinements: 0
peak memory usage: 3461.09 MB

call elev_get_button_signal((elev_button_type_t)(button), floorNum) (call id 49)
call floorIsOrdered(previousMainFloor, motorDirection) (call id 20)
call isButtonPressed() (call id 11)
call floorIsOrdered(previousMainFloor, motorDirection) (call id 14)
Iteration 0:
signed int __iv__elev_get_button_signal_stub(elev_button_type_t button, signed int floor) {
	signed int __iv__return_expr_elev_get_button_signal;
	signed int __iv__nondet_input_elev_get_button_signal_1 = __VERIFIER_nondet_signed_int();
	__iv__return_expr_elev_get_button_signal = __iv__nondet_input_elev_get_button_signal_1;
	__CPROVER_assume(__iv__return_expr_elev_get_button_signal == 0 || __iv__return_expr_elev_get_button_signal == 1);
	return __iv__return_expr_elev_get_button_signal;
}
complexity: 0
accuracy: 100.00%
coverage: 100.00%
# constraints: 2

signed int __iv__floorIsOrdered_stub(signed int floorNum, signed int motorDir) {
	signed int __iv__return_expr_floorIsOrdered;
	if(1==orderMatrix[2][0]) __iv__return_expr_floorIsOrdered = 1; else if(motorDir>=2) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[0][3]==motorDir) __iv__return_expr_floorIsOrdered = 1; else __iv__return_expr_floorIsOrdered = 0; 
	__CPROVER_assume(__iv__return_expr_floorIsOrdered == 0 || __iv__return_expr_floorIsOrdered == 1);
	return __iv__return_expr_floorIsOrdered;
}
complexity: 3
accuracy: 77.56%
coverage: 100.00%
# constraints: 9

signed int __iv__isButtonPressed_stub() {
	signed int __iv__return_expr_isButtonPressed;
	if(1==orderMatrix[0][0]) __iv__return_expr_isButtonPressed = orderMatrix[0][0]; else if(1==orderMatrix[0][3]) __iv__return_expr_isButtonPressed = 1; else if(1==orderMatrix[2][1]) __iv__return_expr_isButtonPressed = 1; else __iv__return_expr_isButtonPressed = 0; 
	__CPROVER_assume(__iv__return_expr_isButtonPressed == 0 || __iv__return_expr_isButtonPressed == 1);
	return __iv__return_expr_isButtonPressed;
}
complexity: 3
accuracy: 83.83%
coverage: 100.00%
# constraints: 10

run cbmc: (unwind: 260, timeout: 86400 sec)
cbmc running time: 90.271 sec

verification results: 
property 'assert((state != 2));' is not violated.

total CBMC running time: 975.075 sec
total true alarm finding time: 0.0 sec
total refinement time: 0.0 sec, # of refinements: 0
peak memory usage: 3764.28 MB

call elev_get_button_signal((elev_button_type_t)(button), floorNum) (call id 49)
call floorIsOrdered(previousMainFloor, motorDirection) (call id 20)
call isButtonPressed() (call id 11)
call floorIsOrdered(previousMainFloor, motorDirection) (call id 14)
Iteration 0:
signed int __iv__elev_get_button_signal_stub(elev_button_type_t button, signed int floor) {
	signed int __iv__return_expr_elev_get_button_signal;
	signed int __iv__nondet_input_elev_get_button_signal_1 = __VERIFIER_nondet_signed_int();
	__iv__return_expr_elev_get_button_signal = __iv__nondet_input_elev_get_button_signal_1;
	__CPROVER_assume(__iv__return_expr_elev_get_button_signal == 0 || __iv__return_expr_elev_get_button_signal == 1);
	return __iv__return_expr_elev_get_button_signal;
}
complexity: 0
accuracy: 100.00%
coverage: 100.00%
# constraints: 2

signed int __iv__floorIsOrdered_stub(signed int floorNum, signed int motorDir) {
	signed int __iv__return_expr_floorIsOrdered;
	if(1==orderMatrix[2][0]) __iv__return_expr_floorIsOrdered = 1; else if(motorDir>=2) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[0][3]==motorDir) __iv__return_expr_floorIsOrdered = 1; else __iv__return_expr_floorIsOrdered = 0; 
	__CPROVER_assume(__iv__return_expr_floorIsOrdered == 0 || __iv__return_expr_floorIsOrdered == 1);
	return __iv__return_expr_floorIsOrdered;
}
complexity: 3
accuracy: 77.56%
coverage: 100.00%
# constraints: 9

signed int __iv__isButtonPressed_stub() {
	signed int __iv__return_expr_isButtonPressed;
	if(1==orderMatrix[0][0]) __iv__return_expr_isButtonPressed = orderMatrix[0][0]; else if(1==orderMatrix[0][3]) __iv__return_expr_isButtonPressed = 1; else if(1==orderMatrix[2][1]) __iv__return_expr_isButtonPressed = 1; else __iv__return_expr_isButtonPressed = 0; 
	__CPROVER_assume(__iv__return_expr_isButtonPressed == 0 || __iv__return_expr_isButtonPressed == 1);
	return __iv__return_expr_isButtonPressed;
}
complexity: 3
accuracy: 83.83%
coverage: 100.00%
# constraints: 10

run cbmc: (unwind: 270, timeout: 86400 sec)
cbmc running time: 119.369 sec

verification results: 
property 'assert((state != 2));' is not violated.

total CBMC running time: 1094.444 sec
total true alarm finding time: 0.0 sec
total refinement time: 0.0 sec, # of refinements: 0
peak memory usage: 3764.28 MB

call elev_get_button_signal((elev_button_type_t)(button), floorNum) (call id 49)
call floorIsOrdered(previousMainFloor, motorDirection) (call id 20)
call isButtonPressed() (call id 11)
call floorIsOrdered(previousMainFloor, motorDirection) (call id 14)
Iteration 0:
signed int __iv__elev_get_button_signal_stub(elev_button_type_t button, signed int floor) {
	signed int __iv__return_expr_elev_get_button_signal;
	signed int __iv__nondet_input_elev_get_button_signal_1 = __VERIFIER_nondet_signed_int();
	__iv__return_expr_elev_get_button_signal = __iv__nondet_input_elev_get_button_signal_1;
	__CPROVER_assume(__iv__return_expr_elev_get_button_signal == 0 || __iv__return_expr_elev_get_button_signal == 1);
	return __iv__return_expr_elev_get_button_signal;
}
complexity: 0
accuracy: 100.00%
coverage: 100.00%
# constraints: 2

signed int __iv__floorIsOrdered_stub(signed int floorNum, signed int motorDir) {
	signed int __iv__return_expr_floorIsOrdered;
	if(1==orderMatrix[2][0]) __iv__return_expr_floorIsOrdered = 1; else if(motorDir>=2) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[0][3]==motorDir) __iv__return_expr_floorIsOrdered = 1; else __iv__return_expr_floorIsOrdered = 0; 
	__CPROVER_assume(__iv__return_expr_floorIsOrdered == 0 || __iv__return_expr_floorIsOrdered == 1);
	return __iv__return_expr_floorIsOrdered;
}
complexity: 3
accuracy: 77.56%
coverage: 100.00%
# constraints: 9

signed int __iv__isButtonPressed_stub() {
	signed int __iv__return_expr_isButtonPressed;
	if(1==orderMatrix[0][0]) __iv__return_expr_isButtonPressed = orderMatrix[0][0]; else if(1==orderMatrix[0][3]) __iv__return_expr_isButtonPressed = 1; else if(1==orderMatrix[2][1]) __iv__return_expr_isButtonPressed = 1; else __iv__return_expr_isButtonPressed = 0; 
	__CPROVER_assume(__iv__return_expr_isButtonPressed == 0 || __iv__return_expr_isButtonPressed == 1);
	return __iv__return_expr_isButtonPressed;
}
complexity: 3
accuracy: 83.83%
coverage: 100.00%
# constraints: 10

run cbmc: (unwind: 280, timeout: 86400 sec)
cbmc running time: 116.174 sec

verification results: 
property 'assert((state != 2));' is not violated.

total CBMC running time: 1210.618 sec
total true alarm finding time: 0.0 sec
total refinement time: 0.0 sec, # of refinements: 0
peak memory usage: 4111.34 MB

call elev_get_button_signal((elev_button_type_t)(button), floorNum) (call id 49)
call floorIsOrdered(previousMainFloor, motorDirection) (call id 20)
call isButtonPressed() (call id 11)
call floorIsOrdered(previousMainFloor, motorDirection) (call id 14)
Iteration 0:
signed int __iv__elev_get_button_signal_stub(elev_button_type_t button, signed int floor) {
	signed int __iv__return_expr_elev_get_button_signal;
	signed int __iv__nondet_input_elev_get_button_signal_1 = __VERIFIER_nondet_signed_int();
	__iv__return_expr_elev_get_button_signal = __iv__nondet_input_elev_get_button_signal_1;
	__CPROVER_assume(__iv__return_expr_elev_get_button_signal == 0 || __iv__return_expr_elev_get_button_signal == 1);
	return __iv__return_expr_elev_get_button_signal;
}
complexity: 0
accuracy: 100.00%
coverage: 100.00%
# constraints: 2

signed int __iv__floorIsOrdered_stub(signed int floorNum, signed int motorDir) {
	signed int __iv__return_expr_floorIsOrdered;
	if(1==orderMatrix[2][0]) __iv__return_expr_floorIsOrdered = 1; else if(motorDir>=2) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[0][3]==motorDir) __iv__return_expr_floorIsOrdered = 1; else __iv__return_expr_floorIsOrdered = 0; 
	__CPROVER_assume(__iv__return_expr_floorIsOrdered == 0 || __iv__return_expr_floorIsOrdered == 1);
	return __iv__return_expr_floorIsOrdered;
}
complexity: 3
accuracy: 77.56%
coverage: 100.00%
# constraints: 9

signed int __iv__isButtonPressed_stub() {
	signed int __iv__return_expr_isButtonPressed;
	if(1==orderMatrix[0][0]) __iv__return_expr_isButtonPressed = orderMatrix[0][0]; else if(1==orderMatrix[0][3]) __iv__return_expr_isButtonPressed = 1; else if(1==orderMatrix[2][1]) __iv__return_expr_isButtonPressed = 1; else __iv__return_expr_isButtonPressed = 0; 
	__CPROVER_assume(__iv__return_expr_isButtonPressed == 0 || __iv__return_expr_isButtonPressed == 1);
	return __iv__return_expr_isButtonPressed;
}
complexity: 3
accuracy: 83.83%
coverage: 100.00%
# constraints: 10

run cbmc: (unwind: 290, timeout: 86400 sec)
cbmc running time: 97.48 sec

verification results: 
property 'assert((state != 2));' is not violated.

total CBMC running time: 1308.098 sec
total true alarm finding time: 0.0 sec
total refinement time: 0.0 sec, # of refinements: 0
peak memory usage: 4111.34 MB

call elev_get_button_signal((elev_button_type_t)(button), floorNum) (call id 49)
call floorIsOrdered(previousMainFloor, motorDirection) (call id 20)
call isButtonPressed() (call id 11)
call floorIsOrdered(previousMainFloor, motorDirection) (call id 14)
Iteration 0:
signed int __iv__elev_get_button_signal_stub(elev_button_type_t button, signed int floor) {
	signed int __iv__return_expr_elev_get_button_signal;
	signed int __iv__nondet_input_elev_get_button_signal_1 = __VERIFIER_nondet_signed_int();
	__iv__return_expr_elev_get_button_signal = __iv__nondet_input_elev_get_button_signal_1;
	__CPROVER_assume(__iv__return_expr_elev_get_button_signal == 0 || __iv__return_expr_elev_get_button_signal == 1);
	return __iv__return_expr_elev_get_button_signal;
}
complexity: 0
accuracy: 100.00%
coverage: 100.00%
# constraints: 2

signed int __iv__floorIsOrdered_stub(signed int floorNum, signed int motorDir) {
	signed int __iv__return_expr_floorIsOrdered;
	if(1==orderMatrix[2][0]) __iv__return_expr_floorIsOrdered = 1; else if(motorDir>=2) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[0][3]==motorDir) __iv__return_expr_floorIsOrdered = 1; else __iv__return_expr_floorIsOrdered = 0; 
	__CPROVER_assume(__iv__return_expr_floorIsOrdered == 0 || __iv__return_expr_floorIsOrdered == 1);
	return __iv__return_expr_floorIsOrdered;
}
complexity: 3
accuracy: 77.56%
coverage: 100.00%
# constraints: 9

signed int __iv__isButtonPressed_stub() {
	signed int __iv__return_expr_isButtonPressed;
	if(1==orderMatrix[0][0]) __iv__return_expr_isButtonPressed = orderMatrix[0][0]; else if(1==orderMatrix[0][3]) __iv__return_expr_isButtonPressed = 1; else if(1==orderMatrix[2][1]) __iv__return_expr_isButtonPressed = 1; else __iv__return_expr_isButtonPressed = 0; 
	__CPROVER_assume(__iv__return_expr_isButtonPressed == 0 || __iv__return_expr_isButtonPressed == 1);
	return __iv__return_expr_isButtonPressed;
}
complexity: 3
accuracy: 83.83%
coverage: 100.00%
# constraints: 10

run cbmc: (unwind: 300, timeout: 86400 sec)
cbmc running time: 104.695 sec

verification results: 
property 'assert((state != 2));' is not violated.

total CBMC running time: 1412.793 sec
total true alarm finding time: 0.0 sec
total refinement time: 0.0 sec, # of refinements: 0
peak memory usage: 4385.51 MB

call elev_get_button_signal((elev_button_type_t)(button), floorNum) (call id 49)
call floorIsOrdered(previousMainFloor, motorDirection) (call id 20)
call isButtonPressed() (call id 11)
call floorIsOrdered(previousMainFloor, motorDirection) (call id 14)
Iteration 0:
signed int __iv__elev_get_button_signal_stub(elev_button_type_t button, signed int floor) {
	signed int __iv__return_expr_elev_get_button_signal;
	signed int __iv__nondet_input_elev_get_button_signal_1 = __VERIFIER_nondet_signed_int();
	__iv__return_expr_elev_get_button_signal = __iv__nondet_input_elev_get_button_signal_1;
	__CPROVER_assume(__iv__return_expr_elev_get_button_signal == 0 || __iv__return_expr_elev_get_button_signal == 1);
	return __iv__return_expr_elev_get_button_signal;
}
complexity: 0
accuracy: 100.00%
coverage: 100.00%
# constraints: 2

signed int __iv__floorIsOrdered_stub(signed int floorNum, signed int motorDir) {
	signed int __iv__return_expr_floorIsOrdered;
	if(1==orderMatrix[2][0]) __iv__return_expr_floorIsOrdered = 1; else if(motorDir>=2) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[0][3]==motorDir) __iv__return_expr_floorIsOrdered = 1; else __iv__return_expr_floorIsOrdered = 0; 
	__CPROVER_assume(__iv__return_expr_floorIsOrdered == 0 || __iv__return_expr_floorIsOrdered == 1);
	return __iv__return_expr_floorIsOrdered;
}
complexity: 3
accuracy: 77.56%
coverage: 100.00%
# constraints: 9

signed int __iv__isButtonPressed_stub() {
	signed int __iv__return_expr_isButtonPressed;
	if(1==orderMatrix[0][0]) __iv__return_expr_isButtonPressed = orderMatrix[0][0]; else if(1==orderMatrix[0][3]) __iv__return_expr_isButtonPressed = 1; else if(1==orderMatrix[2][1]) __iv__return_expr_isButtonPressed = 1; else __iv__return_expr_isButtonPressed = 0; 
	__CPROVER_assume(__iv__return_expr_isButtonPressed == 0 || __iv__return_expr_isButtonPressed == 1);
	return __iv__return_expr_isButtonPressed;
}
complexity: 3
accuracy: 83.83%
coverage: 100.00%
# constraints: 10

run cbmc: (unwind: 310, timeout: 86400 sec)
cbmc running time: 96.909 sec

verification results: 
property 'assert((state != 2));' is not violated.

total CBMC running time: 1509.702 sec
total true alarm finding time: 0.0 sec
total refinement time: 0.0 sec, # of refinements: 0
peak memory usage: 4478.16 MB

call elev_get_button_signal((elev_button_type_t)(button), floorNum) (call id 49)
call floorIsOrdered(previousMainFloor, motorDirection) (call id 20)
call isButtonPressed() (call id 11)
call floorIsOrdered(previousMainFloor, motorDirection) (call id 14)
Iteration 0:
signed int __iv__elev_get_button_signal_stub(elev_button_type_t button, signed int floor) {
	signed int __iv__return_expr_elev_get_button_signal;
	signed int __iv__nondet_input_elev_get_button_signal_1 = __VERIFIER_nondet_signed_int();
	__iv__return_expr_elev_get_button_signal = __iv__nondet_input_elev_get_button_signal_1;
	__CPROVER_assume(__iv__return_expr_elev_get_button_signal == 0 || __iv__return_expr_elev_get_button_signal == 1);
	return __iv__return_expr_elev_get_button_signal;
}
complexity: 0
accuracy: 100.00%
coverage: 100.00%
# constraints: 2

signed int __iv__floorIsOrdered_stub(signed int floorNum, signed int motorDir) {
	signed int __iv__return_expr_floorIsOrdered;
	if(1==orderMatrix[2][0]) __iv__return_expr_floorIsOrdered = 1; else if(motorDir>=2) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[0][3]==motorDir) __iv__return_expr_floorIsOrdered = 1; else __iv__return_expr_floorIsOrdered = 0; 
	__CPROVER_assume(__iv__return_expr_floorIsOrdered == 0 || __iv__return_expr_floorIsOrdered == 1);
	return __iv__return_expr_floorIsOrdered;
}
complexity: 3
accuracy: 77.56%
coverage: 100.00%
# constraints: 9

signed int __iv__isButtonPressed_stub() {
	signed int __iv__return_expr_isButtonPressed;
	if(1==orderMatrix[0][0]) __iv__return_expr_isButtonPressed = orderMatrix[0][0]; else if(1==orderMatrix[0][3]) __iv__return_expr_isButtonPressed = 1; else if(1==orderMatrix[2][1]) __iv__return_expr_isButtonPressed = 1; else __iv__return_expr_isButtonPressed = 0; 
	__CPROVER_assume(__iv__return_expr_isButtonPressed == 0 || __iv__return_expr_isButtonPressed == 1);
	return __iv__return_expr_isButtonPressed;
}
complexity: 3
accuracy: 83.83%
coverage: 100.00%
# constraints: 10

run cbmc: (unwind: 320, timeout: 86400 sec)
cbmc running time: 130.973 sec

verification results: 
property 'assert((state != 2));' is not violated.

total CBMC running time: 1640.675 sec
total true alarm finding time: 0.0 sec
total refinement time: 0.0 sec, # of refinements: 0
peak memory usage: 4617.02 MB

call elev_get_button_signal((elev_button_type_t)(button), floorNum) (call id 49)
call floorIsOrdered(previousMainFloor, motorDirection) (call id 20)
call isButtonPressed() (call id 11)
call floorIsOrdered(previousMainFloor, motorDirection) (call id 14)
Iteration 0:
signed int __iv__elev_get_button_signal_stub(elev_button_type_t button, signed int floor) {
	signed int __iv__return_expr_elev_get_button_signal;
	signed int __iv__nondet_input_elev_get_button_signal_1 = __VERIFIER_nondet_signed_int();
	__iv__return_expr_elev_get_button_signal = __iv__nondet_input_elev_get_button_signal_1;
	__CPROVER_assume(__iv__return_expr_elev_get_button_signal == 0 || __iv__return_expr_elev_get_button_signal == 1);
	return __iv__return_expr_elev_get_button_signal;
}
complexity: 0
accuracy: 100.00%
coverage: 100.00%
# constraints: 2

signed int __iv__floorIsOrdered_stub(signed int floorNum, signed int motorDir) {
	signed int __iv__return_expr_floorIsOrdered;
	if(1==orderMatrix[2][0]) __iv__return_expr_floorIsOrdered = 1; else if(motorDir>=2) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[0][3]==motorDir) __iv__return_expr_floorIsOrdered = 1; else __iv__return_expr_floorIsOrdered = 0; 
	__CPROVER_assume(__iv__return_expr_floorIsOrdered == 0 || __iv__return_expr_floorIsOrdered == 1);
	return __iv__return_expr_floorIsOrdered;
}
complexity: 3
accuracy: 77.56%
coverage: 100.00%
# constraints: 9

signed int __iv__isButtonPressed_stub() {
	signed int __iv__return_expr_isButtonPressed;
	if(1==orderMatrix[0][0]) __iv__return_expr_isButtonPressed = orderMatrix[0][0]; else if(1==orderMatrix[0][3]) __iv__return_expr_isButtonPressed = 1; else if(1==orderMatrix[2][1]) __iv__return_expr_isButtonPressed = 1; else __iv__return_expr_isButtonPressed = 0; 
	__CPROVER_assume(__iv__return_expr_isButtonPressed == 0 || __iv__return_expr_isButtonPressed == 1);
	return __iv__return_expr_isButtonPressed;
}
complexity: 3
accuracy: 83.83%
coverage: 100.00%
# constraints: 10

run cbmc: (unwind: 330, timeout: 86400 sec)
cbmc running time: 120.132 sec

verification results: 
property 'assert((state != 2));' is not violated.

total CBMC running time: 1760.807 sec
total true alarm finding time: 0.0 sec
total refinement time: 0.0 sec, # of refinements: 0
peak memory usage: 4810.61 MB

call elev_get_button_signal((elev_button_type_t)(button), floorNum) (call id 49)
call floorIsOrdered(previousMainFloor, motorDirection) (call id 20)
call isButtonPressed() (call id 11)
call floorIsOrdered(previousMainFloor, motorDirection) (call id 14)
Iteration 0:
signed int __iv__elev_get_button_signal_stub(elev_button_type_t button, signed int floor) {
	signed int __iv__return_expr_elev_get_button_signal;
	signed int __iv__nondet_input_elev_get_button_signal_1 = __VERIFIER_nondet_signed_int();
	__iv__return_expr_elev_get_button_signal = __iv__nondet_input_elev_get_button_signal_1;
	__CPROVER_assume(__iv__return_expr_elev_get_button_signal == 0 || __iv__return_expr_elev_get_button_signal == 1);
	return __iv__return_expr_elev_get_button_signal;
}
complexity: 0
accuracy: 100.00%
coverage: 100.00%
# constraints: 2

signed int __iv__floorIsOrdered_stub(signed int floorNum, signed int motorDir) {
	signed int __iv__return_expr_floorIsOrdered;
	if(1==orderMatrix[2][0]) __iv__return_expr_floorIsOrdered = 1; else if(motorDir>=2) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[0][3]==motorDir) __iv__return_expr_floorIsOrdered = 1; else __iv__return_expr_floorIsOrdered = 0; 
	__CPROVER_assume(__iv__return_expr_floorIsOrdered == 0 || __iv__return_expr_floorIsOrdered == 1);
	return __iv__return_expr_floorIsOrdered;
}
complexity: 3
accuracy: 77.56%
coverage: 100.00%
# constraints: 9

signed int __iv__isButtonPressed_stub() {
	signed int __iv__return_expr_isButtonPressed;
	if(1==orderMatrix[0][0]) __iv__return_expr_isButtonPressed = orderMatrix[0][0]; else if(1==orderMatrix[0][3]) __iv__return_expr_isButtonPressed = 1; else if(1==orderMatrix[2][1]) __iv__return_expr_isButtonPressed = 1; else __iv__return_expr_isButtonPressed = 0; 
	__CPROVER_assume(__iv__return_expr_isButtonPressed == 0 || __iv__return_expr_isButtonPressed == 1);
	return __iv__return_expr_isButtonPressed;
}
complexity: 3
accuracy: 83.83%
coverage: 100.00%
# constraints: 10

run cbmc: (unwind: 340, timeout: 86400 sec)
cbmc running time: 143.203 sec

verification results: 
property 'assert((state != 2));' is not violated.

total CBMC running time: 1904.01 sec
total true alarm finding time: 0.0 sec
total refinement time: 0.0 sec, # of refinements: 0
peak memory usage: 4838.15 MB

call elev_get_button_signal((elev_button_type_t)(button), floorNum) (call id 49)
call floorIsOrdered(previousMainFloor, motorDirection) (call id 20)
call isButtonPressed() (call id 11)
call floorIsOrdered(previousMainFloor, motorDirection) (call id 14)
Iteration 0:
signed int __iv__elev_get_button_signal_stub(elev_button_type_t button, signed int floor) {
	signed int __iv__return_expr_elev_get_button_signal;
	signed int __iv__nondet_input_elev_get_button_signal_1 = __VERIFIER_nondet_signed_int();
	__iv__return_expr_elev_get_button_signal = __iv__nondet_input_elev_get_button_signal_1;
	__CPROVER_assume(__iv__return_expr_elev_get_button_signal == 0 || __iv__return_expr_elev_get_button_signal == 1);
	return __iv__return_expr_elev_get_button_signal;
}
complexity: 0
accuracy: 100.00%
coverage: 100.00%
# constraints: 2

signed int __iv__floorIsOrdered_stub(signed int floorNum, signed int motorDir) {
	signed int __iv__return_expr_floorIsOrdered;
	if(1==orderMatrix[2][0]) __iv__return_expr_floorIsOrdered = 1; else if(motorDir>=2) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[0][3]==motorDir) __iv__return_expr_floorIsOrdered = 1; else __iv__return_expr_floorIsOrdered = 0; 
	__CPROVER_assume(__iv__return_expr_floorIsOrdered == 0 || __iv__return_expr_floorIsOrdered == 1);
	return __iv__return_expr_floorIsOrdered;
}
complexity: 3
accuracy: 77.56%
coverage: 100.00%
# constraints: 9

signed int __iv__isButtonPressed_stub() {
	signed int __iv__return_expr_isButtonPressed;
	if(1==orderMatrix[0][0]) __iv__return_expr_isButtonPressed = orderMatrix[0][0]; else if(1==orderMatrix[0][3]) __iv__return_expr_isButtonPressed = 1; else if(1==orderMatrix[2][1]) __iv__return_expr_isButtonPressed = 1; else __iv__return_expr_isButtonPressed = 0; 
	__CPROVER_assume(__iv__return_expr_isButtonPressed == 0 || __iv__return_expr_isButtonPressed == 1);
	return __iv__return_expr_isButtonPressed;
}
complexity: 3
accuracy: 83.83%
coverage: 100.00%
# constraints: 10

run cbmc: (unwind: 350, timeout: 86400 sec)
cbmc running time: 103.84 sec

verification results: 
property 'assert((state != 2));' is not violated.

total CBMC running time: 2007.85 sec
total true alarm finding time: 0.0 sec
total refinement time: 0.0 sec, # of refinements: 0
peak memory usage: 5041.49 MB

call elev_get_button_signal((elev_button_type_t)(button), floorNum) (call id 49)
call floorIsOrdered(previousMainFloor, motorDirection) (call id 20)
call isButtonPressed() (call id 11)
call floorIsOrdered(previousMainFloor, motorDirection) (call id 14)
Iteration 0:
signed int __iv__elev_get_button_signal_stub(elev_button_type_t button, signed int floor) {
	signed int __iv__return_expr_elev_get_button_signal;
	signed int __iv__nondet_input_elev_get_button_signal_1 = __VERIFIER_nondet_signed_int();
	__iv__return_expr_elev_get_button_signal = __iv__nondet_input_elev_get_button_signal_1;
	__CPROVER_assume(__iv__return_expr_elev_get_button_signal == 0 || __iv__return_expr_elev_get_button_signal == 1);
	return __iv__return_expr_elev_get_button_signal;
}
complexity: 0
accuracy: 100.00%
coverage: 100.00%
# constraints: 2

signed int __iv__floorIsOrdered_stub(signed int floorNum, signed int motorDir) {
	signed int __iv__return_expr_floorIsOrdered;
	if(1==orderMatrix[2][0]) __iv__return_expr_floorIsOrdered = 1; else if(motorDir>=2) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[0][3]==motorDir) __iv__return_expr_floorIsOrdered = 1; else __iv__return_expr_floorIsOrdered = 0; 
	__CPROVER_assume(__iv__return_expr_floorIsOrdered == 0 || __iv__return_expr_floorIsOrdered == 1);
	return __iv__return_expr_floorIsOrdered;
}
complexity: 3
accuracy: 77.56%
coverage: 100.00%
# constraints: 9

signed int __iv__isButtonPressed_stub() {
	signed int __iv__return_expr_isButtonPressed;
	if(1==orderMatrix[0][0]) __iv__return_expr_isButtonPressed = orderMatrix[0][0]; else if(1==orderMatrix[0][3]) __iv__return_expr_isButtonPressed = 1; else if(1==orderMatrix[2][1]) __iv__return_expr_isButtonPressed = 1; else __iv__return_expr_isButtonPressed = 0; 
	__CPROVER_assume(__iv__return_expr_isButtonPressed == 0 || __iv__return_expr_isButtonPressed == 1);
	return __iv__return_expr_isButtonPressed;
}
complexity: 3
accuracy: 83.83%
coverage: 100.00%
# constraints: 10

run cbmc: (unwind: 360, timeout: 86400 sec)
cbmc running time: 146.142 sec

verification results: 
property 'assert((state != 2));' is not violated.

total CBMC running time: 2153.992 sec
total true alarm finding time: 0.0 sec
total refinement time: 0.0 sec, # of refinements: 0
peak memory usage: 5311.27 MB

call elev_get_button_signal((elev_button_type_t)(button), floorNum) (call id 49)
call floorIsOrdered(previousMainFloor, motorDirection) (call id 20)
call isButtonPressed() (call id 11)
call floorIsOrdered(previousMainFloor, motorDirection) (call id 14)
Iteration 0:
signed int __iv__elev_get_button_signal_stub(elev_button_type_t button, signed int floor) {
	signed int __iv__return_expr_elev_get_button_signal;
	signed int __iv__nondet_input_elev_get_button_signal_1 = __VERIFIER_nondet_signed_int();
	__iv__return_expr_elev_get_button_signal = __iv__nondet_input_elev_get_button_signal_1;
	__CPROVER_assume(__iv__return_expr_elev_get_button_signal == 0 || __iv__return_expr_elev_get_button_signal == 1);
	return __iv__return_expr_elev_get_button_signal;
}
complexity: 0
accuracy: 100.00%
coverage: 100.00%
# constraints: 2

signed int __iv__floorIsOrdered_stub(signed int floorNum, signed int motorDir) {
	signed int __iv__return_expr_floorIsOrdered;
	if(1==orderMatrix[2][0]) __iv__return_expr_floorIsOrdered = 1; else if(motorDir>=2) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[0][3]==motorDir) __iv__return_expr_floorIsOrdered = 1; else __iv__return_expr_floorIsOrdered = 0; 
	__CPROVER_assume(__iv__return_expr_floorIsOrdered == 0 || __iv__return_expr_floorIsOrdered == 1);
	return __iv__return_expr_floorIsOrdered;
}
complexity: 3
accuracy: 77.56%
coverage: 100.00%
# constraints: 9

signed int __iv__isButtonPressed_stub() {
	signed int __iv__return_expr_isButtonPressed;
	if(1==orderMatrix[0][0]) __iv__return_expr_isButtonPressed = orderMatrix[0][0]; else if(1==orderMatrix[0][3]) __iv__return_expr_isButtonPressed = 1; else if(1==orderMatrix[2][1]) __iv__return_expr_isButtonPressed = 1; else __iv__return_expr_isButtonPressed = 0; 
	__CPROVER_assume(__iv__return_expr_isButtonPressed == 0 || __iv__return_expr_isButtonPressed == 1);
	return __iv__return_expr_isButtonPressed;
}
complexity: 3
accuracy: 83.83%
coverage: 100.00%
# constraints: 10

run cbmc: (unwind: 370, timeout: 86400 sec)
cbmc running time: 128.315 sec

verification results: 
property 'assert((state != 2));' is not violated.

total CBMC running time: 2282.307 sec
total true alarm finding time: 0.0 sec
total refinement time: 0.0 sec, # of refinements: 0
peak memory usage: 5457.49 MB

call elev_get_button_signal((elev_button_type_t)(button), floorNum) (call id 49)
call floorIsOrdered(previousMainFloor, motorDirection) (call id 20)
call isButtonPressed() (call id 11)
call floorIsOrdered(previousMainFloor, motorDirection) (call id 14)
Iteration 0:
signed int __iv__elev_get_button_signal_stub(elev_button_type_t button, signed int floor) {
	signed int __iv__return_expr_elev_get_button_signal;
	signed int __iv__nondet_input_elev_get_button_signal_1 = __VERIFIER_nondet_signed_int();
	__iv__return_expr_elev_get_button_signal = __iv__nondet_input_elev_get_button_signal_1;
	__CPROVER_assume(__iv__return_expr_elev_get_button_signal == 0 || __iv__return_expr_elev_get_button_signal == 1);
	return __iv__return_expr_elev_get_button_signal;
}
complexity: 0
accuracy: 100.00%
coverage: 100.00%
# constraints: 2

signed int __iv__floorIsOrdered_stub(signed int floorNum, signed int motorDir) {
	signed int __iv__return_expr_floorIsOrdered;
	if(1==orderMatrix[2][0]) __iv__return_expr_floorIsOrdered = 1; else if(motorDir>=2) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[0][3]==motorDir) __iv__return_expr_floorIsOrdered = 1; else __iv__return_expr_floorIsOrdered = 0; 
	__CPROVER_assume(__iv__return_expr_floorIsOrdered == 0 || __iv__return_expr_floorIsOrdered == 1);
	return __iv__return_expr_floorIsOrdered;
}
complexity: 3
accuracy: 77.56%
coverage: 100.00%
# constraints: 9

signed int __iv__isButtonPressed_stub() {
	signed int __iv__return_expr_isButtonPressed;
	if(1==orderMatrix[0][0]) __iv__return_expr_isButtonPressed = orderMatrix[0][0]; else if(1==orderMatrix[0][3]) __iv__return_expr_isButtonPressed = 1; else if(1==orderMatrix[2][1]) __iv__return_expr_isButtonPressed = 1; else __iv__return_expr_isButtonPressed = 0; 
	__CPROVER_assume(__iv__return_expr_isButtonPressed == 0 || __iv__return_expr_isButtonPressed == 1);
	return __iv__return_expr_isButtonPressed;
}
complexity: 3
accuracy: 83.83%
coverage: 100.00%
# constraints: 10

run cbmc: (unwind: 380, timeout: 86400 sec)
cbmc running time: 154.455 sec

verification results: 
property 'assert((state != 2));' is not violated.

total CBMC running time: 2436.762 sec
total true alarm finding time: 0.0 sec
total refinement time: 0.0 sec, # of refinements: 0
peak memory usage: 5589.30 MB

call elev_get_button_signal((elev_button_type_t)(button), floorNum) (call id 49)
call floorIsOrdered(previousMainFloor, motorDirection) (call id 20)
call isButtonPressed() (call id 11)
call floorIsOrdered(previousMainFloor, motorDirection) (call id 14)
Iteration 0:
signed int __iv__elev_get_button_signal_stub(elev_button_type_t button, signed int floor) {
	signed int __iv__return_expr_elev_get_button_signal;
	signed int __iv__nondet_input_elev_get_button_signal_1 = __VERIFIER_nondet_signed_int();
	__iv__return_expr_elev_get_button_signal = __iv__nondet_input_elev_get_button_signal_1;
	__CPROVER_assume(__iv__return_expr_elev_get_button_signal == 0 || __iv__return_expr_elev_get_button_signal == 1);
	return __iv__return_expr_elev_get_button_signal;
}
complexity: 0
accuracy: 100.00%
coverage: 100.00%
# constraints: 2

signed int __iv__floorIsOrdered_stub(signed int floorNum, signed int motorDir) {
	signed int __iv__return_expr_floorIsOrdered;
	if(1==orderMatrix[2][0]) __iv__return_expr_floorIsOrdered = 1; else if(motorDir>=2) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[0][3]==motorDir) __iv__return_expr_floorIsOrdered = 1; else __iv__return_expr_floorIsOrdered = 0; 
	__CPROVER_assume(__iv__return_expr_floorIsOrdered == 0 || __iv__return_expr_floorIsOrdered == 1);
	return __iv__return_expr_floorIsOrdered;
}
complexity: 3
accuracy: 77.56%
coverage: 100.00%
# constraints: 9

signed int __iv__isButtonPressed_stub() {
	signed int __iv__return_expr_isButtonPressed;
	if(1==orderMatrix[0][0]) __iv__return_expr_isButtonPressed = orderMatrix[0][0]; else if(1==orderMatrix[0][3]) __iv__return_expr_isButtonPressed = 1; else if(1==orderMatrix[2][1]) __iv__return_expr_isButtonPressed = 1; else __iv__return_expr_isButtonPressed = 0; 
	__CPROVER_assume(__iv__return_expr_isButtonPressed == 0 || __iv__return_expr_isButtonPressed == 1);
	return __iv__return_expr_isButtonPressed;
}
complexity: 3
accuracy: 83.83%
coverage: 100.00%
# constraints: 10

run cbmc: (unwind: 390, timeout: 86400 sec)
cbmc running time: 134.757 sec

verification results: 
property 'assert((state != 2));' is not violated.

total CBMC running time: 2571.519 sec
total true alarm finding time: 0.0 sec
total refinement time: 0.0 sec, # of refinements: 0
peak memory usage: 5725.18 MB

call elev_get_button_signal((elev_button_type_t)(button), floorNum) (call id 49)
call floorIsOrdered(previousMainFloor, motorDirection) (call id 20)
call isButtonPressed() (call id 11)
call floorIsOrdered(previousMainFloor, motorDirection) (call id 14)
Iteration 0:
signed int __iv__elev_get_button_signal_stub(elev_button_type_t button, signed int floor) {
	signed int __iv__return_expr_elev_get_button_signal;
	signed int __iv__nondet_input_elev_get_button_signal_1 = __VERIFIER_nondet_signed_int();
	__iv__return_expr_elev_get_button_signal = __iv__nondet_input_elev_get_button_signal_1;
	__CPROVER_assume(__iv__return_expr_elev_get_button_signal == 0 || __iv__return_expr_elev_get_button_signal == 1);
	return __iv__return_expr_elev_get_button_signal;
}
complexity: 0
accuracy: 100.00%
coverage: 100.00%
# constraints: 2

signed int __iv__floorIsOrdered_stub(signed int floorNum, signed int motorDir) {
	signed int __iv__return_expr_floorIsOrdered;
	if(1==orderMatrix[2][0]) __iv__return_expr_floorIsOrdered = 1; else if(motorDir>=2) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[0][3]==motorDir) __iv__return_expr_floorIsOrdered = 1; else __iv__return_expr_floorIsOrdered = 0; 
	__CPROVER_assume(__iv__return_expr_floorIsOrdered == 0 || __iv__return_expr_floorIsOrdered == 1);
	return __iv__return_expr_floorIsOrdered;
}
complexity: 3
accuracy: 77.56%
coverage: 100.00%
# constraints: 9

signed int __iv__isButtonPressed_stub() {
	signed int __iv__return_expr_isButtonPressed;
	if(1==orderMatrix[0][0]) __iv__return_expr_isButtonPressed = orderMatrix[0][0]; else if(1==orderMatrix[0][3]) __iv__return_expr_isButtonPressed = 1; else if(1==orderMatrix[2][1]) __iv__return_expr_isButtonPressed = 1; else __iv__return_expr_isButtonPressed = 0; 
	__CPROVER_assume(__iv__return_expr_isButtonPressed == 0 || __iv__return_expr_isButtonPressed == 1);
	return __iv__return_expr_isButtonPressed;
}
complexity: 3
accuracy: 83.83%
coverage: 100.00%
# constraints: 10

run cbmc: (unwind: 400, timeout: 86400 sec)
cbmc running time: 170.393 sec

verification results: 
property 'assert((state != 2));' is not violated.

total CBMC running time: 2741.912 sec
total true alarm finding time: 0.0 sec
total refinement time: 0.0 sec, # of refinements: 0
peak memory usage: 5868.33 MB

call elev_get_button_signal((elev_button_type_t)(button), floorNum) (call id 49)
call floorIsOrdered(previousMainFloor, motorDirection) (call id 20)
call isButtonPressed() (call id 11)
call floorIsOrdered(previousMainFloor, motorDirection) (call id 14)
Iteration 0:
signed int __iv__elev_get_button_signal_stub(elev_button_type_t button, signed int floor) {
	signed int __iv__return_expr_elev_get_button_signal;
	signed int __iv__nondet_input_elev_get_button_signal_1 = __VERIFIER_nondet_signed_int();
	__iv__return_expr_elev_get_button_signal = __iv__nondet_input_elev_get_button_signal_1;
	__CPROVER_assume(__iv__return_expr_elev_get_button_signal == 0 || __iv__return_expr_elev_get_button_signal == 1);
	return __iv__return_expr_elev_get_button_signal;
}
complexity: 0
accuracy: 100.00%
coverage: 100.00%
# constraints: 2

signed int __iv__floorIsOrdered_stub(signed int floorNum, signed int motorDir) {
	signed int __iv__return_expr_floorIsOrdered;
	if(1==orderMatrix[2][0]) __iv__return_expr_floorIsOrdered = 1; else if(motorDir>=2) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[0][3]==motorDir) __iv__return_expr_floorIsOrdered = 1; else __iv__return_expr_floorIsOrdered = 0; 
	__CPROVER_assume(__iv__return_expr_floorIsOrdered == 0 || __iv__return_expr_floorIsOrdered == 1);
	return __iv__return_expr_floorIsOrdered;
}
complexity: 3
accuracy: 77.56%
coverage: 100.00%
# constraints: 9

signed int __iv__isButtonPressed_stub() {
	signed int __iv__return_expr_isButtonPressed;
	if(1==orderMatrix[0][0]) __iv__return_expr_isButtonPressed = orderMatrix[0][0]; else if(1==orderMatrix[0][3]) __iv__return_expr_isButtonPressed = 1; else if(1==orderMatrix[2][1]) __iv__return_expr_isButtonPressed = 1; else __iv__return_expr_isButtonPressed = 0; 
	__CPROVER_assume(__iv__return_expr_isButtonPressed == 0 || __iv__return_expr_isButtonPressed == 1);
	return __iv__return_expr_isButtonPressed;
}
complexity: 3
accuracy: 83.83%
coverage: 100.00%
# constraints: 10

run cbmc: (unwind: 410, timeout: 86400 sec)
cbmc running time: 178.164 sec

verification results: 
property 'assert((state != 2));' is not violated.

total CBMC running time: 2920.076 sec
total true alarm finding time: 0.0 sec
total refinement time: 0.0 sec, # of refinements: 0
peak memory usage: 6052.94 MB

call elev_get_button_signal((elev_button_type_t)(button), floorNum) (call id 49)
call floorIsOrdered(previousMainFloor, motorDirection) (call id 20)
call isButtonPressed() (call id 11)
call floorIsOrdered(previousMainFloor, motorDirection) (call id 14)
Iteration 0:
signed int __iv__elev_get_button_signal_stub(elev_button_type_t button, signed int floor) {
	signed int __iv__return_expr_elev_get_button_signal;
	signed int __iv__nondet_input_elev_get_button_signal_1 = __VERIFIER_nondet_signed_int();
	__iv__return_expr_elev_get_button_signal = __iv__nondet_input_elev_get_button_signal_1;
	__CPROVER_assume(__iv__return_expr_elev_get_button_signal == 0 || __iv__return_expr_elev_get_button_signal == 1);
	return __iv__return_expr_elev_get_button_signal;
}
complexity: 0
accuracy: 100.00%
coverage: 100.00%
# constraints: 2

signed int __iv__floorIsOrdered_stub(signed int floorNum, signed int motorDir) {
	signed int __iv__return_expr_floorIsOrdered;
	if(1==orderMatrix[2][0]) __iv__return_expr_floorIsOrdered = 1; else if(motorDir>=2) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[0][3]==motorDir) __iv__return_expr_floorIsOrdered = 1; else __iv__return_expr_floorIsOrdered = 0; 
	__CPROVER_assume(__iv__return_expr_floorIsOrdered == 0 || __iv__return_expr_floorIsOrdered == 1);
	return __iv__return_expr_floorIsOrdered;
}
complexity: 3
accuracy: 77.56%
coverage: 100.00%
# constraints: 9

signed int __iv__isButtonPressed_stub() {
	signed int __iv__return_expr_isButtonPressed;
	if(1==orderMatrix[0][0]) __iv__return_expr_isButtonPressed = orderMatrix[0][0]; else if(1==orderMatrix[0][3]) __iv__return_expr_isButtonPressed = 1; else if(1==orderMatrix[2][1]) __iv__return_expr_isButtonPressed = 1; else __iv__return_expr_isButtonPressed = 0; 
	__CPROVER_assume(__iv__return_expr_isButtonPressed == 0 || __iv__return_expr_isButtonPressed == 1);
	return __iv__return_expr_isButtonPressed;
}
complexity: 3
accuracy: 83.83%
coverage: 100.00%
# constraints: 10

run cbmc: (unwind: 420, timeout: 86400 sec)
cbmc running time: 169.97 sec

verification results: 
property 'assert((state != 2));' is not violated.

total CBMC running time: 3090.046 sec
total true alarm finding time: 0.0 sec
total refinement time: 0.0 sec, # of refinements: 0
peak memory usage: 6196.59 MB

call elev_get_button_signal((elev_button_type_t)(button), floorNum) (call id 49)
call floorIsOrdered(previousMainFloor, motorDirection) (call id 20)
call isButtonPressed() (call id 11)
call floorIsOrdered(previousMainFloor, motorDirection) (call id 14)
Iteration 0:
signed int __iv__elev_get_button_signal_stub(elev_button_type_t button, signed int floor) {
	signed int __iv__return_expr_elev_get_button_signal;
	signed int __iv__nondet_input_elev_get_button_signal_1 = __VERIFIER_nondet_signed_int();
	__iv__return_expr_elev_get_button_signal = __iv__nondet_input_elev_get_button_signal_1;
	__CPROVER_assume(__iv__return_expr_elev_get_button_signal == 0 || __iv__return_expr_elev_get_button_signal == 1);
	return __iv__return_expr_elev_get_button_signal;
}
complexity: 0
accuracy: 100.00%
coverage: 100.00%
# constraints: 2

signed int __iv__floorIsOrdered_stub(signed int floorNum, signed int motorDir) {
	signed int __iv__return_expr_floorIsOrdered;
	if(1==orderMatrix[2][0]) __iv__return_expr_floorIsOrdered = 1; else if(motorDir>=2) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[0][3]==motorDir) __iv__return_expr_floorIsOrdered = 1; else __iv__return_expr_floorIsOrdered = 0; 
	__CPROVER_assume(__iv__return_expr_floorIsOrdered == 0 || __iv__return_expr_floorIsOrdered == 1);
	return __iv__return_expr_floorIsOrdered;
}
complexity: 3
accuracy: 77.56%
coverage: 100.00%
# constraints: 9

signed int __iv__isButtonPressed_stub() {
	signed int __iv__return_expr_isButtonPressed;
	if(1==orderMatrix[0][0]) __iv__return_expr_isButtonPressed = orderMatrix[0][0]; else if(1==orderMatrix[0][3]) __iv__return_expr_isButtonPressed = 1; else if(1==orderMatrix[2][1]) __iv__return_expr_isButtonPressed = 1; else __iv__return_expr_isButtonPressed = 0; 
	__CPROVER_assume(__iv__return_expr_isButtonPressed == 0 || __iv__return_expr_isButtonPressed == 1);
	return __iv__return_expr_isButtonPressed;
}
complexity: 3
accuracy: 83.83%
coverage: 100.00%
# constraints: 10

run cbmc: (unwind: 430, timeout: 86400 sec)
cbmc running time: 216.203 sec

verification results: 
property 'assert((state != 2));' is not violated.

total CBMC running time: 3306.249 sec
total true alarm finding time: 0.0 sec
total refinement time: 0.0 sec, # of refinements: 0
peak memory usage: 6337.07 MB

call elev_get_button_signal((elev_button_type_t)(button), floorNum) (call id 49)
call floorIsOrdered(previousMainFloor, motorDirection) (call id 20)
call isButtonPressed() (call id 11)
call floorIsOrdered(previousMainFloor, motorDirection) (call id 14)
Iteration 0:
signed int __iv__elev_get_button_signal_stub(elev_button_type_t button, signed int floor) {
	signed int __iv__return_expr_elev_get_button_signal;
	signed int __iv__nondet_input_elev_get_button_signal_1 = __VERIFIER_nondet_signed_int();
	__iv__return_expr_elev_get_button_signal = __iv__nondet_input_elev_get_button_signal_1;
	__CPROVER_assume(__iv__return_expr_elev_get_button_signal == 0 || __iv__return_expr_elev_get_button_signal == 1);
	return __iv__return_expr_elev_get_button_signal;
}
complexity: 0
accuracy: 100.00%
coverage: 100.00%
# constraints: 2

signed int __iv__floorIsOrdered_stub(signed int floorNum, signed int motorDir) {
	signed int __iv__return_expr_floorIsOrdered;
	if(1==orderMatrix[2][0]) __iv__return_expr_floorIsOrdered = 1; else if(motorDir>=2) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[0][3]==motorDir) __iv__return_expr_floorIsOrdered = 1; else __iv__return_expr_floorIsOrdered = 0; 
	__CPROVER_assume(__iv__return_expr_floorIsOrdered == 0 || __iv__return_expr_floorIsOrdered == 1);
	return __iv__return_expr_floorIsOrdered;
}
complexity: 3
accuracy: 77.56%
coverage: 100.00%
# constraints: 9

signed int __iv__isButtonPressed_stub() {
	signed int __iv__return_expr_isButtonPressed;
	if(1==orderMatrix[0][0]) __iv__return_expr_isButtonPressed = orderMatrix[0][0]; else if(1==orderMatrix[0][3]) __iv__return_expr_isButtonPressed = 1; else if(1==orderMatrix[2][1]) __iv__return_expr_isButtonPressed = 1; else __iv__return_expr_isButtonPressed = 0; 
	__CPROVER_assume(__iv__return_expr_isButtonPressed == 0 || __iv__return_expr_isButtonPressed == 1);
	return __iv__return_expr_isButtonPressed;
}
complexity: 3
accuracy: 83.83%
coverage: 100.00%
# constraints: 10

run cbmc: (unwind: 440, timeout: 86400 sec)
cbmc running time: 153.574 sec

verification results: 
property 'assert((state != 2));' is not violated.

total CBMC running time: 3459.823 sec
total true alarm finding time: 0.0 sec
total refinement time: 0.0 sec, # of refinements: 0
peak memory usage: 6408.79 MB

call elev_get_button_signal((elev_button_type_t)(button), floorNum) (call id 49)
call floorIsOrdered(previousMainFloor, motorDirection) (call id 20)
call isButtonPressed() (call id 11)
call floorIsOrdered(previousMainFloor, motorDirection) (call id 14)
Iteration 0:
signed int __iv__elev_get_button_signal_stub(elev_button_type_t button, signed int floor) {
	signed int __iv__return_expr_elev_get_button_signal;
	signed int __iv__nondet_input_elev_get_button_signal_1 = __VERIFIER_nondet_signed_int();
	__iv__return_expr_elev_get_button_signal = __iv__nondet_input_elev_get_button_signal_1;
	__CPROVER_assume(__iv__return_expr_elev_get_button_signal == 0 || __iv__return_expr_elev_get_button_signal == 1);
	return __iv__return_expr_elev_get_button_signal;
}
complexity: 0
accuracy: 100.00%
coverage: 100.00%
# constraints: 2

signed int __iv__floorIsOrdered_stub(signed int floorNum, signed int motorDir) {
	signed int __iv__return_expr_floorIsOrdered;
	if(1==orderMatrix[2][0]) __iv__return_expr_floorIsOrdered = 1; else if(motorDir>=2) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[0][3]==motorDir) __iv__return_expr_floorIsOrdered = 1; else __iv__return_expr_floorIsOrdered = 0; 
	__CPROVER_assume(__iv__return_expr_floorIsOrdered == 0 || __iv__return_expr_floorIsOrdered == 1);
	return __iv__return_expr_floorIsOrdered;
}
complexity: 3
accuracy: 77.56%
coverage: 100.00%
# constraints: 9

signed int __iv__isButtonPressed_stub() {
	signed int __iv__return_expr_isButtonPressed;
	if(1==orderMatrix[0][0]) __iv__return_expr_isButtonPressed = orderMatrix[0][0]; else if(1==orderMatrix[0][3]) __iv__return_expr_isButtonPressed = 1; else if(1==orderMatrix[2][1]) __iv__return_expr_isButtonPressed = 1; else __iv__return_expr_isButtonPressed = 0; 
	__CPROVER_assume(__iv__return_expr_isButtonPressed == 0 || __iv__return_expr_isButtonPressed == 1);
	return __iv__return_expr_isButtonPressed;
}
complexity: 3
accuracy: 83.83%
coverage: 100.00%
# constraints: 10

run cbmc: (unwind: 450, timeout: 86400 sec)
cbmc running time: 217.558 sec

verification results: 
property 'assert((state != 2));' is not violated.

total CBMC running time: 3677.381 sec
total true alarm finding time: 0.0 sec
total refinement time: 0.0 sec, # of refinements: 0
peak memory usage: 6577.55 MB

call elev_get_button_signal((elev_button_type_t)(button), floorNum) (call id 49)
call floorIsOrdered(previousMainFloor, motorDirection) (call id 20)
call isButtonPressed() (call id 11)
call floorIsOrdered(previousMainFloor, motorDirection) (call id 14)
Iteration 0:
signed int __iv__elev_get_button_signal_stub(elev_button_type_t button, signed int floor) {
	signed int __iv__return_expr_elev_get_button_signal;
	signed int __iv__nondet_input_elev_get_button_signal_1 = __VERIFIER_nondet_signed_int();
	__iv__return_expr_elev_get_button_signal = __iv__nondet_input_elev_get_button_signal_1;
	__CPROVER_assume(__iv__return_expr_elev_get_button_signal == 0 || __iv__return_expr_elev_get_button_signal == 1);
	return __iv__return_expr_elev_get_button_signal;
}
complexity: 0
accuracy: 100.00%
coverage: 100.00%
# constraints: 2

signed int __iv__floorIsOrdered_stub(signed int floorNum, signed int motorDir) {
	signed int __iv__return_expr_floorIsOrdered;
	if(1==orderMatrix[2][0]) __iv__return_expr_floorIsOrdered = 1; else if(motorDir>=2) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[0][3]==motorDir) __iv__return_expr_floorIsOrdered = 1; else __iv__return_expr_floorIsOrdered = 0; 
	__CPROVER_assume(__iv__return_expr_floorIsOrdered == 0 || __iv__return_expr_floorIsOrdered == 1);
	return __iv__return_expr_floorIsOrdered;
}
complexity: 3
accuracy: 77.56%
coverage: 100.00%
# constraints: 9

signed int __iv__isButtonPressed_stub() {
	signed int __iv__return_expr_isButtonPressed;
	if(1==orderMatrix[0][0]) __iv__return_expr_isButtonPressed = orderMatrix[0][0]; else if(1==orderMatrix[0][3]) __iv__return_expr_isButtonPressed = 1; else if(1==orderMatrix[2][1]) __iv__return_expr_isButtonPressed = 1; else __iv__return_expr_isButtonPressed = 0; 
	__CPROVER_assume(__iv__return_expr_isButtonPressed == 0 || __iv__return_expr_isButtonPressed == 1);
	return __iv__return_expr_isButtonPressed;
}
complexity: 3
accuracy: 83.83%
coverage: 100.00%
# constraints: 10

run cbmc: (unwind: 460, timeout: 86400 sec)
cbmc running time: 164.949 sec

verification results: 
property 'assert((state != 2));' is not violated.

total CBMC running time: 3842.33 sec
total true alarm finding time: 0.0 sec
total refinement time: 0.0 sec, # of refinements: 0
peak memory usage: 6772.86 MB

call elev_get_button_signal((elev_button_type_t)(button), floorNum) (call id 49)
call floorIsOrdered(previousMainFloor, motorDirection) (call id 20)
call isButtonPressed() (call id 11)
call floorIsOrdered(previousMainFloor, motorDirection) (call id 14)
Iteration 0:
signed int __iv__elev_get_button_signal_stub(elev_button_type_t button, signed int floor) {
	signed int __iv__return_expr_elev_get_button_signal;
	signed int __iv__nondet_input_elev_get_button_signal_1 = __VERIFIER_nondet_signed_int();
	__iv__return_expr_elev_get_button_signal = __iv__nondet_input_elev_get_button_signal_1;
	__CPROVER_assume(__iv__return_expr_elev_get_button_signal == 0 || __iv__return_expr_elev_get_button_signal == 1);
	return __iv__return_expr_elev_get_button_signal;
}
complexity: 0
accuracy: 100.00%
coverage: 100.00%
# constraints: 2

signed int __iv__floorIsOrdered_stub(signed int floorNum, signed int motorDir) {
	signed int __iv__return_expr_floorIsOrdered;
	if(1==orderMatrix[2][0]) __iv__return_expr_floorIsOrdered = 1; else if(motorDir>=2) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[0][3]==motorDir) __iv__return_expr_floorIsOrdered = 1; else __iv__return_expr_floorIsOrdered = 0; 
	__CPROVER_assume(__iv__return_expr_floorIsOrdered == 0 || __iv__return_expr_floorIsOrdered == 1);
	return __iv__return_expr_floorIsOrdered;
}
complexity: 3
accuracy: 77.56%
coverage: 100.00%
# constraints: 9

signed int __iv__isButtonPressed_stub() {
	signed int __iv__return_expr_isButtonPressed;
	if(1==orderMatrix[0][0]) __iv__return_expr_isButtonPressed = orderMatrix[0][0]; else if(1==orderMatrix[0][3]) __iv__return_expr_isButtonPressed = 1; else if(1==orderMatrix[2][1]) __iv__return_expr_isButtonPressed = 1; else __iv__return_expr_isButtonPressed = 0; 
	__CPROVER_assume(__iv__return_expr_isButtonPressed == 0 || __iv__return_expr_isButtonPressed == 1);
	return __iv__return_expr_isButtonPressed;
}
complexity: 3
accuracy: 83.83%
coverage: 100.00%
# constraints: 10

run cbmc: (unwind: 470, timeout: 86400 sec)
cbmc running time: 225.421 sec

verification results: 
property 'assert((state != 2));' is not violated.

total CBMC running time: 4067.751 sec
total true alarm finding time: 0.0 sec
total refinement time: 0.0 sec, # of refinements: 0
peak memory usage: 6924.21 MB

call elev_get_button_signal((elev_button_type_t)(button), floorNum) (call id 49)
call floorIsOrdered(previousMainFloor, motorDirection) (call id 20)
call isButtonPressed() (call id 11)
call floorIsOrdered(previousMainFloor, motorDirection) (call id 14)
Iteration 0:
signed int __iv__elev_get_button_signal_stub(elev_button_type_t button, signed int floor) {
	signed int __iv__return_expr_elev_get_button_signal;
	signed int __iv__nondet_input_elev_get_button_signal_1 = __VERIFIER_nondet_signed_int();
	__iv__return_expr_elev_get_button_signal = __iv__nondet_input_elev_get_button_signal_1;
	__CPROVER_assume(__iv__return_expr_elev_get_button_signal == 0 || __iv__return_expr_elev_get_button_signal == 1);
	return __iv__return_expr_elev_get_button_signal;
}
complexity: 0
accuracy: 100.00%
coverage: 100.00%
# constraints: 2

signed int __iv__floorIsOrdered_stub(signed int floorNum, signed int motorDir) {
	signed int __iv__return_expr_floorIsOrdered;
	if(1==orderMatrix[2][0]) __iv__return_expr_floorIsOrdered = 1; else if(motorDir>=2) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[0][3]==motorDir) __iv__return_expr_floorIsOrdered = 1; else __iv__return_expr_floorIsOrdered = 0; 
	__CPROVER_assume(__iv__return_expr_floorIsOrdered == 0 || __iv__return_expr_floorIsOrdered == 1);
	return __iv__return_expr_floorIsOrdered;
}
complexity: 3
accuracy: 77.56%
coverage: 100.00%
# constraints: 9

signed int __iv__isButtonPressed_stub() {
	signed int __iv__return_expr_isButtonPressed;
	if(1==orderMatrix[0][0]) __iv__return_expr_isButtonPressed = orderMatrix[0][0]; else if(1==orderMatrix[0][3]) __iv__return_expr_isButtonPressed = 1; else if(1==orderMatrix[2][1]) __iv__return_expr_isButtonPressed = 1; else __iv__return_expr_isButtonPressed = 0; 
	__CPROVER_assume(__iv__return_expr_isButtonPressed == 0 || __iv__return_expr_isButtonPressed == 1);
	return __iv__return_expr_isButtonPressed;
}
complexity: 3
accuracy: 83.83%
coverage: 100.00%
# constraints: 10

run cbmc: (unwind: 480, timeout: 86400 sec)
cbmc running time: 249.898 sec

verification results: 
property 'assert((state != 2));' is not violated.

total CBMC running time: 4317.649 sec
total true alarm finding time: 0.0 sec
total refinement time: 0.0 sec, # of refinements: 0
peak memory usage: 7057.60 MB

call elev_get_button_signal((elev_button_type_t)(button), floorNum) (call id 49)
call floorIsOrdered(previousMainFloor, motorDirection) (call id 20)
call isButtonPressed() (call id 11)
call floorIsOrdered(previousMainFloor, motorDirection) (call id 14)
Iteration 0:
signed int __iv__elev_get_button_signal_stub(elev_button_type_t button, signed int floor) {
	signed int __iv__return_expr_elev_get_button_signal;
	signed int __iv__nondet_input_elev_get_button_signal_1 = __VERIFIER_nondet_signed_int();
	__iv__return_expr_elev_get_button_signal = __iv__nondet_input_elev_get_button_signal_1;
	__CPROVER_assume(__iv__return_expr_elev_get_button_signal == 0 || __iv__return_expr_elev_get_button_signal == 1);
	return __iv__return_expr_elev_get_button_signal;
}
complexity: 0
accuracy: 100.00%
coverage: 100.00%
# constraints: 2

signed int __iv__floorIsOrdered_stub(signed int floorNum, signed int motorDir) {
	signed int __iv__return_expr_floorIsOrdered;
	if(1==orderMatrix[2][0]) __iv__return_expr_floorIsOrdered = 1; else if(motorDir>=2) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[0][3]==motorDir) __iv__return_expr_floorIsOrdered = 1; else __iv__return_expr_floorIsOrdered = 0; 
	__CPROVER_assume(__iv__return_expr_floorIsOrdered == 0 || __iv__return_expr_floorIsOrdered == 1);
	return __iv__return_expr_floorIsOrdered;
}
complexity: 3
accuracy: 77.56%
coverage: 100.00%
# constraints: 9

signed int __iv__isButtonPressed_stub() {
	signed int __iv__return_expr_isButtonPressed;
	if(1==orderMatrix[0][0]) __iv__return_expr_isButtonPressed = orderMatrix[0][0]; else if(1==orderMatrix[0][3]) __iv__return_expr_isButtonPressed = 1; else if(1==orderMatrix[2][1]) __iv__return_expr_isButtonPressed = 1; else __iv__return_expr_isButtonPressed = 0; 
	__CPROVER_assume(__iv__return_expr_isButtonPressed == 0 || __iv__return_expr_isButtonPressed == 1);
	return __iv__return_expr_isButtonPressed;
}
complexity: 3
accuracy: 83.83%
coverage: 100.00%
# constraints: 10

run cbmc: (unwind: 490, timeout: 86400 sec)
cbmc running time: 221.639 sec

verification results: 
property 'assert((state != 2));' is not violated.

total CBMC running time: 4539.288 sec
total true alarm finding time: 0.0 sec
total refinement time: 0.0 sec, # of refinements: 0
peak memory usage: 7309.99 MB

call elev_get_button_signal((elev_button_type_t)(button), floorNum) (call id 49)
call floorIsOrdered(previousMainFloor, motorDirection) (call id 20)
call isButtonPressed() (call id 11)
call floorIsOrdered(previousMainFloor, motorDirection) (call id 14)
Iteration 0:
signed int __iv__elev_get_button_signal_stub(elev_button_type_t button, signed int floor) {
	signed int __iv__return_expr_elev_get_button_signal;
	signed int __iv__nondet_input_elev_get_button_signal_1 = __VERIFIER_nondet_signed_int();
	__iv__return_expr_elev_get_button_signal = __iv__nondet_input_elev_get_button_signal_1;
	__CPROVER_assume(__iv__return_expr_elev_get_button_signal == 0 || __iv__return_expr_elev_get_button_signal == 1);
	return __iv__return_expr_elev_get_button_signal;
}
complexity: 0
accuracy: 100.00%
coverage: 100.00%
# constraints: 2

signed int __iv__floorIsOrdered_stub(signed int floorNum, signed int motorDir) {
	signed int __iv__return_expr_floorIsOrdered;
	if(1==orderMatrix[2][0]) __iv__return_expr_floorIsOrdered = 1; else if(motorDir>=2) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[0][3]==motorDir) __iv__return_expr_floorIsOrdered = 1; else __iv__return_expr_floorIsOrdered = 0; 
	__CPROVER_assume(__iv__return_expr_floorIsOrdered == 0 || __iv__return_expr_floorIsOrdered == 1);
	return __iv__return_expr_floorIsOrdered;
}
complexity: 3
accuracy: 77.56%
coverage: 100.00%
# constraints: 9

signed int __iv__isButtonPressed_stub() {
	signed int __iv__return_expr_isButtonPressed;
	if(1==orderMatrix[0][0]) __iv__return_expr_isButtonPressed = orderMatrix[0][0]; else if(1==orderMatrix[0][3]) __iv__return_expr_isButtonPressed = 1; else if(1==orderMatrix[2][1]) __iv__return_expr_isButtonPressed = 1; else __iv__return_expr_isButtonPressed = 0; 
	__CPROVER_assume(__iv__return_expr_isButtonPressed == 0 || __iv__return_expr_isButtonPressed == 1);
	return __iv__return_expr_isButtonPressed;
}
complexity: 3
accuracy: 83.83%
coverage: 100.00%
# constraints: 10

run cbmc: (unwind: 500, timeout: 86400 sec)
cbmc running time: 261.279 sec

verification results: 
property 'assert((state != 2));' is not violated.

total CBMC running time: 4800.567 sec
total true alarm finding time: 0.0 sec
total refinement time: 0.0 sec, # of refinements: 0
peak memory usage: 7450.66 MB

call elev_get_button_signal((elev_button_type_t)(button), floorNum) (call id 49)
call floorIsOrdered(previousMainFloor, motorDirection) (call id 20)
call isButtonPressed() (call id 11)
call floorIsOrdered(previousMainFloor, motorDirection) (call id 14)
Iteration 0:
signed int __iv__elev_get_button_signal_stub(elev_button_type_t button, signed int floor) {
	signed int __iv__return_expr_elev_get_button_signal;
	signed int __iv__nondet_input_elev_get_button_signal_1 = __VERIFIER_nondet_signed_int();
	__iv__return_expr_elev_get_button_signal = __iv__nondet_input_elev_get_button_signal_1;
	__CPROVER_assume(__iv__return_expr_elev_get_button_signal == 0 || __iv__return_expr_elev_get_button_signal == 1);
	return __iv__return_expr_elev_get_button_signal;
}
complexity: 0
accuracy: 100.00%
coverage: 100.00%
# constraints: 2

signed int __iv__floorIsOrdered_stub(signed int floorNum, signed int motorDir) {
	signed int __iv__return_expr_floorIsOrdered;
	if(1==orderMatrix[2][0]) __iv__return_expr_floorIsOrdered = 1; else if(motorDir>=2) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[0][3]==motorDir) __iv__return_expr_floorIsOrdered = 1; else __iv__return_expr_floorIsOrdered = 0; 
	__CPROVER_assume(__iv__return_expr_floorIsOrdered == 0 || __iv__return_expr_floorIsOrdered == 1);
	return __iv__return_expr_floorIsOrdered;
}
complexity: 3
accuracy: 77.56%
coverage: 100.00%
# constraints: 9

signed int __iv__isButtonPressed_stub() {
	signed int __iv__return_expr_isButtonPressed;
	if(1==orderMatrix[0][0]) __iv__return_expr_isButtonPressed = orderMatrix[0][0]; else if(1==orderMatrix[0][3]) __iv__return_expr_isButtonPressed = 1; else if(1==orderMatrix[2][1]) __iv__return_expr_isButtonPressed = 1; else __iv__return_expr_isButtonPressed = 0; 
	__CPROVER_assume(__iv__return_expr_isButtonPressed == 0 || __iv__return_expr_isButtonPressed == 1);
	return __iv__return_expr_isButtonPressed;
}
complexity: 3
accuracy: 83.83%
coverage: 100.00%
# constraints: 10

run cbmc: (unwind: 510, timeout: 86400 sec)
cbmc running time: 211.749 sec

verification results: 
property 'assert((state != 2));' is not violated.

total CBMC running time: 5012.316 sec
total true alarm finding time: 0.0 sec
total refinement time: 0.0 sec, # of refinements: 0
peak memory usage: 7610.21 MB

call elev_get_button_signal((elev_button_type_t)(button), floorNum) (call id 49)
call floorIsOrdered(previousMainFloor, motorDirection) (call id 20)
call isButtonPressed() (call id 11)
call floorIsOrdered(previousMainFloor, motorDirection) (call id 14)
Iteration 0:
signed int __iv__elev_get_button_signal_stub(elev_button_type_t button, signed int floor) {
	signed int __iv__return_expr_elev_get_button_signal;
	signed int __iv__nondet_input_elev_get_button_signal_1 = __VERIFIER_nondet_signed_int();
	__iv__return_expr_elev_get_button_signal = __iv__nondet_input_elev_get_button_signal_1;
	__CPROVER_assume(__iv__return_expr_elev_get_button_signal == 0 || __iv__return_expr_elev_get_button_signal == 1);
	return __iv__return_expr_elev_get_button_signal;
}
complexity: 0
accuracy: 100.00%
coverage: 100.00%
# constraints: 2

signed int __iv__floorIsOrdered_stub(signed int floorNum, signed int motorDir) {
	signed int __iv__return_expr_floorIsOrdered;
	if(1==orderMatrix[2][0]) __iv__return_expr_floorIsOrdered = 1; else if(motorDir>=2) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[0][3]==motorDir) __iv__return_expr_floorIsOrdered = 1; else __iv__return_expr_floorIsOrdered = 0; 
	__CPROVER_assume(__iv__return_expr_floorIsOrdered == 0 || __iv__return_expr_floorIsOrdered == 1);
	return __iv__return_expr_floorIsOrdered;
}
complexity: 3
accuracy: 77.56%
coverage: 100.00%
# constraints: 9

signed int __iv__isButtonPressed_stub() {
	signed int __iv__return_expr_isButtonPressed;
	if(1==orderMatrix[0][0]) __iv__return_expr_isButtonPressed = orderMatrix[0][0]; else if(1==orderMatrix[0][3]) __iv__return_expr_isButtonPressed = 1; else if(1==orderMatrix[2][1]) __iv__return_expr_isButtonPressed = 1; else __iv__return_expr_isButtonPressed = 0; 
	__CPROVER_assume(__iv__return_expr_isButtonPressed == 0 || __iv__return_expr_isButtonPressed == 1);
	return __iv__return_expr_isButtonPressed;
}
complexity: 3
accuracy: 83.83%
coverage: 100.00%
# constraints: 10

run cbmc: (unwind: 520, timeout: 86400 sec)
cbmc running time: 203.395 sec

verification results: 
property 'assert((state != 2));' is not violated.

total CBMC running time: 5215.711 sec
total true alarm finding time: 0.0 sec
total refinement time: 0.0 sec, # of refinements: 0
peak memory usage: 7753.46 MB

call elev_get_button_signal((elev_button_type_t)(button), floorNum) (call id 49)
call floorIsOrdered(previousMainFloor, motorDirection) (call id 20)
call isButtonPressed() (call id 11)
call floorIsOrdered(previousMainFloor, motorDirection) (call id 14)
Iteration 0:
signed int __iv__elev_get_button_signal_stub(elev_button_type_t button, signed int floor) {
	signed int __iv__return_expr_elev_get_button_signal;
	signed int __iv__nondet_input_elev_get_button_signal_1 = __VERIFIER_nondet_signed_int();
	__iv__return_expr_elev_get_button_signal = __iv__nondet_input_elev_get_button_signal_1;
	__CPROVER_assume(__iv__return_expr_elev_get_button_signal == 0 || __iv__return_expr_elev_get_button_signal == 1);
	return __iv__return_expr_elev_get_button_signal;
}
complexity: 0
accuracy: 100.00%
coverage: 100.00%
# constraints: 2

signed int __iv__floorIsOrdered_stub(signed int floorNum, signed int motorDir) {
	signed int __iv__return_expr_floorIsOrdered;
	if(1==orderMatrix[2][0]) __iv__return_expr_floorIsOrdered = 1; else if(motorDir>=2) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[0][3]==motorDir) __iv__return_expr_floorIsOrdered = 1; else __iv__return_expr_floorIsOrdered = 0; 
	__CPROVER_assume(__iv__return_expr_floorIsOrdered == 0 || __iv__return_expr_floorIsOrdered == 1);
	return __iv__return_expr_floorIsOrdered;
}
complexity: 3
accuracy: 77.56%
coverage: 100.00%
# constraints: 9

signed int __iv__isButtonPressed_stub() {
	signed int __iv__return_expr_isButtonPressed;
	if(1==orderMatrix[0][0]) __iv__return_expr_isButtonPressed = orderMatrix[0][0]; else if(1==orderMatrix[0][3]) __iv__return_expr_isButtonPressed = 1; else if(1==orderMatrix[2][1]) __iv__return_expr_isButtonPressed = 1; else __iv__return_expr_isButtonPressed = 0; 
	__CPROVER_assume(__iv__return_expr_isButtonPressed == 0 || __iv__return_expr_isButtonPressed == 1);
	return __iv__return_expr_isButtonPressed;
}
complexity: 3
accuracy: 83.83%
coverage: 100.00%
# constraints: 10

run cbmc: (unwind: 530, timeout: 86400 sec)
cbmc running time: 185.479 sec

verification results: 
property 'assert((state != 2));' is not violated.

total CBMC running time: 5401.19 sec
total true alarm finding time: 0.0 sec
total refinement time: 0.0 sec, # of refinements: 0
peak memory usage: 7853.47 MB

call elev_get_button_signal((elev_button_type_t)(button), floorNum) (call id 49)
call floorIsOrdered(previousMainFloor, motorDirection) (call id 20)
call isButtonPressed() (call id 11)
call floorIsOrdered(previousMainFloor, motorDirection) (call id 14)
Iteration 0:
signed int __iv__elev_get_button_signal_stub(elev_button_type_t button, signed int floor) {
	signed int __iv__return_expr_elev_get_button_signal;
	signed int __iv__nondet_input_elev_get_button_signal_1 = __VERIFIER_nondet_signed_int();
	__iv__return_expr_elev_get_button_signal = __iv__nondet_input_elev_get_button_signal_1;
	__CPROVER_assume(__iv__return_expr_elev_get_button_signal == 0 || __iv__return_expr_elev_get_button_signal == 1);
	return __iv__return_expr_elev_get_button_signal;
}
complexity: 0
accuracy: 100.00%
coverage: 100.00%
# constraints: 2

signed int __iv__floorIsOrdered_stub(signed int floorNum, signed int motorDir) {
	signed int __iv__return_expr_floorIsOrdered;
	if(1==orderMatrix[2][0]) __iv__return_expr_floorIsOrdered = 1; else if(motorDir>=2) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[0][3]==motorDir) __iv__return_expr_floorIsOrdered = 1; else __iv__return_expr_floorIsOrdered = 0; 
	__CPROVER_assume(__iv__return_expr_floorIsOrdered == 0 || __iv__return_expr_floorIsOrdered == 1);
	return __iv__return_expr_floorIsOrdered;
}
complexity: 3
accuracy: 77.56%
coverage: 100.00%
# constraints: 9

signed int __iv__isButtonPressed_stub() {
	signed int __iv__return_expr_isButtonPressed;
	if(1==orderMatrix[0][0]) __iv__return_expr_isButtonPressed = orderMatrix[0][0]; else if(1==orderMatrix[0][3]) __iv__return_expr_isButtonPressed = 1; else if(1==orderMatrix[2][1]) __iv__return_expr_isButtonPressed = 1; else __iv__return_expr_isButtonPressed = 0; 
	__CPROVER_assume(__iv__return_expr_isButtonPressed == 0 || __iv__return_expr_isButtonPressed == 1);
	return __iv__return_expr_isButtonPressed;
}
complexity: 3
accuracy: 83.83%
coverage: 100.00%
# constraints: 10

run cbmc: (unwind: 540, timeout: 86400 sec)
cbmc running time: 311.222 sec

verification results: 
property 'assert((state != 2));' is not violated.

total CBMC running time: 5712.412 sec
total true alarm finding time: 0.0 sec
total refinement time: 0.0 sec, # of refinements: 0
peak memory usage: 8003.70 MB

call elev_get_button_signal((elev_button_type_t)(button), floorNum) (call id 49)
call floorIsOrdered(previousMainFloor, motorDirection) (call id 20)
call isButtonPressed() (call id 11)
call floorIsOrdered(previousMainFloor, motorDirection) (call id 14)
Iteration 0:
signed int __iv__elev_get_button_signal_stub(elev_button_type_t button, signed int floor) {
	signed int __iv__return_expr_elev_get_button_signal;
	signed int __iv__nondet_input_elev_get_button_signal_1 = __VERIFIER_nondet_signed_int();
	__iv__return_expr_elev_get_button_signal = __iv__nondet_input_elev_get_button_signal_1;
	__CPROVER_assume(__iv__return_expr_elev_get_button_signal == 0 || __iv__return_expr_elev_get_button_signal == 1);
	return __iv__return_expr_elev_get_button_signal;
}
complexity: 0
accuracy: 100.00%
coverage: 100.00%
# constraints: 2

signed int __iv__floorIsOrdered_stub(signed int floorNum, signed int motorDir) {
	signed int __iv__return_expr_floorIsOrdered;
	if(1==orderMatrix[2][0]) __iv__return_expr_floorIsOrdered = 1; else if(motorDir>=2) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[0][3]==motorDir) __iv__return_expr_floorIsOrdered = 1; else __iv__return_expr_floorIsOrdered = 0; 
	__CPROVER_assume(__iv__return_expr_floorIsOrdered == 0 || __iv__return_expr_floorIsOrdered == 1);
	return __iv__return_expr_floorIsOrdered;
}
complexity: 3
accuracy: 77.56%
coverage: 100.00%
# constraints: 9

signed int __iv__isButtonPressed_stub() {
	signed int __iv__return_expr_isButtonPressed;
	if(1==orderMatrix[0][0]) __iv__return_expr_isButtonPressed = orderMatrix[0][0]; else if(1==orderMatrix[0][3]) __iv__return_expr_isButtonPressed = 1; else if(1==orderMatrix[2][1]) __iv__return_expr_isButtonPressed = 1; else __iv__return_expr_isButtonPressed = 0; 
	__CPROVER_assume(__iv__return_expr_isButtonPressed == 0 || __iv__return_expr_isButtonPressed == 1);
	return __iv__return_expr_isButtonPressed;
}
complexity: 3
accuracy: 83.83%
coverage: 100.00%
# constraints: 10

run cbmc: (unwind: 550, timeout: 86400 sec)
cbmc running time: 227.371 sec

verification results: 
property 'assert((state != 2));' is not violated.

total CBMC running time: 5939.783 sec
total true alarm finding time: 0.0 sec
total refinement time: 0.0 sec, # of refinements: 0
peak memory usage: 8157.62 MB

call elev_get_button_signal((elev_button_type_t)(button), floorNum) (call id 49)
call floorIsOrdered(previousMainFloor, motorDirection) (call id 20)
call isButtonPressed() (call id 11)
call floorIsOrdered(previousMainFloor, motorDirection) (call id 14)
Iteration 0:
signed int __iv__elev_get_button_signal_stub(elev_button_type_t button, signed int floor) {
	signed int __iv__return_expr_elev_get_button_signal;
	signed int __iv__nondet_input_elev_get_button_signal_1 = __VERIFIER_nondet_signed_int();
	__iv__return_expr_elev_get_button_signal = __iv__nondet_input_elev_get_button_signal_1;
	__CPROVER_assume(__iv__return_expr_elev_get_button_signal == 0 || __iv__return_expr_elev_get_button_signal == 1);
	return __iv__return_expr_elev_get_button_signal;
}
complexity: 0
accuracy: 100.00%
coverage: 100.00%
# constraints: 2

signed int __iv__floorIsOrdered_stub(signed int floorNum, signed int motorDir) {
	signed int __iv__return_expr_floorIsOrdered;
	if(1==orderMatrix[2][0]) __iv__return_expr_floorIsOrdered = 1; else if(motorDir>=2) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[0][3]==motorDir) __iv__return_expr_floorIsOrdered = 1; else __iv__return_expr_floorIsOrdered = 0; 
	__CPROVER_assume(__iv__return_expr_floorIsOrdered == 0 || __iv__return_expr_floorIsOrdered == 1);
	return __iv__return_expr_floorIsOrdered;
}
complexity: 3
accuracy: 77.56%
coverage: 100.00%
# constraints: 9

signed int __iv__isButtonPressed_stub() {
	signed int __iv__return_expr_isButtonPressed;
	if(1==orderMatrix[0][0]) __iv__return_expr_isButtonPressed = orderMatrix[0][0]; else if(1==orderMatrix[0][3]) __iv__return_expr_isButtonPressed = 1; else if(1==orderMatrix[2][1]) __iv__return_expr_isButtonPressed = 1; else __iv__return_expr_isButtonPressed = 0; 
	__CPROVER_assume(__iv__return_expr_isButtonPressed == 0 || __iv__return_expr_isButtonPressed == 1);
	return __iv__return_expr_isButtonPressed;
}
complexity: 3
accuracy: 83.83%
coverage: 100.00%
# constraints: 10

run cbmc: (unwind: 560, timeout: 86400 sec)
cbmc running time: 352.095 sec

verification results: 
property 'assert((state != 2));' is not violated.

total CBMC running time: 6291.878 sec
total true alarm finding time: 0.0 sec
total refinement time: 0.0 sec, # of refinements: 0
peak memory usage: 8505.93 MB

call elev_get_button_signal((elev_button_type_t)(button), floorNum) (call id 49)
call floorIsOrdered(previousMainFloor, motorDirection) (call id 20)
call isButtonPressed() (call id 11)
call floorIsOrdered(previousMainFloor, motorDirection) (call id 14)
Iteration 0:
signed int __iv__elev_get_button_signal_stub(elev_button_type_t button, signed int floor) {
	signed int __iv__return_expr_elev_get_button_signal;
	signed int __iv__nondet_input_elev_get_button_signal_1 = __VERIFIER_nondet_signed_int();
	__iv__return_expr_elev_get_button_signal = __iv__nondet_input_elev_get_button_signal_1;
	__CPROVER_assume(__iv__return_expr_elev_get_button_signal == 0 || __iv__return_expr_elev_get_button_signal == 1);
	return __iv__return_expr_elev_get_button_signal;
}
complexity: 0
accuracy: 100.00%
coverage: 100.00%
# constraints: 2

signed int __iv__floorIsOrdered_stub(signed int floorNum, signed int motorDir) {
	signed int __iv__return_expr_floorIsOrdered;
	if(1==orderMatrix[2][0]) __iv__return_expr_floorIsOrdered = 1; else if(motorDir>=2) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[0][3]==motorDir) __iv__return_expr_floorIsOrdered = 1; else __iv__return_expr_floorIsOrdered = 0; 
	__CPROVER_assume(__iv__return_expr_floorIsOrdered == 0 || __iv__return_expr_floorIsOrdered == 1);
	return __iv__return_expr_floorIsOrdered;
}
complexity: 3
accuracy: 77.56%
coverage: 100.00%
# constraints: 9

signed int __iv__isButtonPressed_stub() {
	signed int __iv__return_expr_isButtonPressed;
	if(1==orderMatrix[0][0]) __iv__return_expr_isButtonPressed = orderMatrix[0][0]; else if(1==orderMatrix[0][3]) __iv__return_expr_isButtonPressed = 1; else if(1==orderMatrix[2][1]) __iv__return_expr_isButtonPressed = 1; else __iv__return_expr_isButtonPressed = 0; 
	__CPROVER_assume(__iv__return_expr_isButtonPressed == 0 || __iv__return_expr_isButtonPressed == 1);
	return __iv__return_expr_isButtonPressed;
}
complexity: 3
accuracy: 83.83%
coverage: 100.00%
# constraints: 10

run cbmc: (unwind: 570, timeout: 86400 sec)
cbmc running time: 215.804 sec

verification results: 
property 'assert((state != 2));' is not violated.

total CBMC running time: 6507.682 sec
total true alarm finding time: 0.0 sec
total refinement time: 0.0 sec, # of refinements: 0
peak memory usage: 8505.93 MB

call elev_get_button_signal((elev_button_type_t)(button), floorNum) (call id 49)
call floorIsOrdered(previousMainFloor, motorDirection) (call id 20)
call isButtonPressed() (call id 11)
call floorIsOrdered(previousMainFloor, motorDirection) (call id 14)
Iteration 0:
signed int __iv__elev_get_button_signal_stub(elev_button_type_t button, signed int floor) {
	signed int __iv__return_expr_elev_get_button_signal;
	signed int __iv__nondet_input_elev_get_button_signal_1 = __VERIFIER_nondet_signed_int();
	__iv__return_expr_elev_get_button_signal = __iv__nondet_input_elev_get_button_signal_1;
	__CPROVER_assume(__iv__return_expr_elev_get_button_signal == 0 || __iv__return_expr_elev_get_button_signal == 1);
	return __iv__return_expr_elev_get_button_signal;
}
complexity: 0
accuracy: 100.00%
coverage: 100.00%
# constraints: 2

signed int __iv__floorIsOrdered_stub(signed int floorNum, signed int motorDir) {
	signed int __iv__return_expr_floorIsOrdered;
	if(1==orderMatrix[2][0]) __iv__return_expr_floorIsOrdered = 1; else if(motorDir>=2) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[0][3]==motorDir) __iv__return_expr_floorIsOrdered = 1; else __iv__return_expr_floorIsOrdered = 0; 
	__CPROVER_assume(__iv__return_expr_floorIsOrdered == 0 || __iv__return_expr_floorIsOrdered == 1);
	return __iv__return_expr_floorIsOrdered;
}
complexity: 3
accuracy: 77.56%
coverage: 100.00%
# constraints: 9

signed int __iv__isButtonPressed_stub() {
	signed int __iv__return_expr_isButtonPressed;
	if(1==orderMatrix[0][0]) __iv__return_expr_isButtonPressed = orderMatrix[0][0]; else if(1==orderMatrix[0][3]) __iv__return_expr_isButtonPressed = 1; else if(1==orderMatrix[2][1]) __iv__return_expr_isButtonPressed = 1; else __iv__return_expr_isButtonPressed = 0; 
	__CPROVER_assume(__iv__return_expr_isButtonPressed == 0 || __iv__return_expr_isButtonPressed == 1);
	return __iv__return_expr_isButtonPressed;
}
complexity: 3
accuracy: 83.83%
coverage: 100.00%
# constraints: 10

run cbmc: (unwind: 580, timeout: 86400 sec)
cbmc running time: 225.168 sec

verification results: 
property 'assert((state != 2));' is not violated.

total CBMC running time: 6732.85 sec
total true alarm finding time: 0.0 sec
total refinement time: 0.0 sec, # of refinements: 0
peak memory usage: 8642.42 MB

call elev_get_button_signal((elev_button_type_t)(button), floorNum) (call id 49)
call floorIsOrdered(previousMainFloor, motorDirection) (call id 20)
call isButtonPressed() (call id 11)
call floorIsOrdered(previousMainFloor, motorDirection) (call id 14)
Iteration 0:
signed int __iv__elev_get_button_signal_stub(elev_button_type_t button, signed int floor) {
	signed int __iv__return_expr_elev_get_button_signal;
	signed int __iv__nondet_input_elev_get_button_signal_1 = __VERIFIER_nondet_signed_int();
	__iv__return_expr_elev_get_button_signal = __iv__nondet_input_elev_get_button_signal_1;
	__CPROVER_assume(__iv__return_expr_elev_get_button_signal == 0 || __iv__return_expr_elev_get_button_signal == 1);
	return __iv__return_expr_elev_get_button_signal;
}
complexity: 0
accuracy: 100.00%
coverage: 100.00%
# constraints: 2

signed int __iv__floorIsOrdered_stub(signed int floorNum, signed int motorDir) {
	signed int __iv__return_expr_floorIsOrdered;
	if(1==orderMatrix[2][0]) __iv__return_expr_floorIsOrdered = 1; else if(motorDir>=2) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[0][3]==motorDir) __iv__return_expr_floorIsOrdered = 1; else __iv__return_expr_floorIsOrdered = 0; 
	__CPROVER_assume(__iv__return_expr_floorIsOrdered == 0 || __iv__return_expr_floorIsOrdered == 1);
	return __iv__return_expr_floorIsOrdered;
}
complexity: 3
accuracy: 77.56%
coverage: 100.00%
# constraints: 9

signed int __iv__isButtonPressed_stub() {
	signed int __iv__return_expr_isButtonPressed;
	if(1==orderMatrix[0][0]) __iv__return_expr_isButtonPressed = orderMatrix[0][0]; else if(1==orderMatrix[0][3]) __iv__return_expr_isButtonPressed = 1; else if(1==orderMatrix[2][1]) __iv__return_expr_isButtonPressed = 1; else __iv__return_expr_isButtonPressed = 0; 
	__CPROVER_assume(__iv__return_expr_isButtonPressed == 0 || __iv__return_expr_isButtonPressed == 1);
	return __iv__return_expr_isButtonPressed;
}
complexity: 3
accuracy: 83.83%
coverage: 100.00%
# constraints: 10

run cbmc: (unwind: 590, timeout: 86400 sec)
cbmc running time: 249.789 sec

verification results: 
property 'assert((state != 2));' is not violated.

total CBMC running time: 6982.639 sec
total true alarm finding time: 0.0 sec
total refinement time: 0.0 sec, # of refinements: 0
peak memory usage: 8793.58 MB

call elev_get_button_signal((elev_button_type_t)(button), floorNum) (call id 49)
call floorIsOrdered(previousMainFloor, motorDirection) (call id 20)
call isButtonPressed() (call id 11)
call floorIsOrdered(previousMainFloor, motorDirection) (call id 14)
Iteration 0:
signed int __iv__elev_get_button_signal_stub(elev_button_type_t button, signed int floor) {
	signed int __iv__return_expr_elev_get_button_signal;
	signed int __iv__nondet_input_elev_get_button_signal_1 = __VERIFIER_nondet_signed_int();
	__iv__return_expr_elev_get_button_signal = __iv__nondet_input_elev_get_button_signal_1;
	__CPROVER_assume(__iv__return_expr_elev_get_button_signal == 0 || __iv__return_expr_elev_get_button_signal == 1);
	return __iv__return_expr_elev_get_button_signal;
}
complexity: 0
accuracy: 100.00%
coverage: 100.00%
# constraints: 2

signed int __iv__floorIsOrdered_stub(signed int floorNum, signed int motorDir) {
	signed int __iv__return_expr_floorIsOrdered;
	if(1==orderMatrix[2][0]) __iv__return_expr_floorIsOrdered = 1; else if(motorDir>=2) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[0][3]==motorDir) __iv__return_expr_floorIsOrdered = 1; else __iv__return_expr_floorIsOrdered = 0; 
	__CPROVER_assume(__iv__return_expr_floorIsOrdered == 0 || __iv__return_expr_floorIsOrdered == 1);
	return __iv__return_expr_floorIsOrdered;
}
complexity: 3
accuracy: 77.56%
coverage: 100.00%
# constraints: 9

signed int __iv__isButtonPressed_stub() {
	signed int __iv__return_expr_isButtonPressed;
	if(1==orderMatrix[0][0]) __iv__return_expr_isButtonPressed = orderMatrix[0][0]; else if(1==orderMatrix[0][3]) __iv__return_expr_isButtonPressed = 1; else if(1==orderMatrix[2][1]) __iv__return_expr_isButtonPressed = 1; else __iv__return_expr_isButtonPressed = 0; 
	__CPROVER_assume(__iv__return_expr_isButtonPressed == 0 || __iv__return_expr_isButtonPressed == 1);
	return __iv__return_expr_isButtonPressed;
}
complexity: 3
accuracy: 83.83%
coverage: 100.00%
# constraints: 10

run cbmc: (unwind: 600, timeout: 86400 sec)
cbmc running time: 441.266 sec

verification results: 
property 'assert((state != 2));' is not violated.

total CBMC running time: 7423.905 sec
total true alarm finding time: 0.0 sec
total refinement time: 0.0 sec, # of refinements: 0
peak memory usage: 8964.48 MB

call elev_get_button_signal((elev_button_type_t)(button), floorNum) (call id 49)
call floorIsOrdered(previousMainFloor, motorDirection) (call id 20)
call isButtonPressed() (call id 11)
call floorIsOrdered(previousMainFloor, motorDirection) (call id 14)
Iteration 0:
signed int __iv__elev_get_button_signal_stub(elev_button_type_t button, signed int floor) {
	signed int __iv__return_expr_elev_get_button_signal;
	signed int __iv__nondet_input_elev_get_button_signal_1 = __VERIFIER_nondet_signed_int();
	__iv__return_expr_elev_get_button_signal = __iv__nondet_input_elev_get_button_signal_1;
	__CPROVER_assume(__iv__return_expr_elev_get_button_signal == 0 || __iv__return_expr_elev_get_button_signal == 1);
	return __iv__return_expr_elev_get_button_signal;
}
complexity: 0
accuracy: 100.00%
coverage: 100.00%
# constraints: 2

signed int __iv__floorIsOrdered_stub(signed int floorNum, signed int motorDir) {
	signed int __iv__return_expr_floorIsOrdered;
	if(1==orderMatrix[2][0]) __iv__return_expr_floorIsOrdered = 1; else if(motorDir>=2) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[0][3]==motorDir) __iv__return_expr_floorIsOrdered = 1; else __iv__return_expr_floorIsOrdered = 0; 
	__CPROVER_assume(__iv__return_expr_floorIsOrdered == 0 || __iv__return_expr_floorIsOrdered == 1);
	return __iv__return_expr_floorIsOrdered;
}
complexity: 3
accuracy: 77.56%
coverage: 100.00%
# constraints: 9

signed int __iv__isButtonPressed_stub() {
	signed int __iv__return_expr_isButtonPressed;
	if(1==orderMatrix[0][0]) __iv__return_expr_isButtonPressed = orderMatrix[0][0]; else if(1==orderMatrix[0][3]) __iv__return_expr_isButtonPressed = 1; else if(1==orderMatrix[2][1]) __iv__return_expr_isButtonPressed = 1; else __iv__return_expr_isButtonPressed = 0; 
	__CPROVER_assume(__iv__return_expr_isButtonPressed == 0 || __iv__return_expr_isButtonPressed == 1);
	return __iv__return_expr_isButtonPressed;
}
complexity: 3
accuracy: 83.83%
coverage: 100.00%
# constraints: 10

run cbmc: (unwind: 610, timeout: 86400 sec)
cbmc running time: 641.507 sec

verification results: 
property 'assert((state != 2));' is FALSE alarm.
Counterexample-guided true alarm finding: 
cbmc time (unwind: 610): 7.324 sec
property 'assert((state != 2));' is FALSE alarm.
true alarm finding time: 9.547 sec


synthesize new stub refined by counterexamples (unit timeout: 600 sec)
on each refinement:
refinement time: 7.921 sec

Iteration 1:
signed int __iv__elev_get_button_signal_stub(elev_button_type_t button, signed int floor) {
	signed int __iv__return_expr_elev_get_button_signal;
	signed int __iv__nondet_input_elev_get_button_signal_1 = __VERIFIER_nondet_signed_int();
	__iv__return_expr_elev_get_button_signal = __iv__nondet_input_elev_get_button_signal_1;
	__CPROVER_assume(__iv__return_expr_elev_get_button_signal == 0 || __iv__return_expr_elev_get_button_signal == 1);
	return __iv__return_expr_elev_get_button_signal;
}
complexity: 0
accuracy: 100.00%
coverage: 100.00%
# constraints: 2

signed int __iv__floorIsOrdered_stub(signed int floorNum, signed int motorDir) {
	signed int __iv__return_expr_floorIsOrdered;
	if(orderMatrix[1][2]<orderMatrix[2][3]) if((-1)==motorDir) __iv__return_expr_floorIsOrdered = 0; else __iv__return_expr_floorIsOrdered = 1; else if(motorDir>=2) __iv__return_expr_floorIsOrdered = 0; else if(floorNum<orderMatrix[1][3]) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[2][3]<orderMatrix[1][3]) __iv__return_expr_floorIsOrdered = 0; else __iv__return_expr_floorIsOrdered = orderMatrix[1][1]; 
	__CPROVER_assume(__iv__return_expr_floorIsOrdered == 0 || __iv__return_expr_floorIsOrdered == 1);
	return __iv__return_expr_floorIsOrdered;
}
complexity: 5
# constraints: 14

signed int __iv__isButtonPressed_stub() {
	signed int __iv__return_expr_isButtonPressed;
	if(orderMatrix[2][1]>=2) __iv__return_expr_isButtonPressed = 0; else if((-1)>=orderMatrix[2][1]) __iv__return_expr_isButtonPressed = 0; else if(1==orderMatrix[0][0]) __iv__return_expr_isButtonPressed = orderMatrix[0][0]; else if(1==orderMatrix[0][3]) __iv__return_expr_isButtonPressed = orderMatrix[0][3]; else if(1==orderMatrix[2][1]) __iv__return_expr_isButtonPressed = orderMatrix[2][1]; else if(orderMatrix[0][2]<(-1)) __iv__return_expr_isButtonPressed = orderMatrix[2][0]; else __iv__return_expr_isButtonPressed = 1; 
	__CPROVER_assume(__iv__return_expr_isButtonPressed == 0 || __iv__return_expr_isButtonPressed == 1);
	return __iv__return_expr_isButtonPressed;
}
complexity: 6
# constraints: 12

run cbmc: (unwind: 610, timeout: 86400 sec)
cbmc running time: 695.66 sec

verification results: 
property 'assert((state != 2));' is FALSE alarm.
Counterexample-guided true alarm finding: 
cbmc time (unwind: 610): 4.764 sec
property 'assert((state != 2));' is FALSE alarm.
true alarm finding time: 5.974 sec


synthesize new stub refined by counterexamples (unit timeout: 600 sec)
on each refinement:
refinement time: 12.905 sec

Iteration 2:
signed int __iv__elev_get_button_signal_stub(elev_button_type_t button, signed int floor) {
	signed int __iv__return_expr_elev_get_button_signal;
	signed int __iv__nondet_input_elev_get_button_signal_1 = __VERIFIER_nondet_signed_int();
	__iv__return_expr_elev_get_button_signal = __iv__nondet_input_elev_get_button_signal_1;
	__CPROVER_assume(__iv__return_expr_elev_get_button_signal == 0 || __iv__return_expr_elev_get_button_signal == 1);
	return __iv__return_expr_elev_get_button_signal;
}
complexity: 0
accuracy: 100.00%
coverage: 100.00%
# constraints: 2

signed int __iv__floorIsOrdered_stub(signed int floorNum, signed int motorDir) {
	signed int __iv__return_expr_floorIsOrdered;
	if(orderMatrix[0][3]==motorDir) __iv__return_expr_floorIsOrdered = orderMatrix[0][0]; else if(orderMatrix[1][2]<orderMatrix[2][3]) __iv__return_expr_floorIsOrdered = orderMatrix[2][0]; else if(motorDir>=2) __iv__return_expr_floorIsOrdered = 0; else if((-1)>=orderMatrix[1][0]) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[2][3]<orderMatrix[1][3]) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[0][1]<orderMatrix[1][1]) __iv__return_expr_floorIsOrdered = orderMatrix[1][1]; else if(orderMatrix[2][1]>=motorDir) if(0==orderMatrix[2][0]) __iv__return_expr_floorIsOrdered = orderMatrix[2][1]; else if(orderMatrix[0][1]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[1][1]; else if(orderMatrix[0][1]<orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = orderMatrix[1][1]; else if(floorNum>=2) __iv__return_expr_floorIsOrdered = orderMatrix[1][1]; else __iv__return_expr_floorIsOrdered = orderMatrix[0][2]; else __iv__return_expr_floorIsOrdered = motorDir; 
	__CPROVER_assume(__iv__return_expr_floorIsOrdered == 0 || __iv__return_expr_floorIsOrdered == 1);
	return __iv__return_expr_floorIsOrdered;
}
complexity: 11
# constraints: 20

signed int __iv__isButtonPressed_stub() {
	signed int __iv__return_expr_isButtonPressed;
	if(orderMatrix[2][1]>=2) __iv__return_expr_isButtonPressed = 0; else if((-1)>=orderMatrix[2][1]) __iv__return_expr_isButtonPressed = 0; else if(1==orderMatrix[0][0]) __iv__return_expr_isButtonPressed = orderMatrix[0][0]; else if(1==orderMatrix[0][3]) __iv__return_expr_isButtonPressed = orderMatrix[0][3]; else if(1==orderMatrix[2][1]) __iv__return_expr_isButtonPressed = orderMatrix[2][1]; else if(orderMatrix[0][2]<(-1)) __iv__return_expr_isButtonPressed = orderMatrix[2][0]; else __iv__return_expr_isButtonPressed = 1; 
	__CPROVER_assume(__iv__return_expr_isButtonPressed == 0 || __iv__return_expr_isButtonPressed == 1);
	return __iv__return_expr_isButtonPressed;
}
complexity: 6
# constraints: 12

run cbmc: (unwind: 610, timeout: 86400 sec)
cbmc running time: 713.63 sec

verification results: 
property 'assert((state != 2));' is FALSE alarm.
Counterexample-guided true alarm finding: 
cbmc time (unwind: 610): 4.526 sec
property 'assert((state != 2));' is FALSE alarm.
true alarm finding time: 5.711 sec


synthesize new stub refined by counterexamples (unit timeout: 600 sec)
on each refinement:
refinement time: 18.299 sec

Iteration 3:
signed int __iv__elev_get_button_signal_stub(elev_button_type_t button, signed int floor) {
	signed int __iv__return_expr_elev_get_button_signal;
	signed int __iv__nondet_input_elev_get_button_signal_1 = __VERIFIER_nondet_signed_int();
	__iv__return_expr_elev_get_button_signal = __iv__nondet_input_elev_get_button_signal_1;
	__CPROVER_assume(__iv__return_expr_elev_get_button_signal == 0 || __iv__return_expr_elev_get_button_signal == 1);
	return __iv__return_expr_elev_get_button_signal;
}
complexity: 0
accuracy: 100.00%
coverage: 100.00%
# constraints: 2

signed int __iv__floorIsOrdered_stub(signed int floorNum, signed int motorDir) {
	signed int __iv__return_expr_floorIsOrdered;
	if((-1)==orderMatrix[1][2]) __iv__return_expr_floorIsOrdered = orderMatrix[0][0]; else if(motorDir>=2) __iv__return_expr_floorIsOrdered = 0; else if((-1)>=orderMatrix[2][1]) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[2][3]<orderMatrix[1][3]) __iv__return_expr_floorIsOrdered = 0; else if((-1)>=orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = orderMatrix[2][0]; else if(orderMatrix[2][1]>=motorDir) if((-1)>=orderMatrix[1][0]) __iv__return_expr_floorIsOrdered = 0; else if(0==orderMatrix[2][0]) __iv__return_expr_floorIsOrdered = orderMatrix[2][1]; else if(orderMatrix[0][1]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[1][1]; else if(orderMatrix[0][1]<orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = orderMatrix[1][1]; else if(floorNum>=2) __iv__return_expr_floorIsOrdered = orderMatrix[1][1]; else if(orderMatrix[0][1]<orderMatrix[1][0]) __iv__return_expr_floorIsOrdered = orderMatrix[1][1]; else if(orderMatrix[1][0]<orderMatrix[2][2]) __iv__return_expr_floorIsOrdered = orderMatrix[1][1]; else __iv__return_expr_floorIsOrdered = orderMatrix[1][2]; else __iv__return_expr_floorIsOrdered = motorDir; 
	__CPROVER_assume(__iv__return_expr_floorIsOrdered == 0 || __iv__return_expr_floorIsOrdered == 1);
	return __iv__return_expr_floorIsOrdered;
}
complexity: 13
# constraints: 28

signed int __iv__isButtonPressed_stub() {
	signed int __iv__return_expr_isButtonPressed;
	if(orderMatrix[2][1]>=2) __iv__return_expr_isButtonPressed = 0; else if((-1)>=orderMatrix[2][1]) __iv__return_expr_isButtonPressed = 0; else if(1==orderMatrix[0][0]) __iv__return_expr_isButtonPressed = orderMatrix[0][0]; else if(1==orderMatrix[0][3]) __iv__return_expr_isButtonPressed = orderMatrix[0][3]; else if(1==orderMatrix[2][1]) __iv__return_expr_isButtonPressed = orderMatrix[2][1]; else if(orderMatrix[0][2]<(-1)) __iv__return_expr_isButtonPressed = orderMatrix[2][0]; else __iv__return_expr_isButtonPressed = 1; 
	__CPROVER_assume(__iv__return_expr_isButtonPressed == 0 || __iv__return_expr_isButtonPressed == 1);
	return __iv__return_expr_isButtonPressed;
}
complexity: 6
# constraints: 12

run cbmc: (unwind: 610, timeout: 86400 sec)
cbmc running time: 526.966 sec

verification results: 
property 'assert((state != 2));' is FALSE alarm.
Counterexample-guided true alarm finding: 
cbmc time (unwind: 610): 4.342 sec
property 'assert((state != 2));' is FALSE alarm.
true alarm finding time: 5.417 sec


synthesize new stub refined by counterexamples (unit timeout: 600 sec)
on each refinement:
refinement time: 23.316 sec

Iteration 4:
signed int __iv__elev_get_button_signal_stub(elev_button_type_t button, signed int floor) {
	signed int __iv__return_expr_elev_get_button_signal;
	signed int __iv__nondet_input_elev_get_button_signal_1 = __VERIFIER_nondet_signed_int();
	__iv__return_expr_elev_get_button_signal = __iv__nondet_input_elev_get_button_signal_1;
	__CPROVER_assume(__iv__return_expr_elev_get_button_signal == 0 || __iv__return_expr_elev_get_button_signal == 1);
	return __iv__return_expr_elev_get_button_signal;
}
complexity: 0
accuracy: 100.00%
coverage: 100.00%
# constraints: 2

signed int __iv__floorIsOrdered_stub(signed int floorNum, signed int motorDir) {
	signed int __iv__return_expr_floorIsOrdered;
	if((-1)==orderMatrix[1][2]) __iv__return_expr_floorIsOrdered = orderMatrix[0][0]; else if(motorDir>=2) __iv__return_expr_floorIsOrdered = 0; else if((-1)>=orderMatrix[2][1]) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[2][3]<orderMatrix[1][3]) __iv__return_expr_floorIsOrdered = 0; else if((-1)>=orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = 1; else if(orderMatrix[0][1]<orderMatrix[1][1]) __iv__return_expr_floorIsOrdered = orderMatrix[2][3]; else if((-1)>=orderMatrix[1][0]) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[0][1]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[0][1]<orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = 0; else if(floorNum>=2) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[1][2]<orderMatrix[1][3]) __iv__return_expr_floorIsOrdered = orderMatrix[1][3]; else if(orderMatrix[1][2]<orderMatrix[2][3]) __iv__return_expr_floorIsOrdered = orderMatrix[2][3]; else if(orderMatrix[2][1]<motorDir) __iv__return_expr_floorIsOrdered = motorDir; else if(0==orderMatrix[2][0]) __iv__return_expr_floorIsOrdered = motorDir; else if(orderMatrix[0][3]>=orderMatrix[1][1]) if(orderMatrix[0][1]<orderMatrix[1][0]) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[1][0]<orderMatrix[2][2]) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[0][3]<orderMatrix[1][3]) __iv__return_expr_floorIsOrdered = orderMatrix[1][3]; else if(orderMatrix[0][3]==orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = orderMatrix[0][3]; else __iv__return_expr_floorIsOrdered = 0; else __iv__return_expr_floorIsOrdered = orderMatrix[1][1]; 
	__CPROVER_assume(__iv__return_expr_floorIsOrdered == 0 || __iv__return_expr_floorIsOrdered == 1);
	return __iv__return_expr_floorIsOrdered;
}
complexity: 19
# constraints: 33

signed int __iv__isButtonPressed_stub() {
	signed int __iv__return_expr_isButtonPressed;
	if(orderMatrix[2][1]>=2) __iv__return_expr_isButtonPressed = 0; else if((-1)>=orderMatrix[2][1]) __iv__return_expr_isButtonPressed = 0; else if(1==orderMatrix[0][0]) __iv__return_expr_isButtonPressed = orderMatrix[0][0]; else if(1==orderMatrix[0][3]) __iv__return_expr_isButtonPressed = orderMatrix[0][3]; else if(1==orderMatrix[2][1]) __iv__return_expr_isButtonPressed = orderMatrix[2][1]; else if(orderMatrix[0][2]<(-1)) __iv__return_expr_isButtonPressed = orderMatrix[2][0]; else __iv__return_expr_isButtonPressed = 1; 
	__CPROVER_assume(__iv__return_expr_isButtonPressed == 0 || __iv__return_expr_isButtonPressed == 1);
	return __iv__return_expr_isButtonPressed;
}
complexity: 6
# constraints: 12

run cbmc: (unwind: 610, timeout: 86400 sec)
cbmc running time: 920.162 sec

verification results: 
property 'assert((state != 2));' is FALSE alarm.
Counterexample-guided true alarm finding: 
cbmc time (unwind: 610): 4.596 sec
property 'assert((state != 2));' is FALSE alarm.
true alarm finding time: 5.976 sec


synthesize new stub refined by counterexamples (unit timeout: 600 sec)
on each refinement:
refinement time: 28.627 sec

Iteration 5:
signed int __iv__elev_get_button_signal_stub(elev_button_type_t button, signed int floor) {
	signed int __iv__return_expr_elev_get_button_signal;
	signed int __iv__nondet_input_elev_get_button_signal_1 = __VERIFIER_nondet_signed_int();
	__iv__return_expr_elev_get_button_signal = __iv__nondet_input_elev_get_button_signal_1;
	__CPROVER_assume(__iv__return_expr_elev_get_button_signal == 0 || __iv__return_expr_elev_get_button_signal == 1);
	return __iv__return_expr_elev_get_button_signal;
}
complexity: 0
accuracy: 100.00%
coverage: 100.00%
# constraints: 2

signed int __iv__floorIsOrdered_stub(signed int floorNum, signed int motorDir) {
	signed int __iv__return_expr_floorIsOrdered;
	if((-1)==orderMatrix[1][2]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if((-1)>=orderMatrix[0][1]) if(orderMatrix[1][2]<orderMatrix[2][3]) __iv__return_expr_floorIsOrdered = orderMatrix[2][0]; else __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[2][3]<orderMatrix[1][3]) __iv__return_expr_floorIsOrdered = 0; else if((-1)>=orderMatrix[1][0]) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[0][1]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[0][1]<orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[1][2]<orderMatrix[1][3]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[1][2]<orderMatrix[2][3]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(3==orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[1][1]<orderMatrix[1][3]) __iv__return_expr_floorIsOrdered = orderMatrix[2][1]; else if(orderMatrix[1][0]<orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = orderMatrix[2][1]; else if(orderMatrix[0][3]>=2) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[0][3]<orderMatrix[1][3]) __iv__return_expr_floorIsOrdered = orderMatrix[2][1]; else if((-1)>=orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[0][1]>=motorDir) if(orderMatrix[1][1]<motorDir) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[0][3]<orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = orderMatrix[2][1]; else if(orderMatrix[1][0]<orderMatrix[1][3]) __iv__return_expr_floorIsOrdered = orderMatrix[2][1]; else if(orderMatrix[1][0]<orderMatrix[2][1]) __iv__return_expr_floorIsOrdered = orderMatrix[2][1]; else if(1==orderMatrix[1][0]) if(orderMatrix[0][2]<orderMatrix[2][2]) __iv__return_expr_floorIsOrdered = 0; else __iv__return_expr_floorIsOrdered = orderMatrix[1][0]; else __iv__return_expr_floorIsOrdered = 0; else __iv__return_expr_floorIsOrdered = orderMatrix[1][1]; 
	__CPROVER_assume(__iv__return_expr_floorIsOrdered == 0 || __iv__return_expr_floorIsOrdered == 1);
	return __iv__return_expr_floorIsOrdered;
}
complexity: 22
# constraints: 41

signed int __iv__isButtonPressed_stub() {
	signed int __iv__return_expr_isButtonPressed;
	if(orderMatrix[2][1]>=2) __iv__return_expr_isButtonPressed = 0; else if((-1)>=orderMatrix[2][1]) __iv__return_expr_isButtonPressed = 0; else if(1==orderMatrix[0][0]) __iv__return_expr_isButtonPressed = orderMatrix[0][0]; else if(1==orderMatrix[0][3]) __iv__return_expr_isButtonPressed = orderMatrix[0][3]; else if(1==orderMatrix[2][1]) __iv__return_expr_isButtonPressed = orderMatrix[2][1]; else if(orderMatrix[0][2]<(-1)) __iv__return_expr_isButtonPressed = orderMatrix[2][0]; else __iv__return_expr_isButtonPressed = 1; 
	__CPROVER_assume(__iv__return_expr_isButtonPressed == 0 || __iv__return_expr_isButtonPressed == 1);
	return __iv__return_expr_isButtonPressed;
}
complexity: 6
# constraints: 12

run cbmc: (unwind: 610, timeout: 86400 sec)
cbmc running time: 594.948 sec

verification results: 
property 'assert((state != 2));' is FALSE alarm.
Counterexample-guided true alarm finding: 
cbmc time (unwind: 610): 4.666 sec
property 'assert((state != 2));' is FALSE alarm.
true alarm finding time: 5.825 sec


synthesize new stub refined by counterexamples (unit timeout: 600 sec)
on each refinement:
refinement time: 33.673 sec

Iteration 6:
signed int __iv__elev_get_button_signal_stub(elev_button_type_t button, signed int floor) {
	signed int __iv__return_expr_elev_get_button_signal;
	signed int __iv__nondet_input_elev_get_button_signal_1 = __VERIFIER_nondet_signed_int();
	__iv__return_expr_elev_get_button_signal = __iv__nondet_input_elev_get_button_signal_1;
	__CPROVER_assume(__iv__return_expr_elev_get_button_signal == 0 || __iv__return_expr_elev_get_button_signal == 1);
	return __iv__return_expr_elev_get_button_signal;
}
complexity: 0
accuracy: 100.00%
coverage: 100.00%
# constraints: 2

signed int __iv__floorIsOrdered_stub(signed int floorNum, signed int motorDir) {
	signed int __iv__return_expr_floorIsOrdered;
	if(motorDir>=2) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[2][3]<orderMatrix[1][3]) __iv__return_expr_floorIsOrdered = 0; else if((-1)==orderMatrix[1][2]) __iv__return_expr_floorIsOrdered = orderMatrix[0][0]; else if((-1)>=orderMatrix[2][1]) __iv__return_expr_floorIsOrdered = 0; else if((-1)>=orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = orderMatrix[2][0]; else if((-1)>=orderMatrix[1][0]) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[0][1]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = 0; else if(3==orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[1][2]<orderMatrix[1][0]) __iv__return_expr_floorIsOrdered = orderMatrix[1][0]; else if(orderMatrix[0][1]<orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[1][2]<orderMatrix[1][3]) __iv__return_expr_floorIsOrdered = orderMatrix[1][3]; else if(orderMatrix[1][2]<orderMatrix[2][3]) __iv__return_expr_floorIsOrdered = orderMatrix[2][3]; else if(orderMatrix[1][2]<orderMatrix[1][1]) __iv__return_expr_floorIsOrdered = orderMatrix[1][1]; else if(orderMatrix[1][0]>=orderMatrix[1][1]) if(orderMatrix[1][0]<orderMatrix[2][2]) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[1][0]<orderMatrix[1][3]) __iv__return_expr_floorIsOrdered = orderMatrix[2][1]; else if((-1)>=orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[1][3]==floorNum) __iv__return_expr_floorIsOrdered = orderMatrix[1][0]; else if(orderMatrix[0][1]<orderMatrix[1][1]) __iv__return_expr_floorIsOrdered = orderMatrix[1][0]; else if(orderMatrix[1][2]<motorDir) __iv__return_expr_floorIsOrdered = motorDir; else if(orderMatrix[2][1]>=motorDir) if(orderMatrix[0][3]<orderMatrix[2][0]) __iv__return_expr_floorIsOrdered = orderMatrix[2][1]; else if(orderMatrix[2][3]>=motorDir) if(orderMatrix[0][1]<motorDir) __iv__return_expr_floorIsOrdered = orderMatrix[2][1]; else __iv__return_expr_floorIsOrdered = orderMatrix[0][0]; else __iv__return_expr_floorIsOrdered = orderMatrix[2][1]; else __iv__return_expr_floorIsOrdered = orderMatrix[2][0]; else __iv__return_expr_floorIsOrdered = orderMatrix[1][1]; 
	__CPROVER_assume(__iv__return_expr_floorIsOrdered == 0 || __iv__return_expr_floorIsOrdered == 1);
	return __iv__return_expr_floorIsOrdered;
}
complexity: 24
# constraints: 47

signed int __iv__isButtonPressed_stub() {
	signed int __iv__return_expr_isButtonPressed;
	if(orderMatrix[2][1]>=2) __iv__return_expr_isButtonPressed = 0; else if((-1)>=orderMatrix[2][1]) __iv__return_expr_isButtonPressed = 0; else if(1==orderMatrix[0][0]) __iv__return_expr_isButtonPressed = orderMatrix[0][0]; else if(1==orderMatrix[0][3]) __iv__return_expr_isButtonPressed = orderMatrix[0][3]; else if(1==orderMatrix[2][1]) __iv__return_expr_isButtonPressed = orderMatrix[2][1]; else if(orderMatrix[0][2]<(-1)) __iv__return_expr_isButtonPressed = orderMatrix[2][0]; else __iv__return_expr_isButtonPressed = 1; 
	__CPROVER_assume(__iv__return_expr_isButtonPressed == 0 || __iv__return_expr_isButtonPressed == 1);
	return __iv__return_expr_isButtonPressed;
}
complexity: 6
# constraints: 12

run cbmc: (unwind: 610, timeout: 86400 sec)
cbmc running time: 840.001 sec

verification results: 
property 'assert((state != 2));' is FALSE alarm.
Counterexample-guided true alarm finding: 
cbmc time (unwind: 610): 4.656 sec
property 'assert((state != 2));' is FALSE alarm.
true alarm finding time: 6.033 sec


synthesize new stub refined by counterexamples (unit timeout: 600 sec)
on each refinement:
refinement time: 42.305 sec

Iteration 7:
signed int __iv__elev_get_button_signal_stub(elev_button_type_t button, signed int floor) {
	signed int __iv__return_expr_elev_get_button_signal;
	signed int __iv__nondet_input_elev_get_button_signal_1 = __VERIFIER_nondet_signed_int();
	__iv__return_expr_elev_get_button_signal = __iv__nondet_input_elev_get_button_signal_1;
	__CPROVER_assume(__iv__return_expr_elev_get_button_signal == 0 || __iv__return_expr_elev_get_button_signal == 1);
	return __iv__return_expr_elev_get_button_signal;
}
complexity: 0
accuracy: 100.00%
coverage: 100.00%
# constraints: 2

signed int __iv__floorIsOrdered_stub(signed int floorNum, signed int motorDir) {
	signed int __iv__return_expr_floorIsOrdered;
	if(motorDir>=2) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[1][2]<(-1)) __iv__return_expr_floorIsOrdered = 0; else if((-1)==orderMatrix[1][2]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if((-1)>=orderMatrix[2][1]) __iv__return_expr_floorIsOrdered = 0; else if((-1)>=orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = orderMatrix[2][0]; else if((-1)>=orderMatrix[1][0]) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[0][3]>=orderMatrix[0][0]) if(orderMatrix[1][2]<orderMatrix[1][3]) __iv__return_expr_floorIsOrdered = motorDir; else if(orderMatrix[1][2]<orderMatrix[2][3]) __iv__return_expr_floorIsOrdered = motorDir; else if(3==orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = orderMatrix[1][1]; else if(orderMatrix[0][3]<orderMatrix[2][2]) __iv__return_expr_floorIsOrdered = motorDir; else if(orderMatrix[2][2]>=orderMatrix[0][0]) if(orderMatrix[2][3]>=orderMatrix[0][0]) if(orderMatrix[0][1]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = motorDir; else if(orderMatrix[0][1]<orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = motorDir; else if(orderMatrix[1][1]<orderMatrix[1][3]) __iv__return_expr_floorIsOrdered = motorDir; else if(orderMatrix[1][0]<orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = motorDir; else if(orderMatrix[0][3]>=2) __iv__return_expr_floorIsOrdered = motorDir; else if(orderMatrix[0][3]<orderMatrix[1][3]) __iv__return_expr_floorIsOrdered = motorDir; else if((-1)>=orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[1][1]; else if(orderMatrix[1][0]<orderMatrix[1][3]) __iv__return_expr_floorIsOrdered = motorDir; else if(orderMatrix[1][2]<orderMatrix[2][2]) __iv__return_expr_floorIsOrdered = motorDir; else if(orderMatrix[1][2]<orderMatrix[0][3]) __iv__return_expr_floorIsOrdered = motorDir; else if(orderMatrix[1][2]<orderMatrix[1][0]) __iv__return_expr_floorIsOrdered = orderMatrix[1][1]; else if(orderMatrix[1][2]<orderMatrix[2][0]) __iv__return_expr_floorIsOrdered = motorDir; else if(orderMatrix[1][2]<orderMatrix[1][1]) __iv__return_expr_floorIsOrdered = motorDir; else if(0==orderMatrix[1][2]) __iv__return_expr_floorIsOrdered = motorDir; else if(orderMatrix[0][3]<orderMatrix[2][1]) __iv__return_expr_floorIsOrdered = motorDir; else if(orderMatrix[0][3]>=orderMatrix[0][1]) if(orderMatrix[0][3]<motorDir) __iv__return_expr_floorIsOrdered = motorDir; else if(orderMatrix[1][1]<orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = orderMatrix[0][2]; else if(orderMatrix[1][1]>=orderMatrix[0][1]) if(orderMatrix[0][0]==floorNum) __iv__return_expr_floorIsOrdered = orderMatrix[1][1]; else if(orderMatrix[0][1]<orderMatrix[1][1]) __iv__return_expr_floorIsOrdered = orderMatrix[1][1]; else if(orderMatrix[1][0]<motorDir) __iv__return_expr_floorIsOrdered = motorDir; else if(orderMatrix[1][0]<orderMatrix[2][1]) __iv__return_expr_floorIsOrdered = orderMatrix[2][1]; else if(1==orderMatrix[1][0]) if(orderMatrix[2][3]<orderMatrix[1][3]) __iv__return_expr_floorIsOrdered = motorDir; else if(orderMatrix[2][3]<orderMatrix[2][0]) __iv__return_expr_floorIsOrdered = motorDir; else if(orderMatrix[0][1]<motorDir) __iv__return_expr_floorIsOrdered = motorDir; else __iv__return_expr_floorIsOrdered = orderMatrix[1][1]; else __iv__return_expr_floorIsOrdered = motorDir; else __iv__return_expr_floorIsOrdered = orderMatrix[0][3]; else __iv__return_expr_floorIsOrdered = motorDir; else __iv__return_expr_floorIsOrdered = orderMatrix[0][2]; else __iv__return_expr_floorIsOrdered = orderMatrix[2][1]; else __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; 
	__CPROVER_assume(__iv__return_expr_floorIsOrdered == 0 || __iv__return_expr_floorIsOrdered == 1);
	return __iv__return_expr_floorIsOrdered;
}
complexity: 40
# constraints: 57

signed int __iv__isButtonPressed_stub() {
	signed int __iv__return_expr_isButtonPressed;
	if(orderMatrix[2][1]>=2) __iv__return_expr_isButtonPressed = 0; else if((-1)>=orderMatrix[2][1]) __iv__return_expr_isButtonPressed = 0; else if(1==orderMatrix[0][0]) __iv__return_expr_isButtonPressed = orderMatrix[0][0]; else if(1==orderMatrix[0][3]) __iv__return_expr_isButtonPressed = orderMatrix[0][3]; else if(orderMatrix[1][1]<orderMatrix[1][2]) __iv__return_expr_isButtonPressed = orderMatrix[1][2]; else if(1==orderMatrix[2][1]) __iv__return_expr_isButtonPressed = orderMatrix[2][1]; else __iv__return_expr_isButtonPressed = orderMatrix[2][3]; 
	__CPROVER_assume(__iv__return_expr_isButtonPressed == 0 || __iv__return_expr_isButtonPressed == 1);
	return __iv__return_expr_isButtonPressed;
}
complexity: 6
# constraints: 13

run cbmc: (unwind: 610, timeout: 86400 sec)
cbmc running time: 717.417 sec

verification results: 
property 'assert((state != 2));' is FALSE alarm.
Counterexample-guided true alarm finding: 
cbmc time (unwind: 610): 4.367 sec
property 'assert((state != 2));' is FALSE alarm.
true alarm finding time: 5.529 sec


synthesize new stub refined by counterexamples (unit timeout: 600 sec)
on each refinement:
refinement time: 45.605 sec

Iteration 8:
signed int __iv__elev_get_button_signal_stub(elev_button_type_t button, signed int floor) {
	signed int __iv__return_expr_elev_get_button_signal;
	signed int __iv__nondet_input_elev_get_button_signal_1 = __VERIFIER_nondet_signed_int();
	__iv__return_expr_elev_get_button_signal = __iv__nondet_input_elev_get_button_signal_1;
	__CPROVER_assume(__iv__return_expr_elev_get_button_signal == 0 || __iv__return_expr_elev_get_button_signal == 1);
	return __iv__return_expr_elev_get_button_signal;
}
complexity: 0
accuracy: 100.00%
coverage: 100.00%
# constraints: 2

signed int __iv__floorIsOrdered_stub(signed int floorNum, signed int motorDir) {
	signed int __iv__return_expr_floorIsOrdered;
	if(motorDir>=2) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[1][2]<(-1)) __iv__return_expr_floorIsOrdered = 0; else if((-1)==orderMatrix[1][2]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if((-1)>=orderMatrix[2][1]) __iv__return_expr_floorIsOrdered = 0; else if((-1)>=orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = orderMatrix[2][0]; else if(orderMatrix[1][2]<orderMatrix[1][3]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if((-1)>=orderMatrix[1][0]) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[1][2]<orderMatrix[2][3]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[1][2]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[1][1]; else if(3==orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = orderMatrix[1][1]; else if(orderMatrix[0][3]<orderMatrix[2][2]) __iv__return_expr_floorIsOrdered = orderMatrix[1][1]; else if(orderMatrix[1][0]<orderMatrix[2][2]) __iv__return_expr_floorIsOrdered = orderMatrix[1][1]; else if(orderMatrix[1][0]<orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = orderMatrix[1][1]; else if((-1)>=orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[1][1]; else if(orderMatrix[0][1]>=motorDir) if(orderMatrix[1][2]<orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = orderMatrix[1][1]; else if(orderMatrix[1][2]>=orderMatrix[1][0]) if(orderMatrix[1][2]<orderMatrix[1][1]) __iv__return_expr_floorIsOrdered = orderMatrix[1][1]; else if(orderMatrix[1][2]>=motorDir) if(orderMatrix[1][1]>=motorDir) if(orderMatrix[0][3]<orderMatrix[1][3]) __iv__return_expr_floorIsOrdered = orderMatrix[1][1]; else if(orderMatrix[0][3]>=motorDir) if(orderMatrix[0][3]>=orderMatrix[2][1]) if(orderMatrix[2][1]<motorDir) __iv__return_expr_floorIsOrdered = orderMatrix[1][1]; else if(orderMatrix[1][0]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[2][2]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[0][0]; else if(orderMatrix[0][1]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[1][1]; else if(orderMatrix[0][1]>=orderMatrix[2][1]) if(orderMatrix[0][1]<orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = orderMatrix[1][1]; else if(orderMatrix[0][1]<orderMatrix[2][3]) __iv__return_expr_floorIsOrdered = orderMatrix[1][1]; else __iv__return_expr_floorIsOrdered = orderMatrix[1][2]; else __iv__return_expr_floorIsOrdered = orderMatrix[0][3]; else __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else __iv__return_expr_floorIsOrdered = orderMatrix[1][1]; else __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else __iv__return_expr_floorIsOrdered = orderMatrix[1][1]; else __iv__return_expr_floorIsOrdered = motorDir; 
	__CPROVER_assume(__iv__return_expr_floorIsOrdered == 0 || __iv__return_expr_floorIsOrdered == 1);
	return __iv__return_expr_floorIsOrdered;
}
complexity: 30
# constraints: 60

signed int __iv__isButtonPressed_stub() {
	signed int __iv__return_expr_isButtonPressed;
	if(orderMatrix[2][1]>=2) __iv__return_expr_isButtonPressed = 0; else if((-1)>=orderMatrix[2][1]) __iv__return_expr_isButtonPressed = 0; else if(1==orderMatrix[0][0]) __iv__return_expr_isButtonPressed = orderMatrix[0][0]; else if(1==orderMatrix[0][3]) __iv__return_expr_isButtonPressed = orderMatrix[0][3]; else if(orderMatrix[1][1]<orderMatrix[1][2]) __iv__return_expr_isButtonPressed = orderMatrix[1][2]; else if(1==orderMatrix[2][1]) __iv__return_expr_isButtonPressed = orderMatrix[2][1]; else __iv__return_expr_isButtonPressed = orderMatrix[2][3]; 
	__CPROVER_assume(__iv__return_expr_isButtonPressed == 0 || __iv__return_expr_isButtonPressed == 1);
	return __iv__return_expr_isButtonPressed;
}
complexity: 6
# constraints: 13

run cbmc: (unwind: 610, timeout: 86400 sec)
cbmc running time: 888.484 sec

verification results: 
property 'assert((state != 2));' is FALSE alarm.
Counterexample-guided true alarm finding: 
cbmc time (unwind: 610): 4.506 sec
property 'assert((state != 2));' is FALSE alarm.
true alarm finding time: 5.728 sec


synthesize new stub refined by counterexamples (unit timeout: 600 sec)
on each refinement:
refinement time: 54.343 sec

Iteration 9:
signed int __iv__elev_get_button_signal_stub(elev_button_type_t button, signed int floor) {
	signed int __iv__return_expr_elev_get_button_signal;
	signed int __iv__nondet_input_elev_get_button_signal_1 = __VERIFIER_nondet_signed_int();
	__iv__return_expr_elev_get_button_signal = __iv__nondet_input_elev_get_button_signal_1;
	__CPROVER_assume(__iv__return_expr_elev_get_button_signal == 0 || __iv__return_expr_elev_get_button_signal == 1);
	return __iv__return_expr_elev_get_button_signal;
}
complexity: 0
accuracy: 100.00%
coverage: 100.00%
# constraints: 2

signed int __iv__floorIsOrdered_stub(signed int floorNum, signed int motorDir) {
	signed int __iv__return_expr_floorIsOrdered;
	if(motorDir>=2) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[1][2]<(-1)) __iv__return_expr_floorIsOrdered = 0; else if((-1)==orderMatrix[1][2]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if((-1)>=orderMatrix[2][1]) __iv__return_expr_floorIsOrdered = 0; else if((-1)>=orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = orderMatrix[2][0]; else if((-1)>=orderMatrix[1][0]) __iv__return_expr_floorIsOrdered = 0; else if(3==orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[1][0]<orderMatrix[2][2]) __iv__return_expr_floorIsOrdered = motorDir; else if(orderMatrix[0][3]<orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = motorDir; else if(orderMatrix[1][0]<orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = motorDir; else if(orderMatrix[0][3]>=2) __iv__return_expr_floorIsOrdered = motorDir; else if((-1)>=orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[2][2]<orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = motorDir; else if(orderMatrix[0][1]<orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = motorDir; else if(orderMatrix[2][0]<orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[2][0]<orderMatrix[0][3]) __iv__return_expr_floorIsOrdered = orderMatrix[0][3]; else if(orderMatrix[2][0]<orderMatrix[1][2]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[2][0]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[0][0]; else if(orderMatrix[0][1]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[0][0]; else if(orderMatrix[1][0]<orderMatrix[0][3]) __iv__return_expr_floorIsOrdered = motorDir; else if(orderMatrix[1][0]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[1][2]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = motorDir; else if(orderMatrix[1][2]<orderMatrix[0][3]) __iv__return_expr_floorIsOrdered = motorDir; else if(orderMatrix[1][3]<orderMatrix[1][1]) __iv__return_expr_floorIsOrdered = orderMatrix[1][1]; else if(orderMatrix[0][0]<orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = motorDir; else if(floorNum<orderMatrix[2][1]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(floorNum<orderMatrix[1][1]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[2][1]<orderMatrix[1][1]) __iv__return_expr_floorIsOrdered = orderMatrix[1][1]; else if(orderMatrix[2][1]<orderMatrix[1][3]) __iv__return_expr_floorIsOrdered = motorDir; else if(orderMatrix[2][0]>=orderMatrix[1][1]) if(motorDir>=orderMatrix[1][3]) if(orderMatrix[2][0]>=orderMatrix[2][3]) if(orderMatrix[1][0]==orderMatrix[0][3]) if(orderMatrix[1][2]>=orderMatrix[2][1]) if(orderMatrix[2][0]<motorDir) __iv__return_expr_floorIsOrdered = motorDir; else if(orderMatrix[2][1]<motorDir) __iv__return_expr_floorIsOrdered = motorDir; else if(orderMatrix[2][2]<orderMatrix[1][1]) __iv__return_expr_floorIsOrdered = motorDir; else if(orderMatrix[2][2]<orderMatrix[1][3]) __iv__return_expr_floorIsOrdered = motorDir; else if(orderMatrix[1][0]<motorDir) __iv__return_expr_floorIsOrdered = motorDir; else if(motorDir==floorNum) __iv__return_expr_floorIsOrdered = motorDir; else if(orderMatrix[0][1]==floorNum) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else __iv__return_expr_floorIsOrdered = motorDir; else __iv__return_expr_floorIsOrdered = motorDir; else __iv__return_expr_floorIsOrdered = motorDir; else __iv__return_expr_floorIsOrdered = motorDir; else __iv__return_expr_floorIsOrdered = orderMatrix[2][1]; else __iv__return_expr_floorIsOrdered = orderMatrix[1][1]; 
	__CPROVER_assume(__iv__return_expr_floorIsOrdered == 0 || __iv__return_expr_floorIsOrdered == 1);
	return __iv__return_expr_floorIsOrdered;
}
complexity: 41
# constraints: 67

signed int __iv__isButtonPressed_stub() {
	signed int __iv__return_expr_isButtonPressed;
	if(orderMatrix[2][1]>=2) __iv__return_expr_isButtonPressed = 0; else if((-1)>=orderMatrix[2][1]) __iv__return_expr_isButtonPressed = 0; else if(orderMatrix[1][1]>=2) __iv__return_expr_isButtonPressed = orderMatrix[2][0]; else if(1==orderMatrix[0][0]) __iv__return_expr_isButtonPressed = orderMatrix[0][0]; else if(1==orderMatrix[0][3]) __iv__return_expr_isButtonPressed = orderMatrix[0][3]; else if(1==orderMatrix[1][2]) __iv__return_expr_isButtonPressed = orderMatrix[1][2]; else if(orderMatrix[1][1]==orderMatrix[0][2]) __iv__return_expr_isButtonPressed = orderMatrix[2][0]; else __iv__return_expr_isButtonPressed = 1; 
	__CPROVER_assume(__iv__return_expr_isButtonPressed == 0 || __iv__return_expr_isButtonPressed == 1);
	return __iv__return_expr_isButtonPressed;
}
complexity: 7
# constraints: 16

run cbmc: (unwind: 610, timeout: 86400 sec)
cbmc running time: 971.489 sec

verification results: 
property 'assert((state != 2));' is FALSE alarm.
Counterexample-guided true alarm finding: 
cbmc time (unwind: 610): 4.24 sec
property 'assert((state != 2));' is FALSE alarm.
true alarm finding time: 5.285 sec


synthesize new stub refined by counterexamples (unit timeout: 600 sec)
on each refinement:
refinement time: 54.901 sec

Iteration 10:
signed int __iv__elev_get_button_signal_stub(elev_button_type_t button, signed int floor) {
	signed int __iv__return_expr_elev_get_button_signal;
	signed int __iv__nondet_input_elev_get_button_signal_1 = __VERIFIER_nondet_signed_int();
	__iv__return_expr_elev_get_button_signal = __iv__nondet_input_elev_get_button_signal_1;
	__CPROVER_assume(__iv__return_expr_elev_get_button_signal == 0 || __iv__return_expr_elev_get_button_signal == 1);
	return __iv__return_expr_elev_get_button_signal;
}
complexity: 0
accuracy: 100.00%
coverage: 100.00%
# constraints: 2

signed int __iv__floorIsOrdered_stub(signed int floorNum, signed int motorDir) {
	signed int __iv__return_expr_floorIsOrdered;
	if(motorDir>=2) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[1][2]<(-1)) __iv__return_expr_floorIsOrdered = 0; else if((-1)==orderMatrix[1][2]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if((-1)>=orderMatrix[2][1]) __iv__return_expr_floorIsOrdered = 0; else if((-1)>=orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = orderMatrix[2][0]; else if((-1)>=orderMatrix[1][0]) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[1][2]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[1][1]; else if(3==orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[0][3]<orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = orderMatrix[1][3]; else if((-1)>=orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[1][0]<orderMatrix[1][1]) __iv__return_expr_floorIsOrdered = orderMatrix[1][1]; else if(orderMatrix[1][0]<orderMatrix[2][2]) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[0][3]>=2) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[1][2]<orderMatrix[2][0]) __iv__return_expr_floorIsOrdered = orderMatrix[2][0]; else if(orderMatrix[0][1]<orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[2][0]<orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[0][0]<orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[2][0]<orderMatrix[0][3]) __iv__return_expr_floorIsOrdered = orderMatrix[0][3]; else if(orderMatrix[2][2]<orderMatrix[0][3]) __iv__return_expr_floorIsOrdered = orderMatrix[0][3]; else if(orderMatrix[2][2]<orderMatrix[1][1]) __iv__return_expr_floorIsOrdered = orderMatrix[2][0]; else if(orderMatrix[2][2]<orderMatrix[1][0]) __iv__return_expr_floorIsOrdered = motorDir; else if(orderMatrix[1][3]>=orderMatrix[1][1]) if(orderMatrix[0][1]>=orderMatrix[0][0]) if(orderMatrix[2][0]==orderMatrix[1][2]) if(orderMatrix[1][0]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(floorNum<orderMatrix[2][1]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(floorNum<orderMatrix[1][1]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[2][1]<orderMatrix[1][1]) __iv__return_expr_floorIsOrdered = orderMatrix[1][3]; else if(orderMatrix[2][1]<orderMatrix[1][3]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[1][2]<orderMatrix[1][1]) __iv__return_expr_floorIsOrdered = orderMatrix[1][3]; else if(orderMatrix[2][0]<orderMatrix[1][3]) __iv__return_expr_floorIsOrdered = orderMatrix[1][3]; else if(orderMatrix[1][2]<orderMatrix[2][3]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[1][2]<orderMatrix[2][1]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(0==orderMatrix[1][2]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[2][1]<motorDir) __iv__return_expr_floorIsOrdered = orderMatrix[2][0]; else if(orderMatrix[2][2]<orderMatrix[1][3]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[1][0]<motorDir) __iv__return_expr_floorIsOrdered = orderMatrix[2][0]; else if(orderMatrix[0][2]<orderMatrix[1][3]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[0][1]==floorNum) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else __iv__return_expr_floorIsOrdered = motorDir; else __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else __iv__return_expr_floorIsOrdered = orderMatrix[1][3]; else __iv__return_expr_floorIsOrdered = orderMatrix[1][1]; 
	__CPROVER_assume(__iv__return_expr_floorIsOrdered == 0 || __iv__return_expr_floorIsOrdered == 1);
	return __iv__return_expr_floorIsOrdered;
}
complexity: 39
# constraints: 69

signed int __iv__isButtonPressed_stub() {
	signed int __iv__return_expr_isButtonPressed;
	if(orderMatrix[2][1]>=2) __iv__return_expr_isButtonPressed = 0; else if((-1)>=orderMatrix[2][1]) __iv__return_expr_isButtonPressed = 0; else if(orderMatrix[1][1]>=2) __iv__return_expr_isButtonPressed = orderMatrix[2][0]; else if(1==orderMatrix[0][0]) __iv__return_expr_isButtonPressed = orderMatrix[0][0]; else if(1==orderMatrix[0][3]) __iv__return_expr_isButtonPressed = orderMatrix[0][3]; else if(1==orderMatrix[1][2]) __iv__return_expr_isButtonPressed = orderMatrix[1][2]; else if(1==orderMatrix[2][1]) __iv__return_expr_isButtonPressed = orderMatrix[2][1]; else if(orderMatrix[2][3]==orderMatrix[1][2]) __iv__return_expr_isButtonPressed = orderMatrix[1][1]; else __iv__return_expr_isButtonPressed = orderMatrix[2][3]; 
	__CPROVER_assume(__iv__return_expr_isButtonPressed == 0 || __iv__return_expr_isButtonPressed == 1);
	return __iv__return_expr_isButtonPressed;
}
complexity: 8
# constraints: 17

run cbmc: (unwind: 610, timeout: 86400 sec)
cbmc running time: 854.525 sec

verification results: 
property 'assert((state != 2));' is FALSE alarm.
Counterexample-guided true alarm finding: 
cbmc time (unwind: 610): 4.686 sec
property 'assert((state != 2));' is FALSE alarm.
true alarm finding time: 5.957 sec


synthesize new stub refined by counterexamples (unit timeout: 600 sec)
on each refinement:
refinement time: 59.33 sec

Iteration 11:
signed int __iv__elev_get_button_signal_stub(elev_button_type_t button, signed int floor) {
	signed int __iv__return_expr_elev_get_button_signal;
	signed int __iv__nondet_input_elev_get_button_signal_1 = __VERIFIER_nondet_signed_int();
	__iv__return_expr_elev_get_button_signal = __iv__nondet_input_elev_get_button_signal_1;
	__CPROVER_assume(__iv__return_expr_elev_get_button_signal == 0 || __iv__return_expr_elev_get_button_signal == 1);
	return __iv__return_expr_elev_get_button_signal;
}
complexity: 0
accuracy: 100.00%
coverage: 100.00%
# constraints: 2

signed int __iv__floorIsOrdered_stub(signed int floorNum, signed int motorDir) {
	signed int __iv__return_expr_floorIsOrdered;
	if((-1)==orderMatrix[1][2]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(motorDir>=2) __iv__return_expr_floorIsOrdered = 0; else if((-1)>=orderMatrix[2][1]) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[1][2]<(-1)) __iv__return_expr_floorIsOrdered = 0; else if((-1)>=orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = orderMatrix[2][0]; else if((-1)>=orderMatrix[1][0]) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[1][2]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[0][0]; else if(orderMatrix[1][2]<orderMatrix[1][1]) __iv__return_expr_floorIsOrdered = orderMatrix[1][1]; else if(3==orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[1][2]<orderMatrix[2][2]) __iv__return_expr_floorIsOrdered = orderMatrix[2][1]; else if(orderMatrix[1][2]<orderMatrix[1][0]) __iv__return_expr_floorIsOrdered = motorDir; else if(orderMatrix[1][2]<orderMatrix[1][3]) __iv__return_expr_floorIsOrdered = motorDir; else if(orderMatrix[1][2]<orderMatrix[2][3]) __iv__return_expr_floorIsOrdered = motorDir; else if(orderMatrix[1][0]<orderMatrix[2][2]) __iv__return_expr_floorIsOrdered = motorDir; else if(orderMatrix[1][0]<orderMatrix[1][3]) __iv__return_expr_floorIsOrdered = motorDir; else if(orderMatrix[0][2]>=orderMatrix[1][3]) if(orderMatrix[0][3]>=orderMatrix[1][1]) if(orderMatrix[0][3]<orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = motorDir; else if(orderMatrix[0][3]>=2) __iv__return_expr_floorIsOrdered = motorDir; else if(orderMatrix[1][2]<orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = motorDir; else if(orderMatrix[2][1]<motorDir) __iv__return_expr_floorIsOrdered = motorDir; else if(orderMatrix[1][1]<orderMatrix[1][3]) __iv__return_expr_floorIsOrdered = motorDir; else if((-1)>=orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[1][0]<motorDir) __iv__return_expr_floorIsOrdered = motorDir; else if(orderMatrix[0][0]<orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[1][0]==orderMatrix[0][3]) if(orderMatrix[1][0]<orderMatrix[2][1]) __iv__return_expr_floorIsOrdered = orderMatrix[2][1]; else if(orderMatrix[0][3]<orderMatrix[2][0]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[1][0]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[0][0]==motorDir) __iv__return_expr_floorIsOrdered = motorDir; else __iv__return_expr_floorIsOrdered = orderMatrix[0][3]; else __iv__return_expr_floorIsOrdered = orderMatrix[2][1]; else __iv__return_expr_floorIsOrdered = orderMatrix[1][1]; else __iv__return_expr_floorIsOrdered = orderMatrix[1][1]; 
	__CPROVER_assume(__iv__return_expr_floorIsOrdered == 0 || __iv__return_expr_floorIsOrdered == 1);
	return __iv__return_expr_floorIsOrdered;
}
complexity: 30
# constraints: 79

signed int __iv__isButtonPressed_stub() {
	signed int __iv__return_expr_isButtonPressed;
	if(orderMatrix[2][1]>=2) __iv__return_expr_isButtonPressed = 0; else if((-1)>=orderMatrix[2][1]) __iv__return_expr_isButtonPressed = 0; else if(orderMatrix[1][1]>=2) __iv__return_expr_isButtonPressed = orderMatrix[2][0]; else if(1==orderMatrix[0][0]) __iv__return_expr_isButtonPressed = orderMatrix[0][0]; else if(1==orderMatrix[0][3]) __iv__return_expr_isButtonPressed = orderMatrix[0][3]; else if(1==orderMatrix[1][2]) __iv__return_expr_isButtonPressed = orderMatrix[1][2]; else if(1==orderMatrix[2][1]) __iv__return_expr_isButtonPressed = orderMatrix[2][1]; else if(orderMatrix[2][3]==orderMatrix[1][2]) __iv__return_expr_isButtonPressed = orderMatrix[1][1]; else __iv__return_expr_isButtonPressed = orderMatrix[2][3]; 
	__CPROVER_assume(__iv__return_expr_isButtonPressed == 0 || __iv__return_expr_isButtonPressed == 1);
	return __iv__return_expr_isButtonPressed;
}
complexity: 8
# constraints: 17

run cbmc: (unwind: 610, timeout: 86400 sec)
cbmc running time: 1038.32 sec

verification results: 
property 'assert((state != 2));' is FALSE alarm.
Counterexample-guided true alarm finding: 
cbmc time (unwind: 610): 4.75 sec
property 'assert((state != 2));' is FALSE alarm.
true alarm finding time: 6.096 sec


synthesize new stub refined by counterexamples (unit timeout: 600 sec)
on each refinement:
refinement time: 73.393 sec

Iteration 12:
signed int __iv__elev_get_button_signal_stub(elev_button_type_t button, signed int floor) {
	signed int __iv__return_expr_elev_get_button_signal;
	signed int __iv__nondet_input_elev_get_button_signal_1 = __VERIFIER_nondet_signed_int();
	__iv__return_expr_elev_get_button_signal = __iv__nondet_input_elev_get_button_signal_1;
	__CPROVER_assume(__iv__return_expr_elev_get_button_signal == 0 || __iv__return_expr_elev_get_button_signal == 1);
	return __iv__return_expr_elev_get_button_signal;
}
complexity: 0
accuracy: 100.00%
coverage: 100.00%
# constraints: 2

signed int __iv__floorIsOrdered_stub(signed int floorNum, signed int motorDir) {
	signed int __iv__return_expr_floorIsOrdered;
	if((-1)==orderMatrix[1][2]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(motorDir>=2) __iv__return_expr_floorIsOrdered = 0; else if((-1)>=orderMatrix[2][1]) __iv__return_expr_floorIsOrdered = 0; else if((-1)>=orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = 1; else if(orderMatrix[1][2]<(-1)) __iv__return_expr_floorIsOrdered = 0; else if((-1)>=orderMatrix[1][0]) __iv__return_expr_floorIsOrdered = 0; else if(3==orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = orderMatrix[1][1]; else if((-1)>=orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[1][1]; else if(orderMatrix[0][3]>=2) __iv__return_expr_floorIsOrdered = orderMatrix[1][1]; else if(orderMatrix[1][0]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[1][2]>=orderMatrix[1][3]) if(orderMatrix[1][2]<orderMatrix[2][3]) __iv__return_expr_floorIsOrdered = motorDir; else if(orderMatrix[1][0]<orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = orderMatrix[1][1]; else if(orderMatrix[1][2]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[1][1]; else if(orderMatrix[1][2]<orderMatrix[2][2]) __iv__return_expr_floorIsOrdered = orderMatrix[1][1]; else if(orderMatrix[1][2]<orderMatrix[0][3]) __iv__return_expr_floorIsOrdered = orderMatrix[1][1]; else if(orderMatrix[1][2]<orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = orderMatrix[1][1]; else if(orderMatrix[1][2]>=orderMatrix[2][0]) if(orderMatrix[1][2]<orderMatrix[1][1]) __iv__return_expr_floorIsOrdered = orderMatrix[1][1]; else if(orderMatrix[1][2]<orderMatrix[1][0]) __iv__return_expr_floorIsOrdered = motorDir; else if(orderMatrix[1][2]>=orderMatrix[2][1]) if(orderMatrix[1][2]<motorDir) __iv__return_expr_floorIsOrdered = motorDir; else if(orderMatrix[1][0]<orderMatrix[1][1]) __iv__return_expr_floorIsOrdered = orderMatrix[1][1]; else if(orderMatrix[1][0]<orderMatrix[2][2]) __iv__return_expr_floorIsOrdered = orderMatrix[1][1]; else if(orderMatrix[0][3]<orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = motorDir; else if(orderMatrix[1][0]<orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[1][0]<orderMatrix[0][3]) __iv__return_expr_floorIsOrdered = orderMatrix[0][3]; else if(orderMatrix[1][0]>=orderMatrix[2][1]) if(orderMatrix[1][0]<motorDir) __iv__return_expr_floorIsOrdered = motorDir; else if(orderMatrix[2][2]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[0][0]; else if(orderMatrix[2][2]<orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = orderMatrix[1][1]; else if(orderMatrix[2][2]<orderMatrix[2][3]) __iv__return_expr_floorIsOrdered = orderMatrix[1][1]; else if(orderMatrix[2][2]<motorDir) __iv__return_expr_floorIsOrdered = motorDir; else if(orderMatrix[2][2]>=orderMatrix[1][3]) if(orderMatrix[2][2]>=orderMatrix[2][0]) if(orderMatrix[2][2]<orderMatrix[1][1]) __iv__return_expr_floorIsOrdered = orderMatrix[1][1]; else if(orderMatrix[0][3]>=orderMatrix[2][0]) if(orderMatrix[0][3]<orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = motorDir; else if(orderMatrix[0][3]>=orderMatrix[1][3]) if(orderMatrix[0][3]<orderMatrix[1][1]) __iv__return_expr_floorIsOrdered = orderMatrix[1][1]; else if(orderMatrix[1][3]<orderMatrix[1][1]) __iv__return_expr_floorIsOrdered = orderMatrix[1][1]; else if(orderMatrix[2][0]<motorDir) __iv__return_expr_floorIsOrdered = motorDir; else if(0==orderMatrix[2][0]) __iv__return_expr_floorIsOrdered = orderMatrix[1][1]; else if(orderMatrix[2][1]<motorDir) __iv__return_expr_floorIsOrdered = orderMatrix[1][1]; else if(orderMatrix[0][1]<motorDir) __iv__return_expr_floorIsOrdered = motorDir; else if(orderMatrix[0][1]>=orderMatrix[2][1]) if(floorNum<orderMatrix[2][1]) __iv__return_expr_floorIsOrdered = orderMatrix[1][1]; else if(floorNum<orderMatrix[1][1]) __iv__return_expr_floorIsOrdered = orderMatrix[1][1]; else if(orderMatrix[2][1]<orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[2][2]==orderMatrix[1][3]) if(orderMatrix[1][1]<orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = orderMatrix[1][1]; else __iv__return_expr_floorIsOrdered = orderMatrix[1][0]; else __iv__return_expr_floorIsOrdered = orderMatrix[1][1]; else __iv__return_expr_floorIsOrdered = orderMatrix[1][1]; else __iv__return_expr_floorIsOrdered = orderMatrix[1][1]; else __iv__return_expr_floorIsOrdered = orderMatrix[1][1]; else __iv__return_expr_floorIsOrdered = orderMatrix[1][1]; else __iv__return_expr_floorIsOrdered = orderMatrix[1][1]; else __iv__return_expr_floorIsOrdered = motorDir; else __iv__return_expr_floorIsOrdered = motorDir; else __iv__return_expr_floorIsOrdered = orderMatrix[1][1]; else __iv__return_expr_floorIsOrdered = orderMatrix[1][3]; 
	__CPROVER_assume(__iv__return_expr_floorIsOrdered == 0 || __iv__return_expr_floorIsOrdered == 1);
	return __iv__return_expr_floorIsOrdered;
}
complexity: 51
# constraints: 89

signed int __iv__isButtonPressed_stub() {
	signed int __iv__return_expr_isButtonPressed;
	if(orderMatrix[2][1]>=2) __iv__return_expr_isButtonPressed = 0; else if((-1)>=orderMatrix[2][1]) __iv__return_expr_isButtonPressed = 0; else if(1==orderMatrix[0][0]) __iv__return_expr_isButtonPressed = orderMatrix[0][0]; else if(1==orderMatrix[0][3]) __iv__return_expr_isButtonPressed = orderMatrix[0][3]; else if(1==orderMatrix[2][1]) __iv__return_expr_isButtonPressed = orderMatrix[2][1]; else if(orderMatrix[0][2]<(-1)) __iv__return_expr_isButtonPressed = orderMatrix[2][3]; else if(orderMatrix[1][2]<orderMatrix[2][3]) __iv__return_expr_isButtonPressed = orderMatrix[2][3]; else if(1==orderMatrix[0][2]) __iv__return_expr_isButtonPressed = orderMatrix[0][2]; else if(orderMatrix[1][1]<orderMatrix[1][2]) __iv__return_expr_isButtonPressed = orderMatrix[1][2]; else if(orderMatrix[2][0]==orderMatrix[0][2]) __iv__return_expr_isButtonPressed = orderMatrix[1][1]; else __iv__return_expr_isButtonPressed = orderMatrix[2][0]; 
	__CPROVER_assume(__iv__return_expr_isButtonPressed == 0 || __iv__return_expr_isButtonPressed == 1);
	return __iv__return_expr_isButtonPressed;
}
complexity: 10
# constraints: 21

run cbmc: (unwind: 610, timeout: 86400 sec)
cbmc running time: 1089.609 sec

verification results: 
property 'assert((state != 2));' is FALSE alarm.
Counterexample-guided true alarm finding: 
cbmc time (unwind: 610): 4.71 sec
property 'assert((state != 2));' is FALSE alarm.
true alarm finding time: 6.096 sec


synthesize new stub refined by counterexamples (unit timeout: 600 sec)
on each refinement:
refinement time: 81.926 sec

Iteration 13:
signed int __iv__elev_get_button_signal_stub(elev_button_type_t button, signed int floor) {
	signed int __iv__return_expr_elev_get_button_signal;
	signed int __iv__nondet_input_elev_get_button_signal_1 = __VERIFIER_nondet_signed_int();
	__iv__return_expr_elev_get_button_signal = __iv__nondet_input_elev_get_button_signal_1;
	__CPROVER_assume(__iv__return_expr_elev_get_button_signal == 0 || __iv__return_expr_elev_get_button_signal == 1);
	return __iv__return_expr_elev_get_button_signal;
}
complexity: 0
accuracy: 100.00%
coverage: 100.00%
# constraints: 2

signed int __iv__floorIsOrdered_stub(signed int floorNum, signed int motorDir) {
	signed int __iv__return_expr_floorIsOrdered;
	if(motorDir>=2) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[1][2]<(-1)) __iv__return_expr_floorIsOrdered = 0; else if((-1)==orderMatrix[1][2]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if((-1)>=orderMatrix[2][1]) __iv__return_expr_floorIsOrdered = 0; else if((-1)>=orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = orderMatrix[2][0]; else if((-1)>=orderMatrix[1][0]) __iv__return_expr_floorIsOrdered = 0; else if(3==orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[0][3]>=2) __iv__return_expr_floorIsOrdered = motorDir; else if((-1)>=orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[2][2]<orderMatrix[2][3]) __iv__return_expr_floorIsOrdered = motorDir; else if(orderMatrix[1][2]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[0][0]; else if(orderMatrix[1][2]<orderMatrix[0][3]) __iv__return_expr_floorIsOrdered = motorDir; else if(orderMatrix[2][2]<orderMatrix[0][3]) __iv__return_expr_floorIsOrdered = orderMatrix[0][3]; else if(orderMatrix[1][0]<orderMatrix[0][3]) __iv__return_expr_floorIsOrdered = motorDir; else if(orderMatrix[1][0]<orderMatrix[2][3]) __iv__return_expr_floorIsOrdered = motorDir; else if(orderMatrix[1][2]<motorDir) __iv__return_expr_floorIsOrdered = motorDir; else if(orderMatrix[1][2]<orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[1][0]<orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = orderMatrix[1][3]; else if(orderMatrix[1][2]<orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = orderMatrix[0][2]; else if(orderMatrix[2][2]<orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = orderMatrix[0][0]; else if(orderMatrix[1][0]<motorDir) __iv__return_expr_floorIsOrdered = motorDir; else if(orderMatrix[0][3]<orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[1][0]>=orderMatrix[2][0]) if(orderMatrix[1][0]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[0][0]; else if(1==orderMatrix[1][0]) if(orderMatrix[2][2]>=orderMatrix[2][1]) if(orderMatrix[1][2]<orderMatrix[2][0]) __iv__return_expr_floorIsOrdered = orderMatrix[1][0]; else if(orderMatrix[2][2]<orderMatrix[1][3]) __iv__return_expr_floorIsOrdered = orderMatrix[1][3]; else if(orderMatrix[1][2]<orderMatrix[1][1]) __iv__return_expr_floorIsOrdered = orderMatrix[1][3]; else if(orderMatrix[1][2]<orderMatrix[2][3]) __iv__return_expr_floorIsOrdered = orderMatrix[1][3]; else if(orderMatrix[2][2]>=orderMatrix[2][0]) if(orderMatrix[2][2]<orderMatrix[1][0]) __iv__return_expr_floorIsOrdered = orderMatrix[1][0]; else if(orderMatrix[0][3]>=orderMatrix[2][0]) if(orderMatrix[0][3]<orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = motorDir; else if(orderMatrix[0][3]<orderMatrix[1][3]) __iv__return_expr_floorIsOrdered = orderMatrix[1][3]; else if(orderMatrix[0][3]<orderMatrix[1][0]) __iv__return_expr_floorIsOrdered = motorDir; else if(orderMatrix[1][3]<orderMatrix[1][1]) __iv__return_expr_floorIsOrdered = motorDir; else if(orderMatrix[2][0]<motorDir) __iv__return_expr_floorIsOrdered = motorDir; else if(orderMatrix[0][0]<orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = motorDir; else if(orderMatrix[0][0]<orderMatrix[1][3]) __iv__return_expr_floorIsOrdered = motorDir; else if(orderMatrix[2][0]<orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[2][1]<motorDir) __iv__return_expr_floorIsOrdered = motorDir; else if(orderMatrix[0][2]<orderMatrix[1][1]) __iv__return_expr_floorIsOrdered = motorDir; else if(floorNum<orderMatrix[2][1]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(floorNum<orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[0][0]<motorDir) __iv__return_expr_floorIsOrdered = motorDir; else if(1==orderMatrix[0][0]) if(orderMatrix[1][3]<orderMatrix[2][3]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[2][1]<orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[0][1]==floorNum) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[0][2]<orderMatrix[2][3]) __iv__return_expr_floorIsOrdered = motorDir; else if(floorNum>=3) __iv__return_expr_floorIsOrdered = motorDir; else if(orderMatrix[2][1]==orderMatrix[0][1]) if(orderMatrix[1][1]<motorDir) __iv__return_expr_floorIsOrdered = motorDir; else __iv__return_expr_floorIsOrdered = orderMatrix[1][1]; else __iv__return_expr_floorIsOrdered = orderMatrix[0][0]; else __iv__return_expr_floorIsOrdered = motorDir; else __iv__return_expr_floorIsOrdered = orderMatrix[0][0]; else __iv__return_expr_floorIsOrdered = orderMatrix[1][0]; else __iv__return_expr_floorIsOrdered = orderMatrix[1][3]; else __iv__return_expr_floorIsOrdered = motorDir; else __iv__return_expr_floorIsOrdered = orderMatrix[2][0]; 
	__CPROVER_assume(__iv__return_expr_floorIsOrdered == 0 || __iv__return_expr_floorIsOrdered == 1);
	return __iv__return_expr_floorIsOrdered;
}
complexity: 54
# constraints: 98

signed int __iv__isButtonPressed_stub() {
	signed int __iv__return_expr_isButtonPressed;
	if(orderMatrix[2][1]>=2) __iv__return_expr_isButtonPressed = 0; else if((-1)>=orderMatrix[2][1]) __iv__return_expr_isButtonPressed = 0; else if(1==orderMatrix[0][0]) __iv__return_expr_isButtonPressed = orderMatrix[0][0]; else if(1==orderMatrix[0][3]) __iv__return_expr_isButtonPressed = orderMatrix[0][3]; else if(1==orderMatrix[2][1]) __iv__return_expr_isButtonPressed = orderMatrix[2][1]; else if(orderMatrix[0][2]<(-1)) __iv__return_expr_isButtonPressed = orderMatrix[2][3]; else if(orderMatrix[1][2]<orderMatrix[2][3]) __iv__return_expr_isButtonPressed = orderMatrix[2][3]; else if(1==orderMatrix[0][2]) __iv__return_expr_isButtonPressed = orderMatrix[0][2]; else if(orderMatrix[1][1]<orderMatrix[1][2]) __iv__return_expr_isButtonPressed = orderMatrix[1][2]; else if(orderMatrix[2][0]==orderMatrix[0][2]) __iv__return_expr_isButtonPressed = orderMatrix[1][1]; else __iv__return_expr_isButtonPressed = orderMatrix[2][0]; 
	__CPROVER_assume(__iv__return_expr_isButtonPressed == 0 || __iv__return_expr_isButtonPressed == 1);
	return __iv__return_expr_isButtonPressed;
}
complexity: 10
# constraints: 21

run cbmc: (unwind: 610, timeout: 86400 sec)
cbmc running time: 1343.888 sec

verification results: 
property 'assert((state != 2));' is FALSE alarm.
Counterexample-guided true alarm finding: 
cbmc time (unwind: 610): 4.52 sec
property 'assert((state != 2));' is FALSE alarm.
true alarm finding time: 5.695 sec


synthesize new stub refined by counterexamples (unit timeout: 600 sec)
on each refinement:
refinement time: 88.037 sec

Iteration 14:
signed int __iv__elev_get_button_signal_stub(elev_button_type_t button, signed int floor) {
	signed int __iv__return_expr_elev_get_button_signal;
	signed int __iv__nondet_input_elev_get_button_signal_1 = __VERIFIER_nondet_signed_int();
	__iv__return_expr_elev_get_button_signal = __iv__nondet_input_elev_get_button_signal_1;
	__CPROVER_assume(__iv__return_expr_elev_get_button_signal == 0 || __iv__return_expr_elev_get_button_signal == 1);
	return __iv__return_expr_elev_get_button_signal;
}
complexity: 0
accuracy: 100.00%
coverage: 100.00%
# constraints: 2

signed int __iv__floorIsOrdered_stub(signed int floorNum, signed int motorDir) {
	signed int __iv__return_expr_floorIsOrdered;
	if((-1)==orderMatrix[1][2]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(motorDir>=2) __iv__return_expr_floorIsOrdered = 0; else if((-1)>=orderMatrix[2][1]) __iv__return_expr_floorIsOrdered = 0; else if((-1)>=orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = orderMatrix[2][0]; else if(orderMatrix[1][2]<(-1)) __iv__return_expr_floorIsOrdered = 0; else if((-1)>=orderMatrix[1][0]) __iv__return_expr_floorIsOrdered = 0; else if(3==orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = 0; else if((-1)>=orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[0][3]>=2) __iv__return_expr_floorIsOrdered = motorDir; else if(orderMatrix[1][2]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[0][0]; else if(orderMatrix[1][0]<orderMatrix[2][2]) __iv__return_expr_floorIsOrdered = motorDir; else if(orderMatrix[1][0]<orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = orderMatrix[0][2]; else if(orderMatrix[1][0]<orderMatrix[0][3]) __iv__return_expr_floorIsOrdered = orderMatrix[0][3]; else if(orderMatrix[1][2]<orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = orderMatrix[0][2]; else if(orderMatrix[1][2]<orderMatrix[0][3]) __iv__return_expr_floorIsOrdered = motorDir; else if(orderMatrix[1][2]<orderMatrix[2][2]) __iv__return_expr_floorIsOrdered = orderMatrix[1][3]; else if(orderMatrix[1][2]<orderMatrix[2][3]) __iv__return_expr_floorIsOrdered = motorDir; else if(orderMatrix[1][0]<orderMatrix[2][3]) __iv__return_expr_floorIsOrdered = motorDir; else if(orderMatrix[1][0]<orderMatrix[1][3]) __iv__return_expr_floorIsOrdered = orderMatrix[1][3]; else if(orderMatrix[1][2]<orderMatrix[1][3]) __iv__return_expr_floorIsOrdered = orderMatrix[1][3]; else if(orderMatrix[1][2]<orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = motorDir; else if(orderMatrix[1][2]<motorDir) __iv__return_expr_floorIsOrdered = motorDir; else if(orderMatrix[1][2]<orderMatrix[2][0]) __iv__return_expr_floorIsOrdered = orderMatrix[1][0]; else if(orderMatrix[1][2]<orderMatrix[1][0]) __iv__return_expr_floorIsOrdered = orderMatrix[1][0]; else if(1==orderMatrix[1][2]) if(orderMatrix[1][0]<motorDir) __iv__return_expr_floorIsOrdered = motorDir; else if(orderMatrix[0][3]<orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[1][0]<orderMatrix[2][0]) __iv__return_expr_floorIsOrdered = orderMatrix[2][0]; else if(orderMatrix[1][0]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[0][0]; else if(1==orderMatrix[1][0]) if(orderMatrix[2][2]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[0][0]; else if(orderMatrix[2][2]<orderMatrix[2][3]) __iv__return_expr_floorIsOrdered = motorDir; else if(orderMatrix[2][2]<orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = motorDir; else if(orderMatrix[2][2]<orderMatrix[0][3]) __iv__return_expr_floorIsOrdered = motorDir; else if(orderMatrix[2][2]<orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = motorDir; else if(orderMatrix[2][2]<orderMatrix[1][3]) __iv__return_expr_floorIsOrdered = orderMatrix[1][3]; else if(orderMatrix[2][2]<orderMatrix[2][0]) __iv__return_expr_floorIsOrdered = orderMatrix[1][0]; else if(orderMatrix[2][2]<orderMatrix[1][0]) __iv__return_expr_floorIsOrdered = orderMatrix[1][0]; else if(orderMatrix[2][1]<motorDir) __iv__return_expr_floorIsOrdered = motorDir; else if(orderMatrix[0][0]<orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = motorDir; else if(orderMatrix[2][0]<orderMatrix[0][3]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[2][0]<orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = motorDir; else if(floorNum<orderMatrix[2][1]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(floorNum<orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[2][1]<orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[1][3]<orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = orderMatrix[0][0]; else if(orderMatrix[1][3]>=orderMatrix[1][1]) if(orderMatrix[1][3]<orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[2][0]<motorDir) __iv__return_expr_floorIsOrdered = motorDir; else if(orderMatrix[2][0]<orderMatrix[2][2]) __iv__return_expr_floorIsOrdered = orderMatrix[1][3]; else if(orderMatrix[2][1]>=orderMatrix[1][1]) __iv__return_expr_floorIsOrdered = orderMatrix[2][1]; else __iv__return_expr_floorIsOrdered = orderMatrix[0][0]; else __iv__return_expr_floorIsOrdered = motorDir; else __iv__return_expr_floorIsOrdered = motorDir; else __iv__return_expr_floorIsOrdered = floorNum; 
	__CPROVER_assume(__iv__return_expr_floorIsOrdered == 0 || __iv__return_expr_floorIsOrdered == 1);
	return __iv__return_expr_floorIsOrdered;
}
complexity: 51
# constraints: 104

signed int __iv__isButtonPressed_stub() {
	signed int __iv__return_expr_isButtonPressed;
	if(orderMatrix[2][1]>=2) __iv__return_expr_isButtonPressed = 0; else if((-1)>=orderMatrix[2][1]) __iv__return_expr_isButtonPressed = 0; else if(1==orderMatrix[0][0]) __iv__return_expr_isButtonPressed = orderMatrix[0][0]; else if(1==orderMatrix[0][3]) __iv__return_expr_isButtonPressed = orderMatrix[0][3]; else if(1==orderMatrix[2][1]) __iv__return_expr_isButtonPressed = orderMatrix[2][1]; else if(orderMatrix[0][2]<(-1)) __iv__return_expr_isButtonPressed = orderMatrix[2][3]; else if(orderMatrix[1][2]<orderMatrix[2][3]) __iv__return_expr_isButtonPressed = orderMatrix[2][3]; else if(1==orderMatrix[0][2]) __iv__return_expr_isButtonPressed = orderMatrix[0][2]; else if(orderMatrix[1][1]<orderMatrix[1][2]) __iv__return_expr_isButtonPressed = orderMatrix[1][2]; else if(orderMatrix[2][0]==orderMatrix[0][2]) __iv__return_expr_isButtonPressed = orderMatrix[1][1]; else __iv__return_expr_isButtonPressed = orderMatrix[2][0]; 
	__CPROVER_assume(__iv__return_expr_isButtonPressed == 0 || __iv__return_expr_isButtonPressed == 1);
	return __iv__return_expr_isButtonPressed;
}
complexity: 10
# constraints: 21

run cbmc: (unwind: 610, timeout: 86400 sec)
cbmc running time: 1261.979 sec

verification results: 
property 'assert((state != 2));' is FALSE alarm.
Counterexample-guided true alarm finding: 
cbmc time (unwind: 610): 4.294 sec
property 'assert((state != 2));' is FALSE alarm.
true alarm finding time: 5.387 sec


synthesize new stub refined by counterexamples (unit timeout: 600 sec)
on each refinement:
refinement time: 93.953 sec

Iteration 15:
signed int __iv__elev_get_button_signal_stub(elev_button_type_t button, signed int floor) {
	signed int __iv__return_expr_elev_get_button_signal;
	signed int __iv__nondet_input_elev_get_button_signal_1 = __VERIFIER_nondet_signed_int();
	__iv__return_expr_elev_get_button_signal = __iv__nondet_input_elev_get_button_signal_1;
	__CPROVER_assume(__iv__return_expr_elev_get_button_signal == 0 || __iv__return_expr_elev_get_button_signal == 1);
	return __iv__return_expr_elev_get_button_signal;
}
complexity: 0
accuracy: 100.00%
coverage: 100.00%
# constraints: 2

signed int __iv__floorIsOrdered_stub(signed int floorNum, signed int motorDir) {
	signed int __iv__return_expr_floorIsOrdered;
	if((-1)==orderMatrix[1][2]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(motorDir>=2) __iv__return_expr_floorIsOrdered = 0; else if((-1)>=orderMatrix[2][1]) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[1][2]<(-1)) __iv__return_expr_floorIsOrdered = 0; else if((-1)>=orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = orderMatrix[2][0]; else if((-1)>=orderMatrix[1][0]) __iv__return_expr_floorIsOrdered = 0; else if(3==orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = 0; else if((-1)>=orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[0][3]>=2) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[0][3]>=motorDir) if(orderMatrix[0][3]<orderMatrix[2][3]) __iv__return_expr_floorIsOrdered = orderMatrix[1][3]; else if(orderMatrix[0][3]>=orderMatrix[2][2]) if(orderMatrix[1][2]<orderMatrix[2][3]) __iv__return_expr_floorIsOrdered = orderMatrix[1][3]; else if(orderMatrix[2][0]<orderMatrix[2][3]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[1][2]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[0][0]; else if(orderMatrix[2][2]<orderMatrix[2][3]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[1][0]<motorDir) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[1][0]<orderMatrix[2][3]) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[1][0]<orderMatrix[0][3]) __iv__return_expr_floorIsOrdered = orderMatrix[1][2]; else if(orderMatrix[1][0]<orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = orderMatrix[1][3]; else if(orderMatrix[1][0]<orderMatrix[1][3]) __iv__return_expr_floorIsOrdered = orderMatrix[1][3]; else if(orderMatrix[1][2]<orderMatrix[1][3]) __iv__return_expr_floorIsOrdered = orderMatrix[1][3]; else if(orderMatrix[0][3]<orderMatrix[1][3]) __iv__return_expr_floorIsOrdered = orderMatrix[1][3]; else if(orderMatrix[2][2]<orderMatrix[1][3]) __iv__return_expr_floorIsOrdered = orderMatrix[1][3]; else if(orderMatrix[2][0]<orderMatrix[1][3]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[0][3]<orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = orderMatrix[0][2]; else if(orderMatrix[0][3]<orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[2][0]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[0][0]; else if(orderMatrix[1][0]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[0][0]; else if(orderMatrix[1][0]<orderMatrix[2][0]) __iv__return_expr_floorIsOrdered = orderMatrix[2][0]; else if(orderMatrix[2][2]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[0][0]; else if(orderMatrix[1][0]<orderMatrix[2][1]) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[1][0]<orderMatrix[1][1]) __iv__return_expr_floorIsOrdered = floorNum; else if(orderMatrix[2][0]<orderMatrix[2][1]) __iv__return_expr_floorIsOrdered = orderMatrix[2][1]; else if(orderMatrix[0][3]<orderMatrix[2][1]) __iv__return_expr_floorIsOrdered = orderMatrix[2][0]; else if(orderMatrix[2][2]<orderMatrix[2][1]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[2][2]<orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[2][0]<orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[2][0]<orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = orderMatrix[0][2]; else if(orderMatrix[2][0]<orderMatrix[1][2]) __iv__return_expr_floorIsOrdered = orderMatrix[1][2]; else if(orderMatrix[2][0]>=motorDir) if(1==orderMatrix[2][0]) if(orderMatrix[1][2]<orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[1][2]<orderMatrix[2][0]) __iv__return_expr_floorIsOrdered = orderMatrix[2][0]; else if(orderMatrix[2][2]<orderMatrix[1][0]) __iv__return_expr_floorIsOrdered = orderMatrix[2][0]; else if(orderMatrix[2][1]>=motorDir) if(floorNum<orderMatrix[2][1]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(floorNum<orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[2][1]<orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[1][3]<orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(floorNum>=3) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[0][0]<orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[0][0]<orderMatrix[1][3]) __iv__return_expr_floorIsOrdered = 0; else if(motorDir<floorNum) if(orderMatrix[0][1]==floorNum) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[1][1]<orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[0][2]<orderMatrix[1][3]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[2][3]<orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[2][3]<orderMatrix[2][1]) __iv__return_expr_floorIsOrdered = orderMatrix[2][0]; else if(orderMatrix[1][1]<motorDir) __iv__return_expr_floorIsOrdered = orderMatrix[2][3]; else if(1==orderMatrix[0][2]) if(orderMatrix[1][3]<orderMatrix[2][3]) __iv__return_expr_floorIsOrdered = orderMatrix[0][2]; else if(orderMatrix[1][3]<orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = orderMatrix[0][2]; else if(orderMatrix[1][1]<orderMatrix[2][1]) __iv__return_expr_floorIsOrdered = orderMatrix[0][0]; else __iv__return_expr_floorIsOrdered = orderMatrix[1][1]; else __iv__return_expr_floorIsOrdered = 0; else __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else __iv__return_expr_floorIsOrdered = orderMatrix[0][3]; else __iv__return_expr_floorIsOrdered = 0; else __iv__return_expr_floorIsOrdered = orderMatrix[1][2]; else __iv__return_expr_floorIsOrdered = motorDir; 
	__CPROVER_assume(__iv__return_expr_floorIsOrdered == 0 || __iv__return_expr_floorIsOrdered == 1);
	return __iv__return_expr_floorIsOrdered;
}
complexity: 64
# constraints: 110

signed int __iv__isButtonPressed_stub() {
	signed int __iv__return_expr_isButtonPressed;
	if(orderMatrix[2][1]>=2) __iv__return_expr_isButtonPressed = 0; else if((-1)>=orderMatrix[2][1]) __iv__return_expr_isButtonPressed = 0; else if(orderMatrix[1][1]>=2) __iv__return_expr_isButtonPressed = orderMatrix[2][0]; else if(1==orderMatrix[0][0]) __iv__return_expr_isButtonPressed = orderMatrix[0][0]; else if(1==orderMatrix[0][3]) __iv__return_expr_isButtonPressed = orderMatrix[0][3]; else if(1==orderMatrix[1][2]) __iv__return_expr_isButtonPressed = orderMatrix[1][2]; else if(1==orderMatrix[2][3]) __iv__return_expr_isButtonPressed = orderMatrix[2][3]; else if(1==orderMatrix[2][1]) __iv__return_expr_isButtonPressed = orderMatrix[2][1]; else if(orderMatrix[2][2]==orderMatrix[1][2]) if(orderMatrix[1][3]<orderMatrix[1][1]) __iv__return_expr_isButtonPressed = orderMatrix[1][1]; else __iv__return_expr_isButtonPressed = orderMatrix[1][3]; else __iv__return_expr_isButtonPressed = orderMatrix[2][2]; 
	__CPROVER_assume(__iv__return_expr_isButtonPressed == 0 || __iv__return_expr_isButtonPressed == 1);
	return __iv__return_expr_isButtonPressed;
}
complexity: 10
# constraints: 22

run cbmc: (unwind: 610, timeout: 86400 sec)
cbmc running time: 1162.037 sec

verification results: 
property 'assert((state != 2));' is FALSE alarm.
Counterexample-guided true alarm finding: 
cbmc time (unwind: 610): 4.225 sec
property 'assert((state != 2));' is FALSE alarm.
true alarm finding time: 5.343 sec


synthesize new stub refined by counterexamples (unit timeout: 600 sec)
on each refinement:
refinement time: 110.153 sec

Iteration 16:
signed int __iv__elev_get_button_signal_stub(elev_button_type_t button, signed int floor) {
	signed int __iv__return_expr_elev_get_button_signal;
	signed int __iv__nondet_input_elev_get_button_signal_1 = __VERIFIER_nondet_signed_int();
	__iv__return_expr_elev_get_button_signal = __iv__nondet_input_elev_get_button_signal_1;
	__CPROVER_assume(__iv__return_expr_elev_get_button_signal == 0 || __iv__return_expr_elev_get_button_signal == 1);
	return __iv__return_expr_elev_get_button_signal;
}
complexity: 0
accuracy: 100.00%
coverage: 100.00%
# constraints: 2

signed int __iv__floorIsOrdered_stub(signed int floorNum, signed int motorDir) {
	signed int __iv__return_expr_floorIsOrdered;
	if((-1)==orderMatrix[1][2]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(motorDir>=2) __iv__return_expr_floorIsOrdered = 0; else if((-1)>=orderMatrix[2][1]) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[1][2]<(-1)) __iv__return_expr_floorIsOrdered = 0; else if((-1)>=orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = orderMatrix[2][0]; else if((-1)>=orderMatrix[1][0]) __iv__return_expr_floorIsOrdered = 0; else if(3==orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[0][3]>=2) __iv__return_expr_floorIsOrdered = 0; else if((-1)>=orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[1][0]<orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = orderMatrix[0][2]; else if(orderMatrix[1][0]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[0][0]; else if(orderMatrix[1][0]<orderMatrix[2][2]) __iv__return_expr_floorIsOrdered = orderMatrix[2][1]; else if(orderMatrix[1][0]<orderMatrix[2][3]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[2][2]<orderMatrix[2][3]) __iv__return_expr_floorIsOrdered = orderMatrix[1][3]; else if(orderMatrix[1][0]<orderMatrix[1][3]) __iv__return_expr_floorIsOrdered = orderMatrix[1][3]; else if(orderMatrix[0][3]<orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[1][0]<orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[2][2]<orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[1][2]<orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[1][2]<orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = orderMatrix[0][2]; else if(orderMatrix[1][2]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[0][0]; else if(orderMatrix[2][2]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[0][0]; else if(orderMatrix[2][2]<orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = orderMatrix[1][3]; else if(orderMatrix[1][0]>=orderMatrix[0][3]) if(orderMatrix[2][2]>=orderMatrix[0][3]) if(orderMatrix[1][2]>=orderMatrix[2][0]) if(orderMatrix[2][2]<orderMatrix[1][3]) __iv__return_expr_floorIsOrdered = orderMatrix[1][3]; else if(orderMatrix[1][0]>=orderMatrix[2][0]) if(orderMatrix[1][0]>=motorDir) if(orderMatrix[2][2]>=motorDir) if(orderMatrix[2][2]>=orderMatrix[2][0]) if(orderMatrix[2][2]<orderMatrix[1][0]) __iv__return_expr_floorIsOrdered = orderMatrix[1][0]; else if(orderMatrix[2][2]<orderMatrix[1][2]) __iv__return_expr_floorIsOrdered = 0; else if(1==orderMatrix[1][0]) if(orderMatrix[0][0]<orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(floorNum<orderMatrix[2][1]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[2][0]<orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(floorNum<orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[2][0]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[0][0]; else if(orderMatrix[0][3]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[0][0]; else if(orderMatrix[0][3]<orderMatrix[2][0]) __iv__return_expr_floorIsOrdered = orderMatrix[1][3]; else if(orderMatrix[0][3]<orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = orderMatrix[1][3]; else if(orderMatrix[0][3]<orderMatrix[1][2]) __iv__return_expr_floorIsOrdered = orderMatrix[1][3]; else if(orderMatrix[0][3]<motorDir) __iv__return_expr_floorIsOrdered = orderMatrix[1][0]; else if(orderMatrix[2][0]<orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = orderMatrix[0][2]; else if(orderMatrix[0][3]<orderMatrix[1][1]) __iv__return_expr_floorIsOrdered = orderMatrix[1][3]; else if(orderMatrix[0][3]<orderMatrix[1][0]) __iv__return_expr_floorIsOrdered = orderMatrix[1][3]; else if(orderMatrix[1][2]<orderMatrix[2][3]) __iv__return_expr_floorIsOrdered = orderMatrix[1][3]; else if(orderMatrix[1][2]>=motorDir) if(orderMatrix[1][2]==orderMatrix[0][3]) if(orderMatrix[2][1]<motorDir) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[2][1]<orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[1][3]<orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(floorNum>=3) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[0][0]>=orderMatrix[1][1]) if(orderMatrix[0][0]<orderMatrix[1][3]) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[1][3]>=motorDir) if(1==orderMatrix[0][0]) if(orderMatrix[1][1]<motorDir) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[1][1]<orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[1][1]<orderMatrix[2][1]) __iv__return_expr_floorIsOrdered = orderMatrix[0][0]; else __iv__return_expr_floorIsOrdered = orderMatrix[1][1]; else __iv__return_expr_floorIsOrdered = 0; else __iv__return_expr_floorIsOrdered = orderMatrix[1][2]; else __iv__return_expr_floorIsOrdered = orderMatrix[0][2]; else __iv__return_expr_floorIsOrdered = orderMatrix[1][0]; else __iv__return_expr_floorIsOrdered = 0; else __iv__return_expr_floorIsOrdered = floorNum; else __iv__return_expr_floorIsOrdered = orderMatrix[1][2]; else __iv__return_expr_floorIsOrdered = orderMatrix[1][0]; else __iv__return_expr_floorIsOrdered = motorDir; else __iv__return_expr_floorIsOrdered = orderMatrix[1][2]; else __iv__return_expr_floorIsOrdered = orderMatrix[1][0]; else __iv__return_expr_floorIsOrdered = orderMatrix[1][3]; else __iv__return_expr_floorIsOrdered = orderMatrix[2][1]; 
	__CPROVER_assume(__iv__return_expr_floorIsOrdered == 0 || __iv__return_expr_floorIsOrdered == 1);
	return __iv__return_expr_floorIsOrdered;
}
complexity: 61
# constraints: 117

signed int __iv__isButtonPressed_stub() {
	signed int __iv__return_expr_isButtonPressed;
	if(orderMatrix[2][1]>=2) __iv__return_expr_isButtonPressed = 0; else if((-1)>=orderMatrix[2][1]) __iv__return_expr_isButtonPressed = 0; else if(1==orderMatrix[0][0]) __iv__return_expr_isButtonPressed = orderMatrix[0][0]; else if(1==orderMatrix[0][3]) __iv__return_expr_isButtonPressed = orderMatrix[0][3]; else if(1==orderMatrix[2][1]) __iv__return_expr_isButtonPressed = orderMatrix[2][1]; else if(orderMatrix[0][2]<(-1)) __iv__return_expr_isButtonPressed = orderMatrix[2][3]; else if(orderMatrix[2][0]==orderMatrix[0][3]) if(1==orderMatrix[0][2]) __iv__return_expr_isButtonPressed = orderMatrix[1][3]; else if(orderMatrix[1][2]<orderMatrix[2][3]) __iv__return_expr_isButtonPressed = orderMatrix[2][3]; else if(orderMatrix[1][1]<orderMatrix[1][2]) __iv__return_expr_isButtonPressed = orderMatrix[1][2]; else if(orderMatrix[1][1]<orderMatrix[2][2]) __iv__return_expr_isButtonPressed = orderMatrix[2][2]; else __iv__return_expr_isButtonPressed = orderMatrix[1][1]; else __iv__return_expr_isButtonPressed = orderMatrix[2][0]; 
	__CPROVER_assume(__iv__return_expr_isButtonPressed == 0 || __iv__return_expr_isButtonPressed == 1);
	return __iv__return_expr_isButtonPressed;
}
complexity: 11
# constraints: 23

run cbmc: (unwind: 610, timeout: 86400 sec)
cbmc running time: 1370.11 sec

verification results: 
property 'assert((state != 2));' is FALSE alarm.
Counterexample-guided true alarm finding: 
cbmc time (unwind: 610): 4.459 sec
property 'assert((state != 2));' is FALSE alarm.
true alarm finding time: 5.537 sec


synthesize new stub refined by counterexamples (unit timeout: 600 sec)
on each refinement:
refinement time: 95.555 sec

Iteration 17:
signed int __iv__elev_get_button_signal_stub(elev_button_type_t button, signed int floor) {
	signed int __iv__return_expr_elev_get_button_signal;
	signed int __iv__nondet_input_elev_get_button_signal_1 = __VERIFIER_nondet_signed_int();
	__iv__return_expr_elev_get_button_signal = __iv__nondet_input_elev_get_button_signal_1;
	__CPROVER_assume(__iv__return_expr_elev_get_button_signal == 0 || __iv__return_expr_elev_get_button_signal == 1);
	return __iv__return_expr_elev_get_button_signal;
}
complexity: 0
accuracy: 100.00%
coverage: 100.00%
# constraints: 2

signed int __iv__floorIsOrdered_stub(signed int floorNum, signed int motorDir) {
	signed int __iv__return_expr_floorIsOrdered;
	if((-1)==orderMatrix[1][2]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if((-1)>=orderMatrix[0][1]) if(orderMatrix[2][1]>=3) __iv__return_expr_floorIsOrdered = orderMatrix[2][0]; else __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[1][2]<(-1)) __iv__return_expr_floorIsOrdered = 0; else if((-1)>=orderMatrix[1][0]) __iv__return_expr_floorIsOrdered = 0; else if(3==orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[0][3]>=2) __iv__return_expr_floorIsOrdered = 0; else if((-1)>=orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[0][3]>=orderMatrix[2][3]) if(orderMatrix[1][2]>=orderMatrix[2][3]) if(orderMatrix[2][0]>=orderMatrix[2][3]) if(orderMatrix[1][2]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[0][0]; else if(orderMatrix[2][2]>=orderMatrix[2][3]) if(orderMatrix[1][0]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[0][0]; else if(orderMatrix[2][0]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[0][3]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[0][0]; else if(orderMatrix[2][2]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[0][0]; else if(orderMatrix[0][3]<orderMatrix[2][2]) __iv__return_expr_floorIsOrdered = orderMatrix[1][0]; else if(orderMatrix[0][3]<orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[1][2]<orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[1][0]<orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[2][2]<orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[2][0]<orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[0][0]<orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[1][3]<orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(floorNum<orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(floorNum<orderMatrix[1][3]) __iv__return_expr_floorIsOrdered = orderMatrix[1][3]; else if(orderMatrix[2][1]<orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(floorNum<orderMatrix[2][0]) __iv__return_expr_floorIsOrdered = orderMatrix[2][0]; else if(floorNum<orderMatrix[1][0]) __iv__return_expr_floorIsOrdered = orderMatrix[2][1]; else if(floorNum<orderMatrix[1][1]) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[0][1]==floorNum) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[2][3]<orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[2][3]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[0][0]; else if(orderMatrix[0][2]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[1][1]<orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(floorNum>=3) __iv__return_expr_floorIsOrdered = orderMatrix[1][3]; else if(orderMatrix[2][0]<orderMatrix[1][3]) __iv__return_expr_floorIsOrdered = orderMatrix[1][3]; else if(orderMatrix[0][2]<orderMatrix[1][3]) __iv__return_expr_floorIsOrdered = orderMatrix[1][3]; else if(orderMatrix[1][2]<orderMatrix[1][3]) __iv__return_expr_floorIsOrdered = orderMatrix[1][3]; else if(orderMatrix[1][2]<orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = orderMatrix[0][2]; else if(orderMatrix[2][0]<orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = orderMatrix[0][2]; else if(orderMatrix[2][2]<orderMatrix[1][3]) __iv__return_expr_floorIsOrdered = orderMatrix[1][3]; else if(orderMatrix[2][3]<orderMatrix[1][3]) __iv__return_expr_floorIsOrdered = orderMatrix[1][3]; else if(orderMatrix[2][3]<orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = orderMatrix[0][2]; else if(orderMatrix[1][3]<orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = orderMatrix[0][2]; else if(orderMatrix[1][0]<orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = orderMatrix[1][3]; else if(orderMatrix[1][0]>=orderMatrix[2][3]) if(orderMatrix[1][0]<orderMatrix[2][2]) __iv__return_expr_floorIsOrdered = orderMatrix[2][0]; else if(orderMatrix[2][0]<orderMatrix[2][1]) __iv__return_expr_floorIsOrdered = orderMatrix[2][1]; else if(orderMatrix[2][0]<orderMatrix[1][2]) __iv__return_expr_floorIsOrdered = orderMatrix[1][2]; else if(orderMatrix[2][2]<orderMatrix[0][3]) __iv__return_expr_floorIsOrdered = orderMatrix[2][0]; else if(orderMatrix[1][2]<orderMatrix[2][0]) __iv__return_expr_floorIsOrdered = orderMatrix[2][0]; else if(orderMatrix[1][0]>=orderMatrix[1][1]) if(orderMatrix[0][3]<orderMatrix[1][0]) __iv__return_expr_floorIsOrdered = orderMatrix[2][0]; else if(orderMatrix[1][2]>=motorDir) if(orderMatrix[2][1]>=motorDir) if(orderMatrix[0][3]>=motorDir) if(orderMatrix[2][2]<orderMatrix[2][0]) __iv__return_expr_floorIsOrdered = orderMatrix[2][0]; else if(1==orderMatrix[2][0]) if(orderMatrix[2][3]<orderMatrix[2][0]) __iv__return_expr_floorIsOrdered = orderMatrix[2][0]; else if(orderMatrix[1][1]<motorDir) __iv__return_expr_floorIsOrdered = orderMatrix[2][0]; else if(1==orderMatrix[0][2]) if(orderMatrix[1][1]<orderMatrix[2][1]) __iv__return_expr_floorIsOrdered = orderMatrix[0][0]; else __iv__return_expr_floorIsOrdered = orderMatrix[1][1]; else __iv__return_expr_floorIsOrdered = 0; else __iv__return_expr_floorIsOrdered = orderMatrix[1][0]; else __iv__return_expr_floorIsOrdered = orderMatrix[2][0]; else __iv__return_expr_floorIsOrdered = orderMatrix[2][0]; else __iv__return_expr_floorIsOrdered = 0; else __iv__return_expr_floorIsOrdered = floorNum; else __iv__return_expr_floorIsOrdered = 0; else __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else __iv__return_expr_floorIsOrdered = orderMatrix[1][3]; else __iv__return_expr_floorIsOrdered = orderMatrix[2][3]; 
	__CPROVER_assume(__iv__return_expr_floorIsOrdered == 0 || __iv__return_expr_floorIsOrdered == 1);
	return __iv__return_expr_floorIsOrdered;
}
complexity: 64
# constraints: 121

signed int __iv__isButtonPressed_stub() {
	signed int __iv__return_expr_isButtonPressed;
	if(orderMatrix[2][1]>=2) __iv__return_expr_isButtonPressed = 0; else if((-1)>=orderMatrix[2][1]) __iv__return_expr_isButtonPressed = 0; else if(1==orderMatrix[0][0]) __iv__return_expr_isButtonPressed = orderMatrix[0][0]; else if(1==orderMatrix[0][3]) __iv__return_expr_isButtonPressed = orderMatrix[0][3]; else if(1==orderMatrix[2][1]) __iv__return_expr_isButtonPressed = orderMatrix[2][1]; else if(orderMatrix[0][2]<(-1)) __iv__return_expr_isButtonPressed = orderMatrix[2][3]; else if(orderMatrix[2][0]==orderMatrix[0][3]) if(1==orderMatrix[0][2]) __iv__return_expr_isButtonPressed = orderMatrix[1][3]; else if(orderMatrix[1][2]<orderMatrix[2][3]) __iv__return_expr_isButtonPressed = orderMatrix[2][3]; else if(orderMatrix[1][1]<orderMatrix[1][2]) __iv__return_expr_isButtonPressed = orderMatrix[1][2]; else if(orderMatrix[1][1]<orderMatrix[2][2]) __iv__return_expr_isButtonPressed = orderMatrix[2][2]; else __iv__return_expr_isButtonPressed = orderMatrix[1][1]; else __iv__return_expr_isButtonPressed = orderMatrix[2][0]; 
	__CPROVER_assume(__iv__return_expr_isButtonPressed == 0 || __iv__return_expr_isButtonPressed == 1);
	return __iv__return_expr_isButtonPressed;
}
complexity: 11
# constraints: 23

run cbmc: (unwind: 610, timeout: 86400 sec)
cbmc running time: 1494.717 sec

verification results: 
property 'assert((state != 2));' is FALSE alarm.
Counterexample-guided true alarm finding: 
cbmc time (unwind: 610): 4.883 sec
property 'assert((state != 2));' is FALSE alarm.
true alarm finding time: 6.098 sec


synthesize new stub refined by counterexamples (unit timeout: 600 sec)
on each refinement:
refinement time: 115.936 sec

Iteration 18:
signed int __iv__elev_get_button_signal_stub(elev_button_type_t button, signed int floor) {
	signed int __iv__return_expr_elev_get_button_signal;
	signed int __iv__nondet_input_elev_get_button_signal_1 = __VERIFIER_nondet_signed_int();
	__iv__return_expr_elev_get_button_signal = __iv__nondet_input_elev_get_button_signal_1;
	__CPROVER_assume(__iv__return_expr_elev_get_button_signal == 0 || __iv__return_expr_elev_get_button_signal == 1);
	return __iv__return_expr_elev_get_button_signal;
}
complexity: 0
accuracy: 100.00%
coverage: 100.00%
# constraints: 2

signed int __iv__floorIsOrdered_stub(signed int floorNum, signed int motorDir) {
	signed int __iv__return_expr_floorIsOrdered;
	if((-1)==orderMatrix[1][2]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(motorDir>=2) __iv__return_expr_floorIsOrdered = 0; else if((-1)>=orderMatrix[2][1]) __iv__return_expr_floorIsOrdered = 0; else if((-1)>=orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = orderMatrix[2][0]; else if(orderMatrix[1][2]<(-1)) __iv__return_expr_floorIsOrdered = 0; else if((-1)>=orderMatrix[1][0]) __iv__return_expr_floorIsOrdered = 0; else if(3==orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = 0; else if((-1)>=orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[0][3]>=2) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[1][0]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[0][0]; else if(orderMatrix[2][2]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[0][0]; else if(orderMatrix[0][3]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[0][0]; else if(orderMatrix[2][0]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(floorNum<orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(floorNum<orderMatrix[1][3]) __iv__return_expr_floorIsOrdered = orderMatrix[1][0]; else if(floorNum<orderMatrix[2][0]) __iv__return_expr_floorIsOrdered = orderMatrix[2][0]; else if(floorNum<orderMatrix[1][0]) __iv__return_expr_floorIsOrdered = orderMatrix[1][0]; else if(floorNum<orderMatrix[1][1]) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[1][2]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[0][0]; else if(orderMatrix[1][3]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[0][0]; else if((-1)==motorDir) __iv__return_expr_floorIsOrdered = orderMatrix[1][0]; else if(orderMatrix[0][2]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(2>=floorNum) if(orderMatrix[2][3]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[0][0]; else if(orderMatrix[2][1]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(motorDir<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[0][0]; else if(orderMatrix[1][1]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[0][1]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[0][0]; else if(1==orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[2][1]<orderMatrix[1][3]) if(orderMatrix[0][3]<orderMatrix[1][3]) __iv__return_expr_floorIsOrdered = orderMatrix[1][3]; else __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[1][1]<orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = orderMatrix[0][2]; else if(orderMatrix[2][0]>=orderMatrix[1][3]) if(motorDir<orderMatrix[1][3]) __iv__return_expr_floorIsOrdered = orderMatrix[2][0]; else if(motorDir<orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[1][1]<orderMatrix[1][3]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[1][2]<orderMatrix[1][3]) __iv__return_expr_floorIsOrdered = orderMatrix[0][2]; else if(orderMatrix[1][1]<orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[2][0]>=orderMatrix[2][3]) if(motorDir<orderMatrix[2][1]) __iv__return_expr_floorIsOrdered = orderMatrix[2][1]; else if(orderMatrix[2][0]>=orderMatrix[2][1]) if(motorDir<orderMatrix[2][3]) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[1][1]<orderMatrix[2][3]) __iv__return_expr_floorIsOrdered = orderMatrix[2][0]; else if(orderMatrix[1][1]<orderMatrix[1][0]) __iv__return_expr_floorIsOrdered = orderMatrix[2][0]; else if(orderMatrix[1][1]<orderMatrix[2][1]) __iv__return_expr_floorIsOrdered = orderMatrix[2][0]; else if(orderMatrix[1][1]<motorDir) __iv__return_expr_floorIsOrdered = orderMatrix[2][0]; else if(motorDir<orderMatrix[0][3]) __iv__return_expr_floorIsOrdered = orderMatrix[1][0]; else if(motorDir<orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = orderMatrix[0][2]; else if(motorDir<orderMatrix[1][2]) __iv__return_expr_floorIsOrdered = orderMatrix[2][0]; else if(motorDir<orderMatrix[1][0]) __iv__return_expr_floorIsOrdered = orderMatrix[2][0]; else if(motorDir<orderMatrix[1][1]) __iv__return_expr_floorIsOrdered = orderMatrix[1][1]; else if(orderMatrix[2][0]<orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[2][1]<orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[2][0]>=orderMatrix[0][3]) __iv__return_expr_floorIsOrdered = motorDir; else __iv__return_expr_floorIsOrdered = 0; else __iv__return_expr_floorIsOrdered = orderMatrix[1][0]; else __iv__return_expr_floorIsOrdered = orderMatrix[2][3]; else __iv__return_expr_floorIsOrdered = orderMatrix[1][0]; else __iv__return_expr_floorIsOrdered = orderMatrix[1][3]; 
	__CPROVER_assume(__iv__return_expr_floorIsOrdered == 0 || __iv__return_expr_floorIsOrdered == 1);
	return __iv__return_expr_floorIsOrdered;
}
complexity: 54
# constraints: 127

signed int __iv__isButtonPressed_stub() {
	signed int __iv__return_expr_isButtonPressed;
	if(orderMatrix[2][1]>=2) __iv__return_expr_isButtonPressed = 0; else if((-1)>=orderMatrix[2][1]) __iv__return_expr_isButtonPressed = 0; else if(1==orderMatrix[0][0]) __iv__return_expr_isButtonPressed = orderMatrix[0][0]; else if(1==orderMatrix[0][3]) __iv__return_expr_isButtonPressed = orderMatrix[0][3]; else if(1==orderMatrix[2][1]) __iv__return_expr_isButtonPressed = orderMatrix[2][1]; else if(orderMatrix[0][2]<(-1)) __iv__return_expr_isButtonPressed = orderMatrix[2][3]; else if(orderMatrix[2][0]==orderMatrix[0][3]) if(1==orderMatrix[0][2]) __iv__return_expr_isButtonPressed = orderMatrix[1][3]; else if(orderMatrix[1][2]<orderMatrix[2][3]) __iv__return_expr_isButtonPressed = orderMatrix[2][3]; else if(orderMatrix[1][1]<orderMatrix[1][2]) __iv__return_expr_isButtonPressed = orderMatrix[1][2]; else if(orderMatrix[1][1]<orderMatrix[2][2]) __iv__return_expr_isButtonPressed = orderMatrix[2][2]; else __iv__return_expr_isButtonPressed = orderMatrix[1][1]; else __iv__return_expr_isButtonPressed = orderMatrix[2][0]; 
	__CPROVER_assume(__iv__return_expr_isButtonPressed == 0 || __iv__return_expr_isButtonPressed == 1);
	return __iv__return_expr_isButtonPressed;
}
complexity: 11
# constraints: 23

run cbmc: (unwind: 610, timeout: 86400 sec)
cbmc running time: 879.934 sec

verification results: 
property 'assert((state != 2));' is FALSE alarm.
Counterexample-guided true alarm finding: 
cbmc time (unwind: 610): 4.583 sec
property 'assert((state != 2));' is FALSE alarm.
true alarm finding time: 5.706 sec


synthesize new stub refined by counterexamples (unit timeout: 600 sec)
on each refinement:
refinement time: 121.685 sec

Iteration 19:
signed int __iv__elev_get_button_signal_stub(elev_button_type_t button, signed int floor) {
	signed int __iv__return_expr_elev_get_button_signal;
	signed int __iv__nondet_input_elev_get_button_signal_1 = __VERIFIER_nondet_signed_int();
	__iv__return_expr_elev_get_button_signal = __iv__nondet_input_elev_get_button_signal_1;
	__CPROVER_assume(__iv__return_expr_elev_get_button_signal == 0 || __iv__return_expr_elev_get_button_signal == 1);
	return __iv__return_expr_elev_get_button_signal;
}
complexity: 0
accuracy: 100.00%
coverage: 100.00%
# constraints: 2

signed int __iv__floorIsOrdered_stub(signed int floorNum, signed int motorDir) {
	signed int __iv__return_expr_floorIsOrdered;
	if((-1)==orderMatrix[1][2]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(motorDir>=2) __iv__return_expr_floorIsOrdered = 0; else if((-1)>=orderMatrix[2][1]) __iv__return_expr_floorIsOrdered = 0; else if((-1)>=orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = orderMatrix[2][0]; else if(orderMatrix[1][2]<(-1)) __iv__return_expr_floorIsOrdered = 0; else if((-1)>=orderMatrix[1][0]) __iv__return_expr_floorIsOrdered = 0; else if(3==orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = 0; else if((-1)>=orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[0][3]>=2) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[1][0]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[0][0]; else if(orderMatrix[2][2]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[0][0]; else if(orderMatrix[0][3]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[0][0]; else if(orderMatrix[2][0]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[0][0]; else if(floorNum<orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(floorNum<orderMatrix[1][3]) __iv__return_expr_floorIsOrdered = orderMatrix[1][0]; else if(floorNum<orderMatrix[2][0]) __iv__return_expr_floorIsOrdered = orderMatrix[2][0]; else if(floorNum<orderMatrix[1][0]) __iv__return_expr_floorIsOrdered = orderMatrix[1][0]; else if(floorNum<orderMatrix[1][1]) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[1][2]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[0][0]; else if((-1)==motorDir) __iv__return_expr_floorIsOrdered = orderMatrix[1][0]; else if(orderMatrix[1][3]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[0][0]; else if(orderMatrix[2][3]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[0][0]; else if(orderMatrix[0][2]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[2][1]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(motorDir<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[0][0]; else if(orderMatrix[1][1]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[0][1]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[0][0]; else if(1==orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(motorDir<orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[1][1]<orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[0][3]<orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[2][1]<orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[1][2]<orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[1][3]<orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[1][0]<orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[0][2]<orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[2][2]<orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(1==orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[2][2]<orderMatrix[2][3]) __iv__return_expr_floorIsOrdered = motorDir; else if(orderMatrix[1][2]<orderMatrix[2][3]) __iv__return_expr_floorIsOrdered = orderMatrix[1][0]; else if(orderMatrix[2][1]<orderMatrix[2][3]) __iv__return_expr_floorIsOrdered = 0; else if(motorDir>=orderMatrix[2][3]) if(orderMatrix[2][1]<orderMatrix[1][3]) __iv__return_expr_floorIsOrdered = orderMatrix[1][0]; else if(motorDir>=orderMatrix[1][3]) if(orderMatrix[1][2]<orderMatrix[1][3]) __iv__return_expr_floorIsOrdered = orderMatrix[2][0]; else if(orderMatrix[1][2]<orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = orderMatrix[1][0]; else if(orderMatrix[1][1]<orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = motorDir; else if(orderMatrix[1][1]<orderMatrix[1][3]) __iv__return_expr_floorIsOrdered = motorDir; else if(orderMatrix[1][1]<orderMatrix[2][3]) __iv__return_expr_floorIsOrdered = orderMatrix[2][0]; else if(orderMatrix[1][1]<orderMatrix[2][2]) __iv__return_expr_floorIsOrdered = orderMatrix[2][0]; else if(orderMatrix[1][1]<orderMatrix[0][3]) __iv__return_expr_floorIsOrdered = orderMatrix[0][3]; else if(orderMatrix[1][1]<orderMatrix[1][0]) __iv__return_expr_floorIsOrdered = motorDir; else if(motorDir>=orderMatrix[2][1]) if(orderMatrix[1][1]<orderMatrix[2][1]) __iv__return_expr_floorIsOrdered = orderMatrix[2][0]; else if(orderMatrix[1][1]<motorDir) __iv__return_expr_floorIsOrdered = orderMatrix[2][0]; else if(orderMatrix[2][2]<orderMatrix[0][3]) __iv__return_expr_floorIsOrdered = orderMatrix[2][0]; else if(orderMatrix[1][2]<orderMatrix[2][1]) __iv__return_expr_floorIsOrdered = orderMatrix[2][0]; else if(orderMatrix[1][2]<orderMatrix[2][0]) __iv__return_expr_floorIsOrdered = orderMatrix[2][0]; else if(orderMatrix[0][2]<orderMatrix[2][0]) __iv__return_expr_floorIsOrdered = orderMatrix[2][0]; else if(orderMatrix[2][1]<orderMatrix[2][0]) __iv__return_expr_floorIsOrdered = orderMatrix[2][0]; else if(orderMatrix[2][1]<orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = orderMatrix[1][0]; else if(motorDir<orderMatrix[1][0]) __iv__return_expr_floorIsOrdered = orderMatrix[1][0]; else if(orderMatrix[0][0]<motorDir) if(orderMatrix[1][2]<orderMatrix[0][3]) __iv__return_expr_floorIsOrdered = 0; else __iv__return_expr_floorIsOrdered = motorDir; else __iv__return_expr_floorIsOrdered = orderMatrix[1][1]; else __iv__return_expr_floorIsOrdered = orderMatrix[2][0]; else __iv__return_expr_floorIsOrdered = orderMatrix[1][3]; else __iv__return_expr_floorIsOrdered = orderMatrix[1][3]; 
	__CPROVER_assume(__iv__return_expr_floorIsOrdered == 0 || __iv__return_expr_floorIsOrdered == 1);
	return __iv__return_expr_floorIsOrdered;
}
complexity: 64
# constraints: 129

signed int __iv__isButtonPressed_stub() {
	signed int __iv__return_expr_isButtonPressed;
	if(orderMatrix[2][1]>=2) __iv__return_expr_isButtonPressed = 0; else if((-1)>=orderMatrix[2][1]) __iv__return_expr_isButtonPressed = 0; else if(1==orderMatrix[0][0]) __iv__return_expr_isButtonPressed = orderMatrix[0][0]; else if(1==orderMatrix[0][3]) __iv__return_expr_isButtonPressed = orderMatrix[0][3]; else if(orderMatrix[2][3]<orderMatrix[0][0]) __iv__return_expr_isButtonPressed = orderMatrix[2][1]; else if(1==orderMatrix[2][1]) __iv__return_expr_isButtonPressed = orderMatrix[2][1]; else if(orderMatrix[1][1]<orderMatrix[1][2]) __iv__return_expr_isButtonPressed = orderMatrix[1][2]; else if(orderMatrix[1][2]<orderMatrix[2][3]) __iv__return_expr_isButtonPressed = orderMatrix[2][3]; else if(orderMatrix[0][2]<(-1)) __iv__return_expr_isButtonPressed = orderMatrix[2][0]; else if(orderMatrix[1][1]<orderMatrix[2][2]) __iv__return_expr_isButtonPressed = orderMatrix[2][2]; else if(orderMatrix[1][3]<orderMatrix[2][0]) __iv__return_expr_isButtonPressed = orderMatrix[2][0]; else if(orderMatrix[1][1]<orderMatrix[0][2]) __iv__return_expr_isButtonPressed = orderMatrix[1][3]; else if(1==orderMatrix[1][2]) __iv__return_expr_isButtonPressed = orderMatrix[2][3]; else if(orderMatrix[2][3]==orderMatrix[0][2]) if(orderMatrix[1][3]>=orderMatrix[1][1]) __iv__return_expr_isButtonPressed = orderMatrix[1][3]; else __iv__return_expr_isButtonPressed = orderMatrix[1][1]; else __iv__return_expr_isButtonPressed = orderMatrix[1][1]; 
	__CPROVER_assume(__iv__return_expr_isButtonPressed == 0 || __iv__return_expr_isButtonPressed == 1);
	return __iv__return_expr_isButtonPressed;
}
complexity: 15
# constraints: 24

run cbmc: (unwind: 610, timeout: 86400 sec)
cbmc running time: 1104.727 sec

verification results: 
property 'assert((state != 2));' is FALSE alarm.
Counterexample-guided true alarm finding: 
cbmc time (unwind: 610): 4.354 sec
property 'assert((state != 2));' is FALSE alarm.
true alarm finding time: 5.428 sec


synthesize new stub refined by counterexamples (unit timeout: 600 sec)
on each refinement:
refinement time: 125.974 sec

Iteration 20:
signed int __iv__elev_get_button_signal_stub(elev_button_type_t button, signed int floor) {
	signed int __iv__return_expr_elev_get_button_signal;
	signed int __iv__nondet_input_elev_get_button_signal_1 = __VERIFIER_nondet_signed_int();
	__iv__return_expr_elev_get_button_signal = __iv__nondet_input_elev_get_button_signal_1;
	__CPROVER_assume(__iv__return_expr_elev_get_button_signal == 0 || __iv__return_expr_elev_get_button_signal == 1);
	return __iv__return_expr_elev_get_button_signal;
}
complexity: 0
accuracy: 100.00%
coverage: 100.00%
# constraints: 2

signed int __iv__floorIsOrdered_stub(signed int floorNum, signed int motorDir) {
	signed int __iv__return_expr_floorIsOrdered;
	if((-1)==orderMatrix[1][2]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(motorDir>=2) __iv__return_expr_floorIsOrdered = 0; else if((-1)>=orderMatrix[2][1]) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[1][2]<(-1)) __iv__return_expr_floorIsOrdered = 0; else if((-1)>=orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = orderMatrix[2][0]; else if((-1)>=orderMatrix[1][0]) __iv__return_expr_floorIsOrdered = 0; else if(3==orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[0][3]>=2) __iv__return_expr_floorIsOrdered = 0; else if((-1)>=orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[1][0]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[0][0]; else if(floorNum<orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(floorNum<orderMatrix[0][3]) __iv__return_expr_floorIsOrdered = orderMatrix[0][0]; else if(floorNum<orderMatrix[1][3]) __iv__return_expr_floorIsOrdered = orderMatrix[1][3]; else if(floorNum<orderMatrix[2][0]) __iv__return_expr_floorIsOrdered = orderMatrix[2][0]; else if(floorNum<orderMatrix[1][0]) __iv__return_expr_floorIsOrdered = orderMatrix[2][1]; else if(floorNum<orderMatrix[1][1]) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[2][2]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[0][0]; else if(orderMatrix[0][3]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[0][0]; else if(orderMatrix[2][0]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[0][0]; else if(orderMatrix[1][2]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[0][0]; else if((-1)==motorDir) __iv__return_expr_floorIsOrdered = orderMatrix[1][0]; else if(orderMatrix[0][2]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[1][3]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[0][0]; else if(orderMatrix[2][3]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[0][0]; else if(orderMatrix[0][3]>=orderMatrix[0][2]) if(orderMatrix[0][3]<motorDir) __iv__return_expr_floorIsOrdered = motorDir; else if(orderMatrix[0][3]<orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[0][3]<orderMatrix[2][3]) __iv__return_expr_floorIsOrdered = orderMatrix[1][3]; else if(orderMatrix[0][3]<orderMatrix[2][2]) __iv__return_expr_floorIsOrdered = orderMatrix[1][3]; else if(orderMatrix[0][3]<orderMatrix[2][1]) __iv__return_expr_floorIsOrdered = orderMatrix[2][0]; else if(orderMatrix[0][3]<orderMatrix[1][3]) __iv__return_expr_floorIsOrdered = orderMatrix[1][3]; else if(orderMatrix[0][3]>=orderMatrix[1][2]) if(orderMatrix[0][3]<orderMatrix[1][0]) __iv__return_expr_floorIsOrdered = orderMatrix[2][0]; else if(1==orderMatrix[0][3]) if(orderMatrix[1][2]<orderMatrix[2][3]) __iv__return_expr_floorIsOrdered = orderMatrix[1][3]; else if(orderMatrix[1][2]<orderMatrix[1][3]) __iv__return_expr_floorIsOrdered = orderMatrix[1][3]; else if(motorDir>=orderMatrix[1][1]) if(orderMatrix[2][0]<orderMatrix[2][3]) __iv__return_expr_floorIsOrdered = orderMatrix[1][3]; else if(floorNum>=3) __iv__return_expr_floorIsOrdered = orderMatrix[1][3]; else if(orderMatrix[2][0]<orderMatrix[2][1]) __iv__return_expr_floorIsOrdered = orderMatrix[2][1]; else if(orderMatrix[2][0]>=orderMatrix[0][2]) if(orderMatrix[2][0]<orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(1==orderMatrix[2][0]) if(motorDir<orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(motorDir<orderMatrix[2][1]) __iv__return_expr_floorIsOrdered = orderMatrix[0][0]; else __iv__return_expr_floorIsOrdered = motorDir; else __iv__return_expr_floorIsOrdered = 0; else __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else __iv__return_expr_floorIsOrdered = orderMatrix[1][0]; else __iv__return_expr_floorIsOrdered = floorNum; else __iv__return_expr_floorIsOrdered = orderMatrix[2][0]; else __iv__return_expr_floorIsOrdered = orderMatrix[0][2]; 
	__CPROVER_assume(__iv__return_expr_floorIsOrdered == 0 || __iv__return_expr_floorIsOrdered == 1);
	return __iv__return_expr_floorIsOrdered;
}
complexity: 45
# constraints: 134

signed int __iv__isButtonPressed_stub() {
	signed int __iv__return_expr_isButtonPressed;
	if(orderMatrix[2][1]>=2) __iv__return_expr_isButtonPressed = 0; else if((-1)>=orderMatrix[2][1]) __iv__return_expr_isButtonPressed = 0; else if(1==orderMatrix[0][0]) __iv__return_expr_isButtonPressed = orderMatrix[0][0]; else if(1==orderMatrix[0][3]) __iv__return_expr_isButtonPressed = orderMatrix[0][3]; else if(1==orderMatrix[2][1]) __iv__return_expr_isButtonPressed = orderMatrix[2][1]; else if(orderMatrix[0][2]==orderMatrix[0][0]) if(orderMatrix[1][1]<orderMatrix[1][2]) __iv__return_expr_isButtonPressed = orderMatrix[1][2]; else if(orderMatrix[1][3]<orderMatrix[2][0]) __iv__return_expr_isButtonPressed = orderMatrix[2][0]; else if(orderMatrix[1][2]<orderMatrix[2][3]) __iv__return_expr_isButtonPressed = orderMatrix[2][3]; else if(orderMatrix[1][1]<orderMatrix[2][2]) __iv__return_expr_isButtonPressed = orderMatrix[2][2]; else if(orderMatrix[0][2]<(-1)) __iv__return_expr_isButtonPressed = orderMatrix[2][0]; else if(1==orderMatrix[1][2]) __iv__return_expr_isButtonPressed = orderMatrix[1][1]; else if(orderMatrix[1][3]<orderMatrix[1][1]) __iv__return_expr_isButtonPressed = orderMatrix[1][1]; else __iv__return_expr_isButtonPressed = orderMatrix[1][3]; else __iv__return_expr_isButtonPressed = orderMatrix[0][2]; 
	__CPROVER_assume(__iv__return_expr_isButtonPressed == 0 || __iv__return_expr_isButtonPressed == 1);
	return __iv__return_expr_isButtonPressed;
}
complexity: 13
# constraints: 25

run cbmc: (unwind: 610, timeout: 86400 sec)
cbmc running time: 1170.39 sec

verification results: 
property 'assert((state != 2));' is FALSE alarm.
Counterexample-guided true alarm finding: 
cbmc time (unwind: 610): 4.247 sec
property 'assert((state != 2));' is FALSE alarm.
true alarm finding time: 5.301 sec


synthesize new stub refined by counterexamples (unit timeout: 600 sec)
on each refinement:
refinement time: 135.393 sec

Iteration 21:
signed int __iv__elev_get_button_signal_stub(elev_button_type_t button, signed int floor) {
	signed int __iv__return_expr_elev_get_button_signal;
	signed int __iv__nondet_input_elev_get_button_signal_1 = __VERIFIER_nondet_signed_int();
	__iv__return_expr_elev_get_button_signal = __iv__nondet_input_elev_get_button_signal_1;
	__CPROVER_assume(__iv__return_expr_elev_get_button_signal == 0 || __iv__return_expr_elev_get_button_signal == 1);
	return __iv__return_expr_elev_get_button_signal;
}
complexity: 0
accuracy: 100.00%
coverage: 100.00%
# constraints: 2

signed int __iv__floorIsOrdered_stub(signed int floorNum, signed int motorDir) {
	signed int __iv__return_expr_floorIsOrdered;
	if((-1)==orderMatrix[1][2]) __iv__return_expr_floorIsOrdered = orderMatrix[0][0]; else if(motorDir>=2) __iv__return_expr_floorIsOrdered = 0; else if((-1)>=orderMatrix[2][1]) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[1][2]<(-1)) __iv__return_expr_floorIsOrdered = 0; else if((-1)>=orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = orderMatrix[2][0]; else if((-1)>=orderMatrix[1][0]) __iv__return_expr_floorIsOrdered = 0; else if(3==orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = 0; else if((-1)>=orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[0][3]>=2) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[1][0]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[0][0]; else if(floorNum<orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = orderMatrix[0][0]; else if(floorNum<orderMatrix[0][3]) __iv__return_expr_floorIsOrdered = orderMatrix[0][0]; else if(floorNum<orderMatrix[1][3]) __iv__return_expr_floorIsOrdered = orderMatrix[1][3]; else if(floorNum<orderMatrix[2][0]) __iv__return_expr_floorIsOrdered = orderMatrix[1][0]; else if(floorNum<orderMatrix[1][0]) __iv__return_expr_floorIsOrdered = orderMatrix[2][1]; else if(floorNum<orderMatrix[1][1]) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[2][2]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[0][0]; else if(orderMatrix[0][3]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[0][0]; else if(orderMatrix[2][0]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[0][0]; else if((-1)==motorDir) __iv__return_expr_floorIsOrdered = orderMatrix[1][0]; else if(orderMatrix[1][2]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[0][0]; else if(orderMatrix[1][3]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[0][0]; else if(orderMatrix[2][3]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[0][0]; else if(orderMatrix[0][2]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[0][0]; else if(orderMatrix[2][1]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[1][1]; else if(motorDir<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[0][0]; else if(orderMatrix[1][1]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[0][0]; else if(orderMatrix[0][1]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[0][0]; else if(1==orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[0][0]; else if(orderMatrix[1][0]>=motorDir) if(orderMatrix[0][3]<orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = orderMatrix[1][3]; else if(orderMatrix[1][1]>=orderMatrix[0][1]) if(orderMatrix[2][0]<orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = orderMatrix[0][2]; else if(motorDir<orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = orderMatrix[2][1]; else if(orderMatrix[0][2]>=orderMatrix[0][1]) if(orderMatrix[1][3]>=orderMatrix[0][1]) if(orderMatrix[2][3]<orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = orderMatrix[1][3]; else if(orderMatrix[2][2]<orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = orderMatrix[1][3]; else if(orderMatrix[1][2]<orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = orderMatrix[0][2]; else if(orderMatrix[1][2]>=orderMatrix[2][0]) if(orderMatrix[1][0]<orderMatrix[1][3]) __iv__return_expr_floorIsOrdered = orderMatrix[1][3]; else if(orderMatrix[1][0]<orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = orderMatrix[0][2]; else if(orderMatrix[1][0]<orderMatrix[1][1]) __iv__return_expr_floorIsOrdered = orderMatrix[1][1]; else if(orderMatrix[1][0]>=orderMatrix[2][2]) if(orderMatrix[1][0]>=orderMatrix[0][3]) if(orderMatrix[1][0]<orderMatrix[2][1]) __iv__return_expr_floorIsOrdered = orderMatrix[2][1]; else if(motorDir<orderMatrix[2][1]) __iv__return_expr_floorIsOrdered = orderMatrix[1][3]; else if(orderMatrix[2][2]<orderMatrix[0][3]) __iv__return_expr_floorIsOrdered = orderMatrix[1][3]; else if(orderMatrix[1][2]<orderMatrix[1][3]) __iv__return_expr_floorIsOrdered = orderMatrix[1][3]; else if(floorNum>=3) __iv__return_expr_floorIsOrdered = orderMatrix[1][3]; else if(orderMatrix[1][2]<orderMatrix[2][1]) __iv__return_expr_floorIsOrdered = orderMatrix[2][1]; else if(orderMatrix[0][2]<orderMatrix[1][3]) __iv__return_expr_floorIsOrdered = orderMatrix[1][3]; else if(motorDir<orderMatrix[1][3]) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[1][2]>=orderMatrix[2][3]) if(orderMatrix[2][0]<orderMatrix[1][3]) __iv__return_expr_floorIsOrdered = orderMatrix[1][3]; else if(orderMatrix[2][0]<orderMatrix[2][1]) __iv__return_expr_floorIsOrdered = orderMatrix[0][2]; else if(orderMatrix[2][0]<orderMatrix[2][3]) __iv__return_expr_floorIsOrdered = orderMatrix[0][2]; else if(orderMatrix[2][0]<orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = orderMatrix[0][2]; else if(orderMatrix[2][2]<orderMatrix[2][3]) __iv__return_expr_floorIsOrdered = orderMatrix[0][2]; else if(motorDir<orderMatrix[2][3]) __iv__return_expr_floorIsOrdered = 0; else if(motorDir<orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = orderMatrix[0][2]; else if(motorDir<orderMatrix[0][3]) __iv__return_expr_floorIsOrdered = orderMatrix[1][0]; else if(motorDir<orderMatrix[1][0]) __iv__return_expr_floorIsOrdered = orderMatrix[1][2]; else if(orderMatrix[1][2]>=orderMatrix[0][3]) __iv__return_expr_floorIsOrdered = orderMatrix[1][0]; else __iv__return_expr_floorIsOrdered = 0; else __iv__return_expr_floorIsOrdered = orderMatrix[1][0]; else __iv__return_expr_floorIsOrdered = orderMatrix[2][1]; else __iv__return_expr_floorIsOrdered = 0; else __iv__return_expr_floorIsOrdered = orderMatrix[2][0]; else __iv__return_expr_floorIsOrdered = orderMatrix[0][2]; else __iv__return_expr_floorIsOrdered = orderMatrix[1][3]; else __iv__return_expr_floorIsOrdered = orderMatrix[1][2]; else __iv__return_expr_floorIsOrdered = motorDir; 
	__CPROVER_assume(__iv__return_expr_floorIsOrdered == 0 || __iv__return_expr_floorIsOrdered == 1);
	return __iv__return_expr_floorIsOrdered;
}
complexity: 64
# constraints: 140

signed int __iv__isButtonPressed_stub() {
	signed int __iv__return_expr_isButtonPressed;
	if(orderMatrix[2][1]>=2) __iv__return_expr_isButtonPressed = 0; else if((-1)>=orderMatrix[2][1]) __iv__return_expr_isButtonPressed = 0; else if(1==orderMatrix[0][0]) __iv__return_expr_isButtonPressed = orderMatrix[0][0]; else if(1==orderMatrix[0][3]) __iv__return_expr_isButtonPressed = orderMatrix[0][3]; else if(1==orderMatrix[2][1]) __iv__return_expr_isButtonPressed = orderMatrix[2][1]; else if(orderMatrix[0][3]==orderMatrix[0][1]) if(orderMatrix[1][3]<orderMatrix[2][0]) __iv__return_expr_isButtonPressed = orderMatrix[2][0]; else if(orderMatrix[0][2]<(-1)) __iv__return_expr_isButtonPressed = orderMatrix[2][0]; else if(orderMatrix[1][2]<orderMatrix[2][3]) __iv__return_expr_isButtonPressed = orderMatrix[2][3]; else if(orderMatrix[1][1]<orderMatrix[1][2]) __iv__return_expr_isButtonPressed = orderMatrix[1][2]; else if(orderMatrix[1][1]<orderMatrix[2][2]) __iv__return_expr_isButtonPressed = orderMatrix[2][2]; else if(orderMatrix[1][0]<orderMatrix[2][0]) __iv__return_expr_isButtonPressed = orderMatrix[2][0]; else if(1==orderMatrix[1][0]) __iv__return_expr_isButtonPressed = orderMatrix[2][0]; else if(orderMatrix[1][1]<orderMatrix[1][3]) __iv__return_expr_isButtonPressed = orderMatrix[1][3]; else if(orderMatrix[1][1]<orderMatrix[0][2]) __iv__return_expr_isButtonPressed = orderMatrix[0][2]; else __iv__return_expr_isButtonPressed = orderMatrix[1][1]; else __iv__return_expr_isButtonPressed = orderMatrix[0][1]; 
	__CPROVER_assume(__iv__return_expr_isButtonPressed == 0 || __iv__return_expr_isButtonPressed == 1);
	return __iv__return_expr_isButtonPressed;
}
complexity: 15
# constraints: 26

run cbmc: (unwind: 610, timeout: 86400 sec)
cbmc running time: 1207.287 sec

verification results: 
property 'assert((state != 2));' is FALSE alarm.
Counterexample-guided true alarm finding: 
cbmc time (unwind: 610): 4.855 sec
property 'assert((state != 2));' is FALSE alarm.
true alarm finding time: 6.201 sec


synthesize new stub refined by counterexamples (unit timeout: 600 sec)
on each refinement:
refinement time: 140.926 sec

Iteration 22:
signed int __iv__elev_get_button_signal_stub(elev_button_type_t button, signed int floor) {
	signed int __iv__return_expr_elev_get_button_signal;
	signed int __iv__nondet_input_elev_get_button_signal_1 = __VERIFIER_nondet_signed_int();
	__iv__return_expr_elev_get_button_signal = __iv__nondet_input_elev_get_button_signal_1;
	__CPROVER_assume(__iv__return_expr_elev_get_button_signal == 0 || __iv__return_expr_elev_get_button_signal == 1);
	return __iv__return_expr_elev_get_button_signal;
}
complexity: 0
accuracy: 100.00%
coverage: 100.00%
# constraints: 2

signed int __iv__floorIsOrdered_stub(signed int floorNum, signed int motorDir) {
	signed int __iv__return_expr_floorIsOrdered;
	if((-1)>=orderMatrix[0][3]) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[2][3]>=2) __iv__return_expr_floorIsOrdered = 1; else if(3==orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[1][0]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[0][0]; else if(floorNum<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[0][0]; else if(orderMatrix[2][2]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[1][1]; else if(floorNum<orderMatrix[2][2]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(floorNum<orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = orderMatrix[0][2]; else if(floorNum<orderMatrix[1][3]) __iv__return_expr_floorIsOrdered = orderMatrix[1][3]; else if(floorNum<orderMatrix[2][0]) __iv__return_expr_floorIsOrdered = orderMatrix[1][1]; else if(floorNum<orderMatrix[1][0]) __iv__return_expr_floorIsOrdered = orderMatrix[1][1]; else if(floorNum<orderMatrix[2][1]) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[0][3]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[2][2]; else if(orderMatrix[2][0]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[1][3]; else if((-1)==motorDir) __iv__return_expr_floorIsOrdered = orderMatrix[1][1]; else if(orderMatrix[1][2]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[2][2]; else if(orderMatrix[1][3]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[2][2]; else if(orderMatrix[2][3]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[1][3]; else if(orderMatrix[0][2]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[1][3]; else if(motorDir<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[2][1]; else if(orderMatrix[0][0]==floorNum) __iv__return_expr_floorIsOrdered = orderMatrix[1][3]; else if(orderMatrix[0][1]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[1][3]; else if(orderMatrix[2][1]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[1][3]; else if(orderMatrix[1][1]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[1][3]; else if(1==orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[1][3]; else if(orderMatrix[1][1]<orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = orderMatrix[2][1]; else if(orderMatrix[1][2]<orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = orderMatrix[1][1]; else if(orderMatrix[1][0]<orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = orderMatrix[1][1]; else if(motorDir<orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = orderMatrix[1][1]; else if(orderMatrix[2][1]<orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = orderMatrix[1][1]; else if(orderMatrix[2][0]<orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = orderMatrix[2][2]; else if(orderMatrix[2][2]<orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = orderMatrix[1][1]; else if(orderMatrix[1][3]<orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = orderMatrix[2][2]; else if(orderMatrix[0][3]<orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = orderMatrix[1][3]; else if(orderMatrix[2][3]<orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = orderMatrix[1][3]; else if(orderMatrix[0][1]<orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = orderMatrix[1][3]; else if(orderMatrix[0][0]<orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = orderMatrix[1][3]; else if(2==floorNum) __iv__return_expr_floorIsOrdered = orderMatrix[1][2]; else if(orderMatrix[2][2]<orderMatrix[1][0]) __iv__return_expr_floorIsOrdered = orderMatrix[1][0]; else if(orderMatrix[2][3]<orderMatrix[1][3]) __iv__return_expr_floorIsOrdered = orderMatrix[1][3]; else if(orderMatrix[2][1]<orderMatrix[1][3]) __iv__return_expr_floorIsOrdered = orderMatrix[1][3]; else if(orderMatrix[1][1]<orderMatrix[1][3]) __iv__return_expr_floorIsOrdered = orderMatrix[1][3]; else if(orderMatrix[1][1]<orderMatrix[1][0]) __iv__return_expr_floorIsOrdered = 0; else if(motorDir<orderMatrix[1][0]) __iv__return_expr_floorIsOrdered = orderMatrix[2][2]; else if(orderMatrix[0][3]<orderMatrix[1][0]) __iv__return_expr_floorIsOrdered = orderMatrix[2][2]; else if(orderMatrix[1][0]==floorNum) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[2][3]<orderMatrix[2][2]) __iv__return_expr_floorIsOrdered = orderMatrix[2][2]; else if(orderMatrix[1][2]<orderMatrix[1][3]) __iv__return_expr_floorIsOrdered = orderMatrix[1][3]; else if(orderMatrix[0][3]<orderMatrix[2][2]) __iv__return_expr_floorIsOrdered = orderMatrix[2][2]; else if(orderMatrix[2][0]<orderMatrix[2][2]) __iv__return_expr_floorIsOrdered = orderMatrix[1][3]; else if(orderMatrix[0][1]<orderMatrix[2][2]) __iv__return_expr_floorIsOrdered = 0; else if(floorNum>=3) __iv__return_expr_floorIsOrdered = orderMatrix[1][3]; else if(orderMatrix[0][1]<orderMatrix[2][3]) __iv__return_expr_floorIsOrdered = orderMatrix[1][1]; else if(orderMatrix[2][0]<orderMatrix[2][3]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[1][1]<orderMatrix[2][2]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[1][1]<orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[2][0]<orderMatrix[2][1]) __iv__return_expr_floorIsOrdered = orderMatrix[2][1]; else if(orderMatrix[1][1]<orderMatrix[2][1]) __iv__return_expr_floorIsOrdered = orderMatrix[2][1]; else __iv__return_expr_floorIsOrdered = orderMatrix[1][1]; 
	__CPROVER_assume(__iv__return_expr_floorIsOrdered == 0 || __iv__return_expr_floorIsOrdered == 1);
	return __iv__return_expr_floorIsOrdered;
}
complexity: 58
# constraints: 150

signed int __iv__isButtonPressed_stub() {
	signed int __iv__return_expr_isButtonPressed;
	if(orderMatrix[2][1]>=2) __iv__return_expr_isButtonPressed = 0; else if((-1)>=orderMatrix[2][1]) __iv__return_expr_isButtonPressed = 0; else if(1==orderMatrix[0][0]) __iv__return_expr_isButtonPressed = orderMatrix[0][0]; else if(1==orderMatrix[0][3]) __iv__return_expr_isButtonPressed = orderMatrix[0][3]; else if(1==orderMatrix[2][1]) __iv__return_expr_isButtonPressed = orderMatrix[2][1]; else if(orderMatrix[0][3]==orderMatrix[0][1]) if(orderMatrix[1][3]<orderMatrix[2][0]) __iv__return_expr_isButtonPressed = orderMatrix[2][0]; else if(orderMatrix[0][2]<(-1)) __iv__return_expr_isButtonPressed = orderMatrix[2][0]; else if(orderMatrix[1][2]<orderMatrix[2][3]) __iv__return_expr_isButtonPressed = orderMatrix[2][3]; else if(orderMatrix[1][1]<orderMatrix[1][2]) __iv__return_expr_isButtonPressed = orderMatrix[1][2]; else if(orderMatrix[1][1]<orderMatrix[2][2]) __iv__return_expr_isButtonPressed = orderMatrix[2][2]; else if(orderMatrix[1][0]<orderMatrix[2][0]) __iv__return_expr_isButtonPressed = orderMatrix[2][0]; else if(1==orderMatrix[1][0]) __iv__return_expr_isButtonPressed = orderMatrix[2][0]; else if(orderMatrix[1][1]<orderMatrix[1][3]) __iv__return_expr_isButtonPressed = orderMatrix[1][3]; else if(orderMatrix[1][1]<orderMatrix[0][2]) __iv__return_expr_isButtonPressed = orderMatrix[0][2]; else __iv__return_expr_isButtonPressed = orderMatrix[1][1]; else __iv__return_expr_isButtonPressed = orderMatrix[0][1]; 
	__CPROVER_assume(__iv__return_expr_isButtonPressed == 0 || __iv__return_expr_isButtonPressed == 1);
	return __iv__return_expr_isButtonPressed;
}
complexity: 15
# constraints: 26

run cbmc: (unwind: 610, timeout: 86400 sec)
cbmc running time: 1202.679 sec

verification results: 
property 'assert((state != 2));' is FALSE alarm.
Counterexample-guided true alarm finding: 
cbmc time (unwind: 610): 4.62 sec
property 'assert((state != 2));' is FALSE alarm.
true alarm finding time: 5.846 sec


synthesize new stub refined by counterexamples (unit timeout: 600 sec)
on each refinement:
refinement time: 134.495 sec

Iteration 23:
signed int __iv__elev_get_button_signal_stub(elev_button_type_t button, signed int floor) {
	signed int __iv__return_expr_elev_get_button_signal;
	signed int __iv__nondet_input_elev_get_button_signal_1 = __VERIFIER_nondet_signed_int();
	__iv__return_expr_elev_get_button_signal = __iv__nondet_input_elev_get_button_signal_1;
	__CPROVER_assume(__iv__return_expr_elev_get_button_signal == 0 || __iv__return_expr_elev_get_button_signal == 1);
	return __iv__return_expr_elev_get_button_signal;
}
complexity: 0
accuracy: 100.00%
coverage: 100.00%
# constraints: 2

signed int __iv__floorIsOrdered_stub(signed int floorNum, signed int motorDir) {
	signed int __iv__return_expr_floorIsOrdered;
	if((-1)==orderMatrix[1][2]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if((-1)>=orderMatrix[0][1]) if(orderMatrix[1][2]<orderMatrix[2][3]) __iv__return_expr_floorIsOrdered = orderMatrix[2][0]; else __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[1][2]<(-1)) __iv__return_expr_floorIsOrdered = 0; else if((-1)>=orderMatrix[1][0]) __iv__return_expr_floorIsOrdered = 0; else if(3==orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = 0; else if((-1)>=orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[0][3]>=2) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[1][0]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[0][0]; else if(orderMatrix[2][2]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[0][0]; else if(orderMatrix[0][3]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[0][0]; else if(floorNum<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(floorNum<orderMatrix[2][3]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(floorNum<orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = orderMatrix[0][2]; else if(floorNum<orderMatrix[1][3]) __iv__return_expr_floorIsOrdered = orderMatrix[1][3]; else if(floorNum<orderMatrix[2][0]) __iv__return_expr_floorIsOrdered = orderMatrix[2][0]; else if(floorNum<orderMatrix[1][0]) __iv__return_expr_floorIsOrdered = orderMatrix[2][1]; else if(floorNum<orderMatrix[1][1]) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[1][2]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[0][0]; else if(orderMatrix[1][3]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[0][0]; else if(orderMatrix[2][0]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[0][0]; else if((-1)==motorDir) __iv__return_expr_floorIsOrdered = orderMatrix[1][0]; else if(orderMatrix[2][3]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[0][0]; else if(orderMatrix[0][2]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[0][0]; else if(orderMatrix[2][1]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = motorDir; else if(motorDir<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[0][0]; else if(orderMatrix[1][1]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[0][1]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[0][0]; else if(1==orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[1][2]<orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = orderMatrix[0][2]; else if(orderMatrix[1][0]<orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = orderMatrix[0][2]; else if(orderMatrix[1][1]<orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = orderMatrix[2][1]; else if(motorDir<orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = orderMatrix[0][2]; else if(orderMatrix[2][1]<orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = orderMatrix[0][2]; else if(orderMatrix[2][0]<orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = orderMatrix[0][2]; else if(orderMatrix[2][1]<orderMatrix[1][3]) __iv__return_expr_floorIsOrdered = orderMatrix[1][3]; else if(orderMatrix[2][2]<orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = orderMatrix[0][2]; else if(orderMatrix[1][3]<orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = orderMatrix[0][2]; else if(orderMatrix[0][3]<orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = orderMatrix[1][3]; else if(orderMatrix[2][3]<orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[0][1]<orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = orderMatrix[1][3]; else if(orderMatrix[0][0]<orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[2][0]<orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[2][1]<orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[0][3]>=orderMatrix[2][2]) if(orderMatrix[1][1]<orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[2][3]<orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[1][2]<orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[0][3]<orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[0][3]<orderMatrix[1][3]) __iv__return_expr_floorIsOrdered = orderMatrix[1][3]; else if(orderMatrix[2][3]<orderMatrix[1][3]) __iv__return_expr_floorIsOrdered = orderMatrix[1][3]; else if(motorDir<orderMatrix[1][3]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(motorDir<orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[1][3]<orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[1][0]<orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[0][3]<orderMatrix[2][3]) __iv__return_expr_floorIsOrdered = orderMatrix[2][3]; else if(motorDir<orderMatrix[2][1]) __iv__return_expr_floorIsOrdered = orderMatrix[2][1]; else if(orderMatrix[1][0]<orderMatrix[1][3]) __iv__return_expr_floorIsOrdered = orderMatrix[1][3]; else if(orderMatrix[1][0]<orderMatrix[2][3]) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[1][0]>=orderMatrix[2][2]) if(orderMatrix[1][0]<orderMatrix[0][3]) __iv__return_expr_floorIsOrdered = orderMatrix[2][0]; else if(orderMatrix[1][2]<orderMatrix[2][0]) __iv__return_expr_floorIsOrdered = orderMatrix[2][0]; else if(orderMatrix[1][0]<orderMatrix[2][1]) __iv__return_expr_floorIsOrdered = orderMatrix[2][0]; else if(orderMatrix[1][0]<orderMatrix[2][0]) __iv__return_expr_floorIsOrdered = orderMatrix[2][0]; else if(orderMatrix[0][3]<orderMatrix[2][1]) __iv__return_expr_floorIsOrdered = orderMatrix[2][1]; else if(orderMatrix[0][3]<orderMatrix[1][0]) __iv__return_expr_floorIsOrdered = orderMatrix[2][0]; else if(orderMatrix[2][1]<orderMatrix[2][0]) __iv__return_expr_floorIsOrdered = 0; else if(motorDir<orderMatrix[2][3]) __iv__return_expr_floorIsOrdered = orderMatrix[2][3]; else if(motorDir<orderMatrix[1][0]) __iv__return_expr_floorIsOrdered = orderMatrix[1][0]; else if(motorDir<orderMatrix[1][1]) __iv__return_expr_floorIsOrdered = orderMatrix[1][1]; else if(orderMatrix[1][0]>=orderMatrix[1][1]) __iv__return_expr_floorIsOrdered = orderMatrix[2][1]; else __iv__return_expr_floorIsOrdered = orderMatrix[1][1]; else __iv__return_expr_floorIsOrdered = orderMatrix[2][0]; else __iv__return_expr_floorIsOrdered = orderMatrix[2][2]; 
	__CPROVER_assume(__iv__return_expr_floorIsOrdered == 0 || __iv__return_expr_floorIsOrdered == 1);
	return __iv__return_expr_floorIsOrdered;
}
complexity: 71
# constraints: 158

signed int __iv__isButtonPressed_stub() {
	signed int __iv__return_expr_isButtonPressed;
	if(orderMatrix[2][1]>=2) __iv__return_expr_isButtonPressed = 0; else if((-1)>=orderMatrix[2][1]) __iv__return_expr_isButtonPressed = 0; else if(1==orderMatrix[0][0]) __iv__return_expr_isButtonPressed = orderMatrix[0][0]; else if(1==orderMatrix[0][3]) __iv__return_expr_isButtonPressed = orderMatrix[0][3]; else if(1==orderMatrix[2][1]) __iv__return_expr_isButtonPressed = orderMatrix[2][1]; else if(orderMatrix[0][3]==orderMatrix[0][1]) if(orderMatrix[1][3]<orderMatrix[2][0]) __iv__return_expr_isButtonPressed = orderMatrix[2][0]; else if(orderMatrix[0][2]<(-1)) __iv__return_expr_isButtonPressed = orderMatrix[2][0]; else if(orderMatrix[1][2]<orderMatrix[2][3]) __iv__return_expr_isButtonPressed = orderMatrix[2][3]; else if(orderMatrix[1][1]<orderMatrix[1][2]) __iv__return_expr_isButtonPressed = orderMatrix[1][2]; else if(orderMatrix[1][1]<orderMatrix[2][2]) __iv__return_expr_isButtonPressed = orderMatrix[2][2]; else if(orderMatrix[1][0]<orderMatrix[2][0]) __iv__return_expr_isButtonPressed = orderMatrix[2][0]; else if(1==orderMatrix[1][0]) __iv__return_expr_isButtonPressed = orderMatrix[2][0]; else if(orderMatrix[1][1]<orderMatrix[1][3]) __iv__return_expr_isButtonPressed = orderMatrix[1][3]; else if(orderMatrix[1][1]<orderMatrix[0][2]) __iv__return_expr_isButtonPressed = orderMatrix[0][2]; else __iv__return_expr_isButtonPressed = orderMatrix[1][1]; else __iv__return_expr_isButtonPressed = orderMatrix[0][1]; 
	__CPROVER_assume(__iv__return_expr_isButtonPressed == 0 || __iv__return_expr_isButtonPressed == 1);
	return __iv__return_expr_isButtonPressed;
}
complexity: 15
# constraints: 26

run cbmc: (unwind: 610, timeout: 86400 sec)
cbmc running time: 1769.442 sec

verification results: 
property 'assert((state != 2));' is FALSE alarm.
Counterexample-guided true alarm finding: 
cbmc time (unwind: 610): 4.742 sec
property 'assert((state != 2));' is FALSE alarm.
true alarm finding time: 5.975 sec


synthesize new stub refined by counterexamples (unit timeout: 600 sec)
on each refinement:
refinement time: 139.184 sec

Iteration 24:
signed int __iv__elev_get_button_signal_stub(elev_button_type_t button, signed int floor) {
	signed int __iv__return_expr_elev_get_button_signal;
	signed int __iv__nondet_input_elev_get_button_signal_1 = __VERIFIER_nondet_signed_int();
	__iv__return_expr_elev_get_button_signal = __iv__nondet_input_elev_get_button_signal_1;
	__CPROVER_assume(__iv__return_expr_elev_get_button_signal == 0 || __iv__return_expr_elev_get_button_signal == 1);
	return __iv__return_expr_elev_get_button_signal;
}
complexity: 0
accuracy: 100.00%
coverage: 100.00%
# constraints: 2

signed int __iv__floorIsOrdered_stub(signed int floorNum, signed int motorDir) {
	signed int __iv__return_expr_floorIsOrdered;
	if((-1)==orderMatrix[1][2]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if((-1)>=orderMatrix[0][1]) if(orderMatrix[1][2]<orderMatrix[2][3]) __iv__return_expr_floorIsOrdered = orderMatrix[2][0]; else __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[1][2]<(-1)) __iv__return_expr_floorIsOrdered = 0; else if((-1)>=orderMatrix[1][0]) __iv__return_expr_floorIsOrdered = 0; else if(3==orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = 0; else if((-1)>=orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[0][3]>=2) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[1][0]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[0][0]; else if(orderMatrix[0][3]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[0][0]; else if(orderMatrix[2][2]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[0][0]; else if(orderMatrix[0][3]<orderMatrix[2][2]) __iv__return_expr_floorIsOrdered = orderMatrix[2][2]; else if(orderMatrix[0][3]<orderMatrix[2][3]) __iv__return_expr_floorIsOrdered = orderMatrix[2][3]; else if(orderMatrix[0][3]<orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[0][3]<orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = orderMatrix[0][2]; else if(orderMatrix[0][3]<orderMatrix[1][3]) __iv__return_expr_floorIsOrdered = orderMatrix[1][3]; else if(orderMatrix[0][3]>=orderMatrix[1][0]) if(orderMatrix[0][3]<orderMatrix[2][0]) __iv__return_expr_floorIsOrdered = orderMatrix[2][0]; else if(orderMatrix[0][3]<orderMatrix[2][1]) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[0][3]>=orderMatrix[1][1]) if(1==orderMatrix[0][3]) if(orderMatrix[1][2]<orderMatrix[1][3]) __iv__return_expr_floorIsOrdered = orderMatrix[1][3]; else if(orderMatrix[2][2]<orderMatrix[1][3]) __iv__return_expr_floorIsOrdered = orderMatrix[1][3]; else if(orderMatrix[2][2]<orderMatrix[2][3]) __iv__return_expr_floorIsOrdered = orderMatrix[0][2]; else if(orderMatrix[2][2]<orderMatrix[2][0]) __iv__return_expr_floorIsOrdered = orderMatrix[2][0]; else if(orderMatrix[2][2]<orderMatrix[2][1]) __iv__return_expr_floorIsOrdered = orderMatrix[2][1]; else if(orderMatrix[2][2]<motorDir) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[2][2]<orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[2][2]<orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = orderMatrix[0][2]; else if(orderMatrix[1][2]<orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[1][2]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[0][0]; else if(orderMatrix[1][2]<orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[1][2]<orderMatrix[2][3]) __iv__return_expr_floorIsOrdered = orderMatrix[2][3]; else if(orderMatrix[1][2]<orderMatrix[2][0]) __iv__return_expr_floorIsOrdered = orderMatrix[2][0]; else if(orderMatrix[1][2]<motorDir) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[1][2]==orderMatrix[0][3]) if(orderMatrix[1][0]<orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = orderMatrix[1][3]; else if(orderMatrix[1][0]<motorDir) __iv__return_expr_floorIsOrdered = orderMatrix[2][3]; else if(orderMatrix[1][0]<orderMatrix[1][3]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[1][0]<orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[1][0]<orderMatrix[2][3]) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[2][0]<motorDir) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[1][3]<motorDir) __iv__return_expr_floorIsOrdered = orderMatrix[2][0]; else if(floorNum<orderMatrix[2][1]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(floorNum<orderMatrix[1][3]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(floorNum<orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[2][0]<orderMatrix[1][3]) __iv__return_expr_floorIsOrdered = orderMatrix[1][3]; else if(orderMatrix[2][0]<orderMatrix[2][1]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[2][0]<orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = orderMatrix[0][2]; else if(orderMatrix[2][0]<orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[2][0]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[0][0]; else if(orderMatrix[1][3]<orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[1][3]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[0][0]; else if(orderMatrix[1][3]<orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = orderMatrix[0][2]; else if(orderMatrix[1][3]>=1) if(orderMatrix[0][0]<orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(floorNum>=3) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[0][0]<orderMatrix[2][1]) __iv__return_expr_floorIsOrdered = orderMatrix[1][3]; else if(orderMatrix[0][0]>=orderMatrix[1][1]) if(1==orderMatrix[0][0]) if(orderMatrix[2][1]<orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[2][1]<motorDir) __iv__return_expr_floorIsOrdered = orderMatrix[0][0]; else if(orderMatrix[1][1]<orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[0][1]==floorNum) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[2][3]<orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[0][2]<orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[0][2]>=orderMatrix[1][1]) if(orderMatrix[0][2]<orderMatrix[1][3]) __iv__return_expr_floorIsOrdered = orderMatrix[0][0]; else if(orderMatrix[1][1]<motorDir) __iv__return_expr_floorIsOrdered = orderMatrix[0][0]; else if(orderMatrix[1][1]<orderMatrix[2][1]) __iv__return_expr_floorIsOrdered = orderMatrix[0][0]; else __iv__return_expr_floorIsOrdered = orderMatrix[1][1]; else __iv__return_expr_floorIsOrdered = orderMatrix[0][0]; else __iv__return_expr_floorIsOrdered = 0; else __iv__return_expr_floorIsOrdered = orderMatrix[1][3]; else __iv__return_expr_floorIsOrdered = 0; else __iv__return_expr_floorIsOrdered = orderMatrix[0][3]; else __iv__return_expr_floorIsOrdered = 0; else __iv__return_expr_floorIsOrdered = orderMatrix[1][1]; else __iv__return_expr_floorIsOrdered = orderMatrix[1][0]; 
	__CPROVER_assume(__iv__return_expr_floorIsOrdered == 0 || __iv__return_expr_floorIsOrdered == 1);
	return __iv__return_expr_floorIsOrdered;
}
complexity: 70
# constraints: 164

signed int __iv__isButtonPressed_stub() {
	signed int __iv__return_expr_isButtonPressed;
	if(orderMatrix[2][1]>=2) __iv__return_expr_isButtonPressed = 0; else if((-1)>=orderMatrix[2][1]) __iv__return_expr_isButtonPressed = 0; else if(1==orderMatrix[0][0]) __iv__return_expr_isButtonPressed = orderMatrix[0][0]; else if(orderMatrix[1][1]<orderMatrix[1][2]) __iv__return_expr_isButtonPressed = orderMatrix[1][2]; else if(1==orderMatrix[0][3]) __iv__return_expr_isButtonPressed = orderMatrix[0][3]; else if(orderMatrix[1][1]>=2) __iv__return_expr_isButtonPressed = orderMatrix[2][0]; else if(1==orderMatrix[2][3]) __iv__return_expr_isButtonPressed = orderMatrix[2][3]; else if(1==orderMatrix[2][2]) __iv__return_expr_isButtonPressed = orderMatrix[2][2]; else if(orderMatrix[2][3]<orderMatrix[0][0]) __iv__return_expr_isButtonPressed = orderMatrix[2][1]; else if(1==orderMatrix[2][1]) __iv__return_expr_isButtonPressed = orderMatrix[2][1]; else if(orderMatrix[2][0]<orderMatrix[0][1]) __iv__return_expr_isButtonPressed = orderMatrix[0][1]; else if(orderMatrix[1][3]<orderMatrix[2][0]) __iv__return_expr_isButtonPressed = orderMatrix[2][0]; else if(1==orderMatrix[0][1]) __iv__return_expr_isButtonPressed = orderMatrix[2][0]; else if(orderMatrix[1][0]<orderMatrix[2][0]) __iv__return_expr_isButtonPressed = orderMatrix[2][0]; else if(1==orderMatrix[2][0]) __iv__return_expr_isButtonPressed = orderMatrix[2][0]; else if(orderMatrix[1][1]<orderMatrix[1][3]) __iv__return_expr_isButtonPressed = orderMatrix[1][3]; else if(orderMatrix[1][1]<orderMatrix[0][2]) __iv__return_expr_isButtonPressed = orderMatrix[0][2]; else __iv__return_expr_isButtonPressed = orderMatrix[1][1]; 
	__CPROVER_assume(__iv__return_expr_isButtonPressed == 0 || __iv__return_expr_isButtonPressed == 1);
	return __iv__return_expr_isButtonPressed;
}
complexity: 17
# constraints: 28

run cbmc: (unwind: 610, timeout: 86400 sec)
cbmc running time: 1610.959 sec

verification results: 
property 'assert((state != 2));' is FALSE alarm.
Counterexample-guided true alarm finding: 
cbmc time (unwind: 610): 10.3 sec
property 'assert((state != 2));' is FALSE alarm.
true alarm finding time: 11.322 sec


synthesize new stub refined by counterexamples (unit timeout: 600 sec)
on each refinement:
refinement time: 190.687 sec

Iteration 25:
signed int __iv__elev_get_button_signal_stub(elev_button_type_t button, signed int floor) {
	signed int __iv__return_expr_elev_get_button_signal;
	signed int __iv__nondet_input_elev_get_button_signal_1 = __VERIFIER_nondet_signed_int();
	__iv__return_expr_elev_get_button_signal = __iv__nondet_input_elev_get_button_signal_1;
	__CPROVER_assume(__iv__return_expr_elev_get_button_signal == 0 || __iv__return_expr_elev_get_button_signal == 1);
	return __iv__return_expr_elev_get_button_signal;
}
complexity: 0
accuracy: 100.00%
coverage: 100.00%
# constraints: 2

signed int __iv__floorIsOrdered_stub(signed int floorNum, signed int motorDir) {
	signed int __iv__return_expr_floorIsOrdered;
	if((-1)==orderMatrix[1][2]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(motorDir>=2) __iv__return_expr_floorIsOrdered = 0; else if((-1)>=orderMatrix[2][1]) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[1][2]<(-1)) __iv__return_expr_floorIsOrdered = 0; else if((-1)>=orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = orderMatrix[2][0]; else if((-1)>=orderMatrix[1][0]) __iv__return_expr_floorIsOrdered = 0; else if(3==orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = 0; else if((-1)>=orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[0][3]>=2) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[1][0]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[0][0]; else if(orderMatrix[2][2]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[0][0]; else if(floorNum<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(floorNum<orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(floorNum<orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = orderMatrix[1][2]; else if(floorNum<orderMatrix[2][3]) __iv__return_expr_floorIsOrdered = orderMatrix[2][3]; else if(floorNum<orderMatrix[2][2]) __iv__return_expr_floorIsOrdered = orderMatrix[1][2]; else if(floorNum<orderMatrix[1][3]) __iv__return_expr_floorIsOrdered = orderMatrix[1][3]; else if(floorNum<orderMatrix[2][0]) __iv__return_expr_floorIsOrdered = orderMatrix[2][0]; else if(floorNum<orderMatrix[1][0]) __iv__return_expr_floorIsOrdered = orderMatrix[2][1]; else if(floorNum<orderMatrix[1][1]) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[0][3]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[0][0]; else if(orderMatrix[1][2]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[0][0]; else if(orderMatrix[1][2]>=orderMatrix[0][2]) if(orderMatrix[1][0]<orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = orderMatrix[1][2]; else if(orderMatrix[2][2]<orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = orderMatrix[1][2]; else if(orderMatrix[2][2]<orderMatrix[0][3]) __iv__return_expr_floorIsOrdered = orderMatrix[0][3]; else if(orderMatrix[2][2]<orderMatrix[2][3]) __iv__return_expr_floorIsOrdered = orderMatrix[2][3]; else if(orderMatrix[2][2]<orderMatrix[1][3]) __iv__return_expr_floorIsOrdered = orderMatrix[1][3]; else if(orderMatrix[1][0]<orderMatrix[1][3]) __iv__return_expr_floorIsOrdered = orderMatrix[1][3]; else if(orderMatrix[0][3]<orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[1][2]<orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[1][0]<orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[0][0]<orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[1][2]>=orderMatrix[2][0]) if(orderMatrix[1][0]<orderMatrix[0][3]) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[1][0]<orderMatrix[2][3]) __iv__return_expr_floorIsOrdered = orderMatrix[2][3]; else if(orderMatrix[1][0]<orderMatrix[2][2]) __iv__return_expr_floorIsOrdered = orderMatrix[2][2]; else if(orderMatrix[1][0]<orderMatrix[1][1]) __iv__return_expr_floorIsOrdered = orderMatrix[1][1]; else if(orderMatrix[1][0]<orderMatrix[2][1]) __iv__return_expr_floorIsOrdered = orderMatrix[1][2]; else if(orderMatrix[1][0]<orderMatrix[2][0]) __iv__return_expr_floorIsOrdered = orderMatrix[1][2]; else if(orderMatrix[2][2]<orderMatrix[2][1]) __iv__return_expr_floorIsOrdered = orderMatrix[2][1]; else if(orderMatrix[2][2]<orderMatrix[2][0]) __iv__return_expr_floorIsOrdered = orderMatrix[1][2]; else if(orderMatrix[2][2]<orderMatrix[1][0]) __iv__return_expr_floorIsOrdered = orderMatrix[1][2]; else if(orderMatrix[2][2]<motorDir) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[1][2]>=orderMatrix[2][1]) if(orderMatrix[1][2]<orderMatrix[1][3]) __iv__return_expr_floorIsOrdered = orderMatrix[1][3]; else if(orderMatrix[1][2]<orderMatrix[2][3]) __iv__return_expr_floorIsOrdered = orderMatrix[2][3]; else if(orderMatrix[0][3]<orderMatrix[1][3]) __iv__return_expr_floorIsOrdered = orderMatrix[1][3]; else if(orderMatrix[0][3]<orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = orderMatrix[2][3]; else if(orderMatrix[0][3]<orderMatrix[1][0]) __iv__return_expr_floorIsOrdered = orderMatrix[1][0]; else if(orderMatrix[1][2]>=motorDir) if(orderMatrix[1][2]==orderMatrix[1][0]) if(orderMatrix[2][0]<motorDir) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[2][0]<orderMatrix[1][3]) __iv__return_expr_floorIsOrdered = orderMatrix[1][3]; else if(orderMatrix[2][0]<orderMatrix[2][1]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[2][0]<orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = orderMatrix[1][2]; else if(orderMatrix[2][0]<orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[2][0]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[0][0]; else if(orderMatrix[1][3]<orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[1][3]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[0][0]; else if(floorNum>=3) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[2][1]<orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[1][1]<orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[0][1]==floorNum) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[2][3]<orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[2][3]>=motorDir) if(orderMatrix[0][2]<orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[0][2]<orderMatrix[1][1]) __iv__return_expr_floorIsOrdered = orderMatrix[0][0]; else if(orderMatrix[0][2]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[0][0]; else if(orderMatrix[0][2]<motorDir) __iv__return_expr_floorIsOrdered = orderMatrix[2][3]; else if(orderMatrix[0][2]<orderMatrix[1][3]) __iv__return_expr_floorIsOrdered = orderMatrix[1][3]; else if(orderMatrix[0][2]<orderMatrix[2][3]) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[1][3]>=motorDir) if(orderMatrix[1][3]<orderMatrix[2][3]) __iv__return_expr_floorIsOrdered = orderMatrix[2][3]; else if(orderMatrix[1][3]>=1) if(orderMatrix[0][0]>=motorDir) if(1==orderMatrix[0][0]) if(motorDir<floorNum) if(orderMatrix[2][3]<orderMatrix[1][3]) __iv__return_expr_floorIsOrdered = orderMatrix[0][0]; else if(orderMatrix[2][1]<floorNum) if(0==motorDir) __iv__return_expr_floorIsOrdered = 0; else __iv__return_expr_floorIsOrdered = orderMatrix[0][0]; else __iv__return_expr_floorIsOrdered = orderMatrix[0][0]; else __iv__return_expr_floorIsOrdered = orderMatrix[0][0]; else __iv__return_expr_floorIsOrdered = 0; else __iv__return_expr_floorIsOrdered = orderMatrix[1][3]; else __iv__return_expr_floorIsOrdered = orderMatrix[1][2]; else __iv__return_expr_floorIsOrdered = orderMatrix[2][3]; else __iv__return_expr_floorIsOrdered = orderMatrix[1][2]; else __iv__return_expr_floorIsOrdered = orderMatrix[1][0]; else __iv__return_expr_floorIsOrdered = 0; else __iv__return_expr_floorIsOrdered = orderMatrix[1][3]; else __iv__return_expr_floorIsOrdered = orderMatrix[2][0]; else __iv__return_expr_floorIsOrdered = orderMatrix[0][2]; 
	__CPROVER_assume(__iv__return_expr_floorIsOrdered == 0 || __iv__return_expr_floorIsOrdered == 1);
	return __iv__return_expr_floorIsOrdered;
}
complexity: 81
# constraints: 166

signed int __iv__isButtonPressed_stub() {
	signed int __iv__return_expr_isButtonPressed;
	if(orderMatrix[2][1]>=2) __iv__return_expr_isButtonPressed = 0; else if((-1)>=orderMatrix[2][1]) __iv__return_expr_isButtonPressed = 0; else if(1==orderMatrix[0][0]) __iv__return_expr_isButtonPressed = orderMatrix[0][0]; else if(orderMatrix[1][1]<orderMatrix[1][2]) __iv__return_expr_isButtonPressed = orderMatrix[1][2]; else if(1==orderMatrix[0][3]) __iv__return_expr_isButtonPressed = orderMatrix[0][3]; else if(orderMatrix[1][1]>=2) __iv__return_expr_isButtonPressed = orderMatrix[2][0]; else if(1==orderMatrix[2][3]) __iv__return_expr_isButtonPressed = orderMatrix[2][3]; else if(1==orderMatrix[2][2]) __iv__return_expr_isButtonPressed = orderMatrix[2][2]; else if(orderMatrix[2][3]<orderMatrix[0][0]) __iv__return_expr_isButtonPressed = orderMatrix[2][1]; else if(1==orderMatrix[2][1]) __iv__return_expr_isButtonPressed = orderMatrix[2][1]; else if(orderMatrix[2][0]<orderMatrix[0][1]) __iv__return_expr_isButtonPressed = orderMatrix[0][1]; else if(orderMatrix[1][3]<orderMatrix[2][0]) __iv__return_expr_isButtonPressed = orderMatrix[2][0]; else if(1==orderMatrix[0][1]) __iv__return_expr_isButtonPressed = orderMatrix[2][0]; else if(orderMatrix[1][0]<orderMatrix[2][0]) __iv__return_expr_isButtonPressed = orderMatrix[2][0]; else if(1==orderMatrix[2][0]) __iv__return_expr_isButtonPressed = orderMatrix[2][0]; else if(orderMatrix[1][1]<orderMatrix[1][3]) __iv__return_expr_isButtonPressed = orderMatrix[1][3]; else if(orderMatrix[1][1]<orderMatrix[0][2]) __iv__return_expr_isButtonPressed = orderMatrix[0][2]; else __iv__return_expr_isButtonPressed = orderMatrix[1][1]; 
	__CPROVER_assume(__iv__return_expr_isButtonPressed == 0 || __iv__return_expr_isButtonPressed == 1);
	return __iv__return_expr_isButtonPressed;
}
complexity: 17
# constraints: 28

run cbmc: (unwind: 610, timeout: 86400 sec)
cbmc running time: 1280.893 sec

verification results: 
property 'assert((state != 2));' is FALSE alarm.
Counterexample-guided true alarm finding: 
cbmc time (unwind: 610): 4.67 sec
property 'assert((state != 2));' is FALSE alarm.
true alarm finding time: 5.759 sec


synthesize new stub refined by counterexamples (unit timeout: 600 sec)
on each refinement:
refinement time: 202.506 sec

Iteration 26:
signed int __iv__elev_get_button_signal_stub(elev_button_type_t button, signed int floor) {
	signed int __iv__return_expr_elev_get_button_signal;
	signed int __iv__nondet_input_elev_get_button_signal_1 = __VERIFIER_nondet_signed_int();
	__iv__return_expr_elev_get_button_signal = __iv__nondet_input_elev_get_button_signal_1;
	__CPROVER_assume(__iv__return_expr_elev_get_button_signal == 0 || __iv__return_expr_elev_get_button_signal == 1);
	return __iv__return_expr_elev_get_button_signal;
}
complexity: 0
accuracy: 100.00%
coverage: 100.00%
# constraints: 2

signed int __iv__floorIsOrdered_stub(signed int floorNum, signed int motorDir) {
	signed int __iv__return_expr_floorIsOrdered;
	if(motorDir>=2) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[1][2]<(-1)) __iv__return_expr_floorIsOrdered = 0; else if((-1)==orderMatrix[1][2]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if((-1)>=orderMatrix[2][1]) __iv__return_expr_floorIsOrdered = 0; else if((-1)>=orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = orderMatrix[2][0]; else if((-1)>=orderMatrix[1][0]) __iv__return_expr_floorIsOrdered = 0; else if(3==orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = 0; else if((-1)>=orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[0][3]>=2) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[1][0]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[0][0]; else if(orderMatrix[2][2]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[0][0]; else if(orderMatrix[0][3]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[0][0]; else if(floorNum<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(floorNum<orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(floorNum<orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = orderMatrix[0][2]; else if(floorNum<orderMatrix[2][3]) __iv__return_expr_floorIsOrdered = orderMatrix[2][3]; else if(floorNum<orderMatrix[2][2]) __iv__return_expr_floorIsOrdered = orderMatrix[1][0]; else if(floorNum<orderMatrix[1][3]) __iv__return_expr_floorIsOrdered = orderMatrix[1][3]; else if(floorNum<orderMatrix[2][0]) __iv__return_expr_floorIsOrdered = orderMatrix[2][0]; else if(floorNum<orderMatrix[1][0]) __iv__return_expr_floorIsOrdered = orderMatrix[2][1]; else if(floorNum<orderMatrix[1][1]) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[1][2]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[0][0]; else if(orderMatrix[2][3]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[0][0]; else if(orderMatrix[0][2]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[0][0]; else if(orderMatrix[2][0]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[0][0]; else if(orderMatrix[1][3]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[0][0]; else if((-1)==motorDir) __iv__return_expr_floorIsOrdered = orderMatrix[1][0]; else if(floorNum>=3) __iv__return_expr_floorIsOrdered = orderMatrix[1][3]; else if(orderMatrix[2][2]<orderMatrix[1][3]) __iv__return_expr_floorIsOrdered = orderMatrix[1][3]; else if(orderMatrix[2][3]<orderMatrix[1][3]) __iv__return_expr_floorIsOrdered = orderMatrix[1][3]; else if(orderMatrix[1][0]<orderMatrix[1][3]) __iv__return_expr_floorIsOrdered = orderMatrix[1][3]; else if(orderMatrix[1][0]<orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = orderMatrix[0][2]; else if(orderMatrix[1][2]<orderMatrix[1][3]) __iv__return_expr_floorIsOrdered = orderMatrix[1][3]; else if(orderMatrix[0][2]<orderMatrix[1][3]) __iv__return_expr_floorIsOrdered = orderMatrix[1][3]; else if(orderMatrix[2][0]<orderMatrix[1][3]) __iv__return_expr_floorIsOrdered = orderMatrix[1][3]; else if(orderMatrix[0][3]<orderMatrix[1][3]) __iv__return_expr_floorIsOrdered = orderMatrix[1][3]; else if(orderMatrix[1][2]<orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = orderMatrix[0][2]; else if(orderMatrix[2][3]<orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = orderMatrix[0][2]; else if(orderMatrix[2][0]<orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = orderMatrix[0][2]; else if(orderMatrix[0][3]<orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = orderMatrix[0][2]; else if(orderMatrix[2][2]<orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = orderMatrix[0][2]; else if(orderMatrix[1][3]<orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = orderMatrix[0][2]; else if(orderMatrix[2][2]<orderMatrix[2][3]) __iv__return_expr_floorIsOrdered = orderMatrix[2][3]; else if(orderMatrix[0][3]<orderMatrix[2][3]) __iv__return_expr_floorIsOrdered = orderMatrix[2][3]; else if(orderMatrix[0][3]<orderMatrix[2][2]) __iv__return_expr_floorIsOrdered = orderMatrix[2][2]; else if(orderMatrix[2][0]<orderMatrix[2][3]) __iv__return_expr_floorIsOrdered = orderMatrix[2][3]; else if(orderMatrix[1][2]<orderMatrix[2][3]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[1][2]<orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[0][3]<orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[2][3]<orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[0][3]<orderMatrix[2][1]) __iv__return_expr_floorIsOrdered = orderMatrix[2][1]; else if(orderMatrix[2][0]<orderMatrix[2][1]) __iv__return_expr_floorIsOrdered = orderMatrix[2][1]; else if(orderMatrix[2][2]<orderMatrix[0][3]) __iv__return_expr_floorIsOrdered = orderMatrix[2][0]; else if(orderMatrix[1][2]<orderMatrix[2][1]) __iv__return_expr_floorIsOrdered = orderMatrix[2][0]; else if(orderMatrix[1][2]<orderMatrix[2][0]) __iv__return_expr_floorIsOrdered = orderMatrix[2][0]; else if(orderMatrix[2][2]<orderMatrix[2][0]) __iv__return_expr_floorIsOrdered = orderMatrix[2][0]; else if(orderMatrix[0][3]<orderMatrix[1][0]) __iv__return_expr_floorIsOrdered = orderMatrix[1][0]; else if(orderMatrix[2][2]<orderMatrix[1][1]) __iv__return_expr_floorIsOrdered = orderMatrix[1][1]; else if(orderMatrix[1][2]<motorDir) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[1][2]<orderMatrix[1][1]) __iv__return_expr_floorIsOrdered = orderMatrix[1][0]; else if(orderMatrix[2][0]<orderMatrix[0][3]) __iv__return_expr_floorIsOrdered = orderMatrix[1][0]; else if(orderMatrix[2][3]<orderMatrix[2][0]) __iv__return_expr_floorIsOrdered = orderMatrix[2][0]; else if(motorDir<orderMatrix[1][1]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[1][3]<orderMatrix[2][1]) __iv__return_expr_floorIsOrdered = orderMatrix[2][3]; else if(orderMatrix[1][3]<orderMatrix[1][0]) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[1][0]<orderMatrix[2][3]) __iv__return_expr_floorIsOrdered = 0; else if(motorDir<orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[1][1]<orderMatrix[2][1]) __iv__return_expr_floorIsOrdered = orderMatrix[0][0]; else if(motorDir<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = 0; else if(motorDir<orderMatrix[1][3]) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[1][1]<orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[1][1]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[0][0]; else if(orderMatrix[0][0]<orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[0][0]<orderMatrix[1][3]) __iv__return_expr_floorIsOrdered = orderMatrix[1][3]; else if(orderMatrix[2][1]==floorNum) __iv__return_expr_floorIsOrdered = orderMatrix[0][0]; else if(orderMatrix[1][2]==floorNum) __iv__return_expr_floorIsOrdered = 0; else __iv__return_expr_floorIsOrdered = orderMatrix[1][2]; 
	__CPROVER_assume(__iv__return_expr_floorIsOrdered == 0 || __iv__return_expr_floorIsOrdered == 1);
	return __iv__return_expr_floorIsOrdered;
}
complexity: 76
# constraints: 170

signed int __iv__isButtonPressed_stub() {
	signed int __iv__return_expr_isButtonPressed;
	if(orderMatrix[2][1]>=2) __iv__return_expr_isButtonPressed = 0; else if((-1)>=orderMatrix[2][1]) __iv__return_expr_isButtonPressed = 0; else if(1==orderMatrix[0][0]) __iv__return_expr_isButtonPressed = orderMatrix[0][0]; else if(orderMatrix[1][1]<orderMatrix[1][2]) __iv__return_expr_isButtonPressed = orderMatrix[1][2]; else if(1==orderMatrix[0][3]) __iv__return_expr_isButtonPressed = orderMatrix[0][3]; else if(orderMatrix[1][1]>=2) __iv__return_expr_isButtonPressed = orderMatrix[2][0]; else if(1==orderMatrix[2][3]) __iv__return_expr_isButtonPressed = orderMatrix[2][3]; else if(1==orderMatrix[2][2]) __iv__return_expr_isButtonPressed = orderMatrix[2][2]; else if(orderMatrix[2][3]<orderMatrix[0][0]) __iv__return_expr_isButtonPressed = orderMatrix[2][1]; else if(1==orderMatrix[2][1]) __iv__return_expr_isButtonPressed = orderMatrix[2][1]; else if(orderMatrix[2][0]<orderMatrix[0][1]) __iv__return_expr_isButtonPressed = orderMatrix[0][1]; else if(orderMatrix[1][3]<orderMatrix[2][0]) __iv__return_expr_isButtonPressed = orderMatrix[2][0]; else if(1==orderMatrix[0][1]) __iv__return_expr_isButtonPressed = orderMatrix[2][0]; else if(orderMatrix[1][0]<orderMatrix[2][0]) __iv__return_expr_isButtonPressed = orderMatrix[2][0]; else if(1==orderMatrix[2][0]) __iv__return_expr_isButtonPressed = orderMatrix[2][0]; else if(orderMatrix[1][1]<orderMatrix[1][3]) __iv__return_expr_isButtonPressed = orderMatrix[1][3]; else if(orderMatrix[1][1]<orderMatrix[0][2]) __iv__return_expr_isButtonPressed = orderMatrix[0][2]; else __iv__return_expr_isButtonPressed = orderMatrix[1][1]; 
	__CPROVER_assume(__iv__return_expr_isButtonPressed == 0 || __iv__return_expr_isButtonPressed == 1);
	return __iv__return_expr_isButtonPressed;
}
complexity: 17
# constraints: 28

run cbmc: (unwind: 610, timeout: 86400 sec)
cbmc running time: 1520.584 sec

verification results: 
property 'assert((state != 2));' is FALSE alarm.
Counterexample-guided true alarm finding: 
cbmc time (unwind: 610): 4.711 sec
property 'assert((state != 2));' is FALSE alarm.
true alarm finding time: 5.964 sec


synthesize new stub refined by counterexamples (unit timeout: 600 sec)
on each refinement:
refinement time: 186.08 sec

Iteration 27:
signed int __iv__elev_get_button_signal_stub(elev_button_type_t button, signed int floor) {
	signed int __iv__return_expr_elev_get_button_signal;
	signed int __iv__nondet_input_elev_get_button_signal_1 = __VERIFIER_nondet_signed_int();
	__iv__return_expr_elev_get_button_signal = __iv__nondet_input_elev_get_button_signal_1;
	__CPROVER_assume(__iv__return_expr_elev_get_button_signal == 0 || __iv__return_expr_elev_get_button_signal == 1);
	return __iv__return_expr_elev_get_button_signal;
}
complexity: 0
accuracy: 100.00%
coverage: 100.00%
# constraints: 2

signed int __iv__floorIsOrdered_stub(signed int floorNum, signed int motorDir) {
	signed int __iv__return_expr_floorIsOrdered;
	if((-1)==orderMatrix[1][2]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(motorDir>=2) __iv__return_expr_floorIsOrdered = 0; else if((-1)>=orderMatrix[2][1]) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[1][2]<(-1)) __iv__return_expr_floorIsOrdered = 0; else if((-1)>=orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = orderMatrix[2][0]; else if((-1)>=orderMatrix[1][0]) __iv__return_expr_floorIsOrdered = 0; else if(3==orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = 0; else if((-1)>=orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[0][3]>=2) __iv__return_expr_floorIsOrdered = motorDir; else if(floorNum<orderMatrix[2][0]) __iv__return_expr_floorIsOrdered = orderMatrix[2][0]; else if(orderMatrix[1][0]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[0][0]; else if(floorNum<orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(floorNum<orderMatrix[1][3]) __iv__return_expr_floorIsOrdered = orderMatrix[1][3]; else if(floorNum<orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = orderMatrix[0][2]; else if(floorNum<orderMatrix[2][3]) __iv__return_expr_floorIsOrdered = orderMatrix[2][3]; else if(floorNum<orderMatrix[2][2]) __iv__return_expr_floorIsOrdered = orderMatrix[2][2]; else if(floorNum>=orderMatrix[1][0]) if(floorNum<orderMatrix[1][1]) __iv__return_expr_floorIsOrdered = motorDir; else if(orderMatrix[2][2]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[0][0]; else if(orderMatrix[0][3]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[0][0]; else if(orderMatrix[2][0]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[0][0]; else if(orderMatrix[1][2]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[0][0]; else if(orderMatrix[1][3]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[0][0]; else if(orderMatrix[0][2]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = motorDir; else if(orderMatrix[2][3]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = orderMatrix[0][0]; else if(floorNum>=3) __iv__return_expr_floorIsOrdered = orderMatrix[1][3]; else if(orderMatrix[2][2]<orderMatrix[1][3]) __iv__return_expr_floorIsOrdered = orderMatrix[1][3]; else if(orderMatrix[0][3]<orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = motorDir; else if(orderMatrix[2][0]<orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[2][2]<orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = motorDir; else if(orderMatrix[2][3]<orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = motorDir; else if(orderMatrix[1][2]<orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = motorDir; else if(orderMatrix[1][3]<orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[1][0]<orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else if(orderMatrix[2][1]<orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = motorDir; else if(orderMatrix[0][0]<orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = motorDir; else if(orderMatrix[0][1]<floorNum) if(orderMatrix[1][1]<orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = motorDir; else if(1==orderMatrix[0][1]) __iv__return_expr_floorIsOrdered = motorDir; else if(orderMatrix[1][0]<orderMatrix[1][3]) __iv__return_expr_floorIsOrdered = orderMatrix[1][3]; else if(orderMatrix[1][0]<orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = orderMatrix[0][2]; else if(orderMatrix[1][2]<orderMatrix[1][3]) __iv__return_expr_floorIsOrdered = orderMatrix[1][3]; else if(orderMatrix[1][2]<orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = orderMatrix[0][2]; else if(orderMatrix[2][3]<orderMatrix[1][3]) __iv__return_expr_floorIsOrdered = orderMatrix[1][3]; else if(orderMatrix[2][3]<orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = orderMatrix[0][2]; else if(orderMatrix[0][2]<orderMatrix[1][3]) __iv__return_expr_floorIsOrdered = orderMatrix[1][3]; else if(orderMatrix[2][0]<orderMatrix[1][3]) __iv__return_expr_floorIsOrdered = motorDir; else if(orderMatrix[0][3]<orderMatrix[1][3]) __iv__return_expr_floorIsOrdered = motorDir; else if(orderMatrix[2][0]<orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = orderMatrix[0][2]; else if(orderMatrix[0][3]<orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = orderMatrix[0][2]; else if(orderMatrix[2][2]<orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = motorDir; else if(orderMatrix[2][2]<orderMatrix[2][3]) __iv__return_expr_floorIsOrdered = motorDir; else if(orderMatrix[1][2]<orderMatrix[2][3]) __iv__return_expr_floorIsOrdered = orderMatrix[2][3]; else if(orderMatrix[0][3]<orderMatrix[2][3]) __iv__return_expr_floorIsOrdered = motorDir; else if(orderMatrix[2][0]<orderMatrix[2][3]) __iv__return_expr_floorIsOrdered = motorDir; else if(orderMatrix[1][0]<orderMatrix[2][3]) __iv__return_expr_floorIsOrdered = motorDir; else if(orderMatrix[0][3]<orderMatrix[2][2]) __iv__return_expr_floorIsOrdered = motorDir; else if(orderMatrix[1][0]<orderMatrix[2][2]) __iv__return_expr_floorIsOrdered = motorDir; else if(orderMatrix[1][0]<orderMatrix[1][1]) __iv__return_expr_floorIsOrdered = orderMatrix[1][1]; else if(orderMatrix[1][2]<orderMatrix[2][1]) __iv__return_expr_floorIsOrdered = motorDir; else if(orderMatrix[1][2]<orderMatrix[2][0]) __iv__return_expr_floorIsOrdered = orderMatrix[2][0]; else if(orderMatrix[2][2]<orderMatrix[0][3]) __iv__return_expr_floorIsOrdered = orderMatrix[2][1]; else if(orderMatrix[1][2]<motorDir) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[1][2]<orderMatrix[1][1]) __iv__return_expr_floorIsOrdered = orderMatrix[0][3]; else if(orderMatrix[2][0]<orderMatrix[0][3]) __iv__return_expr_floorIsOrdered = motorDir; else if(orderMatrix[2][3]<orderMatrix[0][3]) __iv__return_expr_floorIsOrdered = motorDir; else if(orderMatrix[2][2]<orderMatrix[2][1]) __iv__return_expr_floorIsOrdered = orderMatrix[2][0]; else if(orderMatrix[1][0]<orderMatrix[2][0]) __iv__return_expr_floorIsOrdered = motorDir; else if(orderMatrix[2][2]<orderMatrix[2][0]) __iv__return_expr_floorIsOrdered = orderMatrix[2][0]; else if(orderMatrix[0][2]<orderMatrix[2][1]) __iv__return_expr_floorIsOrdered = motorDir; else if(orderMatrix[0][2]<orderMatrix[2][3]) __iv__return_expr_floorIsOrdered = motorDir; else if(orderMatrix[1][3]<orderMatrix[2][1]) __iv__return_expr_floorIsOrdered = motorDir; else if(orderMatrix[1][3]<orderMatrix[0][2]) __iv__return_expr_floorIsOrdered = orderMatrix[0][2]; else if(orderMatrix[0][0]<orderMatrix[2][1]) __iv__return_expr_floorIsOrdered = motorDir; else if(orderMatrix[1][1]<orderMatrix[2][1]) __iv__return_expr_floorIsOrdered = orderMatrix[0][0]; else if(motorDir>=orderMatrix[2][1]) if(motorDir>=orderMatrix[0][0]) if(motorDir>=orderMatrix[2][0]) if(motorDir>=orderMatrix[1][1]) if(orderMatrix[2][2]<orderMatrix[1][1]) __iv__return_expr_floorIsOrdered = 0; else if(orderMatrix[2][0]==orderMatrix[1][0]) if(orderMatrix[1][1]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = motorDir; else if(orderMatrix[0][0]<orderMatrix[1][3]) __iv__return_expr_floorIsOrdered = motorDir; else if(orderMatrix[2][1]<orderMatrix[0][0]) __iv__return_expr_floorIsOrdered = motorDir; else if(2==floorNum) __iv__return_expr_floorIsOrdered = motorDir; else __iv__return_expr_floorIsOrdered = orderMatrix[0][0]; else __iv__return_expr_floorIsOrdered = motorDir; else __iv__return_expr_floorIsOrdered = orderMatrix[1][1]; else __iv__return_expr_floorIsOrdered = motorDir; else __iv__return_expr_floorIsOrdered = motorDir; else __iv__return_expr_floorIsOrdered = orderMatrix[1][1]; else __iv__return_expr_floorIsOrdered = orderMatrix[0][1]; else __iv__return_expr_floorIsOrdered = orderMatrix[1][0]; 
	__CPROVER_assume(__iv__return_expr_floorIsOrdered == 0 || __iv__return_expr_floorIsOrdered == 1);
	return __iv__return_expr_floorIsOrdered;
}
complexity: 85
# constraints: 176

signed int __iv__isButtonPressed_stub() {
	signed int __iv__return_expr_isButtonPressed;
	if(orderMatrix[2][1]>=2) __iv__return_expr_isButtonPressed = 0; else if((-1)>=orderMatrix[2][1]) __iv__return_expr_isButtonPressed = 0; else if(1==orderMatrix[0][0]) __iv__return_expr_isButtonPressed = orderMatrix[0][0]; else if(orderMatrix[1][1]<orderMatrix[1][2]) __iv__return_expr_isButtonPressed = orderMatrix[1][2]; else if(1==orderMatrix[0][3]) __iv__return_expr_isButtonPressed = orderMatrix[0][3]; else if(orderMatrix[1][1]>=2) __iv__return_expr_isButtonPressed = orderMatrix[2][0]; else if(1==orderMatrix[2][3]) __iv__return_expr_isButtonPressed = orderMatrix[2][3]; else if(1==orderMatrix[2][2]) __iv__return_expr_isButtonPressed = orderMatrix[2][2]; else if(orderMatrix[2][3]<orderMatrix[0][0]) __iv__return_expr_isButtonPressed = orderMatrix[2][1]; else if(1==orderMatrix[2][1]) __iv__return_expr_isButtonPressed = orderMatrix[2][1]; else if(orderMatrix[2][0]<orderMatrix[0][1]) __iv__return_expr_isButtonPressed = orderMatrix[0][1]; else if(orderMatrix[1][3]<orderMatrix[2][0]) __iv__return_expr_isButtonPressed = orderMatrix[2][0]; else if(1==orderMatrix[0][1]) __iv__return_expr_isButtonPressed = orderMatrix[2][0]; else if(orderMatrix[1][0]<orderMatrix[2][0]) __iv__return_expr_isButtonPressed = orderMatrix[2][0]; else if(1==orderMatrix[2][0]) __iv__return_expr_isButtonPressed = orderMatrix[2][0]; else if(orderMatrix[1][1]<orderMatrix[1][3]) __iv__return_expr_isButtonPressed = orderMatrix[1][3]; else if(orderMatrix[1][1]<orderMatrix[0][2]) __iv__return_expr_isButtonPressed = orderMatrix[0][2]; else __iv__return_expr_isButtonPressed = orderMatrix[1][1]; 
	__CPROVER_assume(__iv__return_expr_isButtonPressed == 0 || __iv__return_expr_isButtonPressed == 1);
	return __iv__return_expr_isButtonPressed;
}
complexity: 17
# constraints: 28

run cbmc: (unwind: 610, timeout: 86400 sec)
cbmc running time: 2003.349 sec

verification results: 
property 'assert((state != 2));' is TRUE alarm.

total CBMC running time: 38299.6 sec
total true alarm finding time: 164.736 sec
total refinement time: 2417.11 sec, # of refinements: 27
peak memory usage: 14224.02 MB