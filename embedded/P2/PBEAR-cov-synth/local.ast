typedef unsigned char __CPROVER_bool;
typedef unsigned int __CPROVER_size_t;
typedef unsigned int size_t;
typedef unsigned int time_t;
typedef unsigned short int wchar_t;
typedef signed long int clock_t;
typedef struct comedi_t comedi_t;
typedef enum anonymous elevState;
typedef enum tag_elev_lamp_type elev_button_type_t;
typedef enum tag_elev_motor_direction elev_motor_direction_t;
void _iv_() {myFloor = __VERIFIER_nondet_signed_int();
__CPROVER_assume(0 <= myFloor && myFloor <= 2);
signed int return_value_elev_init;
__iv__current_func_call = 2;
return_value_elev_init=elev_init();
return_value_elev_init == 0;
__iv__current_func_call = 3;
initStates();
!(1 != 0);
__iv__current_func_call = 4;
stateController();
__iv__current_func_call = 5;
update_prop_automata();
__iv__current_func_call = 6;
check_property();
!(1 != 0);
__iv__current_func_call = 4;
stateController();
__iv__current_func_call = 5;
update_prop_automata();
__iv__current_func_call = 6;
check_property();
__CPROVER_assume(FALSE);
return __VERIFIER_nondet_signed_int();
signed int i;
signed int return_value_io_init;
__iv__current_func_call = 64;
return_value_io_init=io_init();
!(return_value_io_init == 0);
return 0;
i = 0;
i >= 4;
i == 0;
__iv__current_func_call = 65;
elev_set_button_lamp((elev_button_type_t)1, i, 0);
i == 3;
__iv__current_func_call = 66;
elev_set_button_lamp((elev_button_type_t)0, i, 0);
__iv__current_func_call = 67;
elev_set_button_lamp((elev_button_type_t)2, i, 0);
i = i + 1;
i >= 4;
i == 0;
__iv__current_func_call = 65;
elev_set_button_lamp((elev_button_type_t)1, i, 0);
i == 3;
__iv__current_func_call = 66;
elev_set_button_lamp((elev_button_type_t)0, i, 0);
__iv__current_func_call = 67;
elev_set_button_lamp((elev_button_type_t)2, i, 0);
i = i + 1;
__CPROVER_assume(FALSE);
__iv__current_func_call = 68;
elev_set_floor_indicator(0);
return 1;
signed int return_value_elev_get_floor_sensor_signal;
signed int return_value_elev_get_stop_signal;
signed int return_value_elev_get_floor_sensor_signal_0;
(signed int)currentState == 0;
(signed int)currentState == 1;
(signed int)currentState == 2;
(signed int)currentState == 3;
(signed int)currentState == -1;
return 0;
currentState = (elevState)-1;
__iv__current_func_call = 57;
elev_set_motor_direction((elev_motor_direction_t)0);
currentState = (elevState)-1;
__iv__current_func_call = 58;
elev_set_motor_direction((elev_motor_direction_t)0);
__iv__current_func_call = 59;
return_value_elev_get_floor_sensor_signal=elev_get_floor_sensor_signal();
!(return_value_elev_get_floor_sensor_signal == -1);
currentState = (elevState)1;
currentState = (elevState)-1;
currentState = (elevState)1;
__iv__current_func_call = 60;
flushOrders();
__iv__current_func_call = 61;
elev_set_motor_direction((elev_motor_direction_t)0);
__iv__current_func_call = 62;
return_value_elev_get_stop_signal=elev_get_stop_signal();
return_value_elev_get_stop_signal == 0;
1 != 0;
__iv__current_func_call = 62;
return_value_elev_get_stop_signal=elev_get_stop_signal();
return_value_elev_get_stop_signal == 0;
1 != 0;
__CPROVER_assume(!(1 != 0));
__iv__current_func_call = 63;
return_value_elev_get_floor_sensor_signal_0=elev_get_floor_sensor_signal();
!(return_value_elev_get_floor_sensor_signal_0 == -1);
currentState = (elevState)1;
return -1;
currentState = (elevState)3;
return 1;
return -1;
long double deltaTime;
clock_t return_value_clock;
__iv__current_func_call = 56;
return_value_clock=clock();
deltaTime = (long double)(return_value_clock - timerStarted) / 1.0l;
!(deltaTime >= (long double)duration && !(timerActive == 0));
return 1;
return 0;
signed int return_value_elev_get_floor_sensor_signal_0;
signed int return_value_elev_get_floor_sensor_signal;
__iv__current_func_call = 52;
return_value_elev_get_floor_sensor_signal_0=elev_get_floor_sensor_signal();
!(return_value_elev_get_floor_sensor_signal_0 == -1);
__iv__current_func_call = 53;
elev_set_motor_direction((elev_motor_direction_t)1);
__iv__current_func_call = 54;
return_value_elev_get_floor_sensor_signal=elev_get_floor_sensor_signal();
!(return_value_elev_get_floor_sensor_signal == -1);
1 != 0;
__iv__current_func_call = 54;
return_value_elev_get_floor_sensor_signal=elev_get_floor_sensor_signal();
!(return_value_elev_get_floor_sensor_signal == -1);
1 != 0;
__CPROVER_assume(!(1 != 0));
__iv__current_func_call = 55;
elev_set_motor_direction((elev_motor_direction_t)0);
previousState = (elevState)1;
currentState = (elevState)1;
unsigned int data;
data = 0u;
__iv__current_func_call = 51;
comedi_dio_read(it_g, channel >> 8, channel & 0xFF, (signed int *)&data);
return (signed int)data;
signed int button;
button = 0;
button >= 3;
signed int floorNum;
floorNum = 0;
floorNum >= 4;
signed int return_value_elev_get_button_signal;
__iv__current_func_call = 49;
return_value_elev_get_button_signal=elev_get_button_signal((elev_button_type_t)button, floorNum);
return_value_elev_get_button_signal == 0;
orderMatrix[(signed long int)button][(signed long int)floorNum] = 1;
__iv__current_func_call = 50;
elev_set_button_lamp((elev_button_type_t)button, floorNum, 1);
floorNum = floorNum + 1;
floorNum >= 4;
signed int return_value_elev_get_button_signal;
__iv__current_func_call = 49;
return_value_elev_get_button_signal=elev_get_button_signal((elev_button_type_t)button, floorNum);
return_value_elev_get_button_signal == 0;
orderMatrix[(signed long int)button][(signed long int)floorNum] = 1;
__iv__current_func_call = 50;
elev_set_button_lamp((elev_button_type_t)button, floorNum, 1);
floorNum = floorNum + 1;
__CPROVER_assume(FALSE);
button = button + 1;
button >= 3;
signed int floorNum;
floorNum = 0;
floorNum >= 4;
signed int return_value_elev_get_button_signal;
__iv__current_func_call = 49;
return_value_elev_get_button_signal=elev_get_button_signal((elev_button_type_t)button, floorNum);
return_value_elev_get_button_signal == 0;
orderMatrix[(signed long int)button][(signed long int)floorNum] = 1;
__iv__current_func_call = 50;
elev_set_button_lamp((elev_button_type_t)button, floorNum, 1);
floorNum = floorNum + 1;
floorNum >= 4;
signed int return_value_elev_get_button_signal;
__iv__current_func_call = 49;
return_value_elev_get_button_signal=elev_get_button_signal((elev_button_type_t)button, floorNum);
return_value_elev_get_button_signal == 0;
orderMatrix[(signed long int)button][(signed long int)floorNum] = 1;
__iv__current_func_call = 50;
elev_set_button_lamp((elev_button_type_t)button, floorNum, 1);
floorNum = floorNum + 1;
__CPROVER_assume(FALSE);
button = button + 1;
__CPROVER_assume(FALSE);
signed int floorBeyond;
!(orderMatrix[(signed long int)2][(signed long int)floorNum] == 1);
return 1;
!(motorDir == 0);
__CPROVER_bool tmp_if_expr;
!(orderMatrix[(signed long int)0][(signed long int)floorNum] == 1);
tmp_if_expr = 1 != 0;
tmp_if_expr = (orderMatrix[(signed long int)1][(signed long int)floorNum] == 1 ? 1 : (signed int)(0 != 0)) != 0;
!tmp_if_expr;
return 1;
!(motorDir == 1);
floorBeyond = 0;
signed int button;
button = 0;
button >= 2;
signed int floorIsOrdered__1__3__1__1__1__i;
floorIsOrdered__1__3__1__1__1__i = floorNum + 1;
floorIsOrdered__1__3__1__1__1__i >= 4;
floorBeyond = floorBeyond + orderMatrix[(signed long int)button][(signed long int)floorIsOrdered__1__3__1__1__1__i];
floorIsOrdered__1__3__1__1__1__i = floorIsOrdered__1__3__1__1__1__i + 1;
floorIsOrdered__1__3__1__1__1__i >= 4;
floorBeyond = floorBeyond + orderMatrix[(signed long int)button][(signed long int)floorIsOrdered__1__3__1__1__1__i];
floorIsOrdered__1__3__1__1__1__i = floorIsOrdered__1__3__1__1__1__i + 1;
__CPROVER_assume(FALSE);
button = button + 1;
button >= 2;
signed int floorIsOrdered__1__3__1__1__1__i;
floorIsOrdered__1__3__1__1__1__i = floorNum + 1;
floorIsOrdered__1__3__1__1__1__i >= 4;
floorBeyond = floorBeyond + orderMatrix[(signed long int)button][(signed long int)floorIsOrdered__1__3__1__1__1__i];
floorIsOrdered__1__3__1__1__1__i = floorIsOrdered__1__3__1__1__1__i + 1;
floorIsOrdered__1__3__1__1__1__i >= 4;
floorBeyond = floorBeyond + orderMatrix[(signed long int)button][(signed long int)floorIsOrdered__1__3__1__1__1__i];
floorIsOrdered__1__3__1__1__1__i = floorIsOrdered__1__3__1__1__1__i + 1;
__CPROVER_assume(FALSE);
button = button + 1;
__CPROVER_assume(FALSE);
!(orderMatrix[(signed long int)0][(signed long int)floorNum] == 1);
return 1;
!(orderMatrix[(signed long int)1][(signed long int)floorNum] == 0);
floorBeyond == 0;
return 1;
!(motorDir == -1);
floorBeyond = 0;
signed int floorIsOrdered__1__4__1__button;
floorIsOrdered__1__4__1__button = 0;
floorIsOrdered__1__4__1__button >= 2;
signed int i;
i = 0;
i >= floorNum;
floorBeyond = floorBeyond + orderMatrix[(signed long int)floorIsOrdered__1__4__1__button][(signed long int)i];
i = i + 1;
i >= floorNum;
floorBeyond = floorBeyond + orderMatrix[(signed long int)floorIsOrdered__1__4__1__button][(signed long int)i];
i = i + 1;
__CPROVER_assume(FALSE);
floorIsOrdered__1__4__1__button = floorIsOrdered__1__4__1__button + 1;
floorIsOrdered__1__4__1__button >= 2;
signed int i;
i = 0;
i >= floorNum;
floorBeyond = floorBeyond + orderMatrix[(signed long int)floorIsOrdered__1__4__1__button][(signed long int)i];
i = i + 1;
i >= floorNum;
floorBeyond = floorBeyond + orderMatrix[(signed long int)floorIsOrdered__1__4__1__button][(signed long int)i];
i = i + 1;
__CPROVER_assume(FALSE);
floorIsOrdered__1__4__1__button = floorIsOrdered__1__4__1__button + 1;
__CPROVER_assume(FALSE);
!(orderMatrix[(signed long int)1][(signed long int)floorNum] == 1);
return 1;
!(orderMatrix[(signed long int)0][(signed long int)floorNum] == 0);
floorBeyond == 0;
return 1;
return 0;
clock_t return_value_clock;
!(state == 0);
__iv__current_func_call = 46;
timer=clock();
!(orderMatrix[(signed long int)0][(signed long int)myFloor] == 1);
state = 1;
!(state == 1);
(orderMatrix[(signed long int)0][(signed long int)myFloor] == 0 ? 1 : (previousMainFloor == myFloor && (signed int)previousState == 3 ? 1 : 0)) != 0;
state = 0;
__iv__current_func_call = 47;
return_value_clock=clock();
!(return_value_clock + -timer >= 600l);
state = 2;
signed int status;
signed int return_value___VERIFIER_nondet_signed_int;
return_value___VERIFIER_nondet_signed_int = __VERIFIER_nondet_signed_int();
status = return_value___VERIFIER_nondet_signed_int;
__CPROVER_assume(0 <= status && status <= 1);
return status;
signed int return_value_isTimerActive;
__iv__current_func_call = 36;
return_value_isTimerActive=isTimerActive();
return_value_isTimerActive == 0;
elev_motor == 0;
signed int return_value_getTimerStatus;
__iv__current_func_call = 37;
return_value_getTimerStatus=getTimerStatus();
return_value_getTimerStatus == 0;
__iv__current_func_call = 38;
timerDeactivate();
elev_floor = elev_floor + elev_motor;
__CPROVER_assume(0 <= elev_floor && elev_floor < 4);
return elev_floor;
return -1;
return elev_floor;
signed int i;
signed int status;
status = 0;
__iv__current_func_call = 31;
it_g=comedi_open("/dev/comedi0");
!(it_g == (comedi_t *)(void *)0);
return 0;
i = 0;
i >= 8;
signed int return_value_comedi_dio_config;
__iv__current_func_call = 32;
return_value_comedi_dio_config=comedi_dio_config(it_g, 2, i, 0);
status = status | return_value_comedi_dio_config;
signed int return_value_comedi_dio_config_0;
__iv__current_func_call = 33;
return_value_comedi_dio_config_0=comedi_dio_config(it_g, 3, i, 1);
status = status | return_value_comedi_dio_config_0;
signed int return_value_comedi_dio_config_1;
__iv__current_func_call = 34;
return_value_comedi_dio_config_1=comedi_dio_config(it_g, 3, i + 8, 1);
status = status | return_value_comedi_dio_config_1;
signed int return_value_comedi_dio_config_2;
__iv__current_func_call = 35;
return_value_comedi_dio_config_2=comedi_dio_config(it_g, 3, i + 16, 0);
status = status | return_value_comedi_dio_config_2;
i = i + 1;
i >= 8;
signed int return_value_comedi_dio_config;
__iv__current_func_call = 32;
return_value_comedi_dio_config=comedi_dio_config(it_g, 2, i, 0);
status = status | return_value_comedi_dio_config;
signed int return_value_comedi_dio_config_0;
__iv__current_func_call = 33;
return_value_comedi_dio_config_0=comedi_dio_config(it_g, 3, i, 1);
status = status | return_value_comedi_dio_config_0;
signed int return_value_comedi_dio_config_1;
__iv__current_func_call = 34;
return_value_comedi_dio_config_1=comedi_dio_config(it_g, 3, i + 8, 1);
status = status | return_value_comedi_dio_config_1;
signed int return_value_comedi_dio_config_2;
__iv__current_func_call = 35;
return_value_comedi_dio_config_2=comedi_dio_config(it_g, 3, i + 16, 0);
status = status | return_value_comedi_dio_config_2;
i = i + 1;
__CPROVER_assume(FALSE);
return (signed int)(status == 0);
__CPROVER_assume(currentFloor >= 0);
__CPROVER_assume(currentFloor < 4);
signed int return_value_elev_get_floor_sensor_signal;
__iv__current_func_call = 30;
return_value_elev_get_floor_sensor_signal=elev_get_floor_sensor_signal();
!(return_value_elev_get_floor_sensor_signal == -1);
currentFloor = (signed int)((double)currentFloor + (double)lastDirection / 2.0);
signed int upOrders;
upOrders = 0;
signed int downOrders;
downOrders = 0;
signed int button;
button = 0;
button >= 3;
signed int floorNum;
floorNum = 0;
floorNum >= 4;
!(orderMatrix[(signed long int)button][(signed long int)floorNum] == 1);
currentFloor >= floorNum;
upOrders = upOrders + 1;
downOrders = downOrders + 1;
floorNum = floorNum + 1;
floorNum >= 4;
!(orderMatrix[(signed long int)button][(signed long int)floorNum] == 1);
currentFloor >= floorNum;
upOrders = upOrders + 1;
downOrders = downOrders + 1;
floorNum = floorNum + 1;
__CPROVER_assume(FALSE);
button = button + 1;
button >= 3;
signed int floorNum;
floorNum = 0;
floorNum >= 4;
!(orderMatrix[(signed long int)button][(signed long int)floorNum] == 1);
currentFloor >= floorNum;
upOrders = upOrders + 1;
downOrders = downOrders + 1;
floorNum = floorNum + 1;
floorNum >= 4;
!(orderMatrix[(signed long int)button][(signed long int)floorNum] == 1);
currentFloor >= floorNum;
upOrders = upOrders + 1;
downOrders = downOrders + 1;
floorNum = floorNum + 1;
__CPROVER_assume(FALSE);
button = button + 1;
__CPROVER_assume(FALSE);
downOrders >= upOrders;
return 1;
return -1;
signed int button;
button = 0;
button >= 3;
signed int floorNum;
floorNum = 0;
floorNum >= 4;
!(orderMatrix[(signed long int)button][(signed long int)floorNum] == 1);
return 1;
floorNum = floorNum + 1;
floorNum >= 4;
!(orderMatrix[(signed long int)button][(signed long int)floorNum] == 1);
return 1;
floorNum = floorNum + 1;
__CPROVER_assume(FALSE);
button = button + 1;
button >= 3;
signed int floorNum;
floorNum = 0;
floorNum >= 4;
!(orderMatrix[(signed long int)button][(signed long int)floorNum] == 1);
return 1;
floorNum = floorNum + 1;
floorNum >= 4;
!(orderMatrix[(signed long int)button][(signed long int)floorNum] == 1);
return 1;
floorNum = floorNum + 1;
__CPROVER_assume(FALSE);
button = button + 1;
__CPROVER_assume(FALSE);
return 0;
__iv__current_func_call = 8;
setOrdersHigh();
__iv__current_func_call = 9;
currentFloorLocation=elev_get_floor_sensor_signal();
signed int return_value_isButtonPressed;
signed int return_value_floorIsOrdered;
signed int return_value_isTimerActive;
signed int return_value_elev_get_floor_sensor_signal;
signed int return_value_isTimerActive_0;
signed int return_value_getTimerStatus;
!(!(currentFloorLocation == -1) || !(lastFloorAfterEmergency == -1));
lastFloorAfterEmergency == -1;
previousMainFloor = lastFloorAfterEmergency;
previousMainFloor = currentFloorLocation;
__iv__current_func_call = 10;
elev_set_floor_indicator(previousMainFloor);
(signed int)previousState == 0;
(signed int)previousState == 1;
(signed int)previousState == 2;
(signed int)previousState == 3;
(signed int)previousState == -1;
__iv__current_func_call = 11;
return_value_isButtonPressed=isButtonPressed();
return_value_isButtonPressed == 0;
__iv__current_func_call = 12;
motorDirection=setDirection(previousMainFloor, motorDirection);
__iv__current_func_call = 13;
elev_set_motor_direction((elev_motor_direction_t)motorDirection);
previousState = (elevState)2;
__iv__current_func_call = 14;
return_value_floorIsOrdered=floorIsOrdered(previousMainFloor, motorDirection);
return_value_floorIsOrdered == 0;
previousState = (elevState)3;
lastFloorAfterEmergency = -1;
__iv__current_func_call = 15;
elev_set_motor_direction((elev_motor_direction_t)0);
motorDirection = 0;
__iv__current_func_call = 16;
return_value_isTimerActive=isTimerActive();
!(return_value_isTimerActive == 0);
__iv__current_func_call = 17;
return_value_elev_get_floor_sensor_signal=elev_get_floor_sensor_signal();
return_value_elev_get_floor_sensor_signal == -1;
__iv__current_func_call = 18;
startTimer(3.0);
__iv__current_func_call = 19;
return_value_isTimerActive_0=isTimerActive();
!(return_value_isTimerActive_0 == 1);
signed int return_value_floorIsOrdered_0;
__iv__current_func_call = 20;
return_value_floorIsOrdered_0=floorIsOrdered(previousMainFloor, motorDirection);
return_value_floorIsOrdered_0 == 0;
__iv__current_func_call = 21;
startTimer(3.0);
__iv__current_func_call = 22;
removeFromOrderMatrix(previousMainFloor);
__iv__current_func_call = 23;
return_value_getTimerStatus=getTimerStatus();
return_value_getTimerStatus == 0;
previousState = (elevState)1;
__iv__current_func_call = 24;
timerDeactivate();
signed int return_value_elev_get_stop_signal;
__iv__current_func_call = 25;
return_value_elev_get_stop_signal=elev_get_stop_signal();
return_value_elev_get_stop_signal == 0;
__CPROVER_assume(0 != 0);
signed int return_value_emergencyStopHandler;
__iv__current_func_call = 27;
return_value_emergencyStopHandler=emergencyStopHandler();
!(return_value_emergencyStopHandler == -1);
previousState = (elevState)1;
lastFloorAfterEmergency = previousMainFloor;
previousState = (elevState)3;
elev_clock = elev_clock + 1l;
signed int button;
button = 0;
button >= 3;
signed int floorNum;
floorNum = 0;
floorNum >= 4;
orderMatrix[(signed long int)button][(signed long int)floorNum] = 0;
__iv__current_func_call = 71;
elev_set_button_lamp((elev_button_type_t)button, floorNum, 0);
floorNum = floorNum + 1;
floorNum >= 4;
orderMatrix[(signed long int)button][(signed long int)floorNum] = 0;
__iv__current_func_call = 71;
elev_set_button_lamp((elev_button_type_t)button, floorNum, 0);
floorNum = floorNum + 1;
__CPROVER_assume(FALSE);
button = button + 1;
button >= 3;
signed int floorNum;
floorNum = 0;
floorNum >= 4;
orderMatrix[(signed long int)button][(signed long int)floorNum] = 0;
__iv__current_func_call = 71;
elev_set_button_lamp((elev_button_type_t)button, floorNum, 0);
floorNum = floorNum + 1;
floorNum >= 4;
orderMatrix[(signed long int)button][(signed long int)floorNum] = 0;
__iv__current_func_call = 71;
elev_set_button_lamp((elev_button_type_t)button, floorNum, 0);
floorNum = floorNum + 1;
__CPROVER_assume(FALSE);
button = button + 1;
__CPROVER_assume(FALSE);
__iv__current_func_call = 72;
timerStarted=clock();
duration = length;
timerActive = 1;
signed int button;
button = 0;
button >= 3;
orderMatrix[(signed long int)button][(signed long int)floorNum] = 0;
__iv__current_func_call = 75;
elev_set_button_lamp((elev_button_type_t)button, floorNum, 0);
button = button + 1;
button >= 3;
orderMatrix[(signed long int)button][(signed long int)floorNum] = 0;
__iv__current_func_call = 75;
elev_set_button_lamp((elev_button_type_t)button, floorNum, 0);
button = button + 1;
__CPROVER_assume(FALSE);
return elev_clock;
assert(state != 2);
signed int return_value_io_read_bit;
__iv__current_func_call = 48;
return_value_io_read_bit=io_read_bit(0x300 + 22);
return return_value_io_read_bit;
!((signed int)dirn == 0);
elev_motor = 0;
!((signed int)dirn >= 1);
elev_motor = 1;
__iv__current_func_call = 83;
startTimer(3.0);
(signed int)dirn >= 0;
elev_motor = -1;
__iv__current_func_call = 84;
startTimer(3.0);
__CPROVER_assume(floor >= 0);
__CPROVER_assume(floor < 4);
__CPROVER_assume(floor >= 0);
__CPROVER_assume(floor < 4);
__CPROVER_assume((signed int)button == 0 || (signed int)button == 1 || (signed int)button == 2);
__CPROVER_assume(floor >= 0);
__CPROVER_assume(floor < 4);
__CPROVER_assume((signed int)button == 0 || (signed int)button == 1 || (signed int)button == 2);
signed int return_value_io_read_bit;
__iv__current_func_call = 43;
return_value_io_read_bit=io_read_bit(button_channel_matrix[(signed long int)floor][(signed long int)button]);
return_value_io_read_bit == 0;
return 1;
return 0;
timerActive = 0;
__iv__current_func_call = 76;
io_read_bit(0x300 + 23);
return __VERIFIER_nondet_signed_int();
comedi_t *pointer;
comedi_t pointed;
pointer = &pointed;
return pointer;
signed int read;
signed int return_value___VERIFIER_nondet_signed_int;
return_value___VERIFIER_nondet_signed_int = __VERIFIER_nondet_signed_int();
read = return_value___VERIFIER_nondet_signed_int;
__CPROVER_assume(0 <= read && read <= 1);
*data = read;
return __VERIFIER_nondet_signed_int();
return timerActive;

}