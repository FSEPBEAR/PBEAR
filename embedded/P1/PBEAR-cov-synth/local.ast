typedef unsigned char __CPROVER_bool;
typedef unsigned int __CPROVER_size_t;
typedef unsigned int size_t;
typedef unsigned int time_t;
typedef unsigned short int wchar_t;
typedef enum API API;
typedef struct anonymous_1 Alarm;
typedef struct anonymous_3 Event;
typedef enum evt_state Evt_State;
typedef struct queue Queue;
typedef struct anonymous_5 Resource;
typedef char S8;
typedef signed int SINT;
typedef unsigned char U8;
typedef signed int data_t;
typedef struct anonymous object_data_t;
typedef enum anonymous_0 push_type;
typedef struct anonymous_2 task_dynamic_stat;
typedef struct anonymous_4 task_static_config;
void _iv_() {__iv__current_func_call = 0;
StartOS((unsigned char)1);
return __VERIFIER_nondet_signed_int();
signed int error;
error = 50 - d;
integral = integral + error;
signed int derivative;
derivative = error - prevError;
signed int out;
out = (signed int)(1.5 * (double)error + (double)(0 * integral) + (double)(0 * derivative));
prevError = error;
return out;
signed int error;
error = 83 - d;
integral = integral + error;
signed int derivative;
derivative = error - prevError;
signed int out;
out = (signed int)(0.2 * (double)error + (double)(0 * integral) + (double)(0 * derivative));
prevError = error;
return out;
!(!((signed int)reftask >= 1) || (signed int)reftask >= 5);
(signed int)task_dyn_info[(signed long int)reftask].act_cnt >= (signed int)task_static_info[(signed long int)reftask].max_act_cnt;
!((signed int)task_state[(signed long int)reftask] == 0);
signed int i;
i = 0;
i >= 3;
Event_Table[(signed long int)i].task_alloc[(signed long int)reftask] = (Evt_State)0;
i = i + 1;
i >= 3;
Event_Table[(signed long int)i].task_alloc[(signed long int)reftask] = (Evt_State)0;
i = i + 1;
i >= 3;
Event_Table[(signed long int)i].task_alloc[(signed long int)reftask] = (Evt_State)0;
i = i + 1;
i >= 3;
Event_Table[(signed long int)i].task_alloc[(signed long int)reftask] = (Evt_State)0;
i = i + 1;
__CPROVER_assume(FALSE);
task_dyn_info[(signed long int)reftask].act_cnt = (unsigned char)((signed int)task_dyn_info[(signed long int)reftask].act_cnt + 1);
__iv__current_func_call = 39;
push_task_into_readyQ(reftask, task_static_info[(signed long int)reftask].prio, 0, (push_type)0);
__iv__current_func_call = 40;
reschedule((API)0, current_tid);
return __VERIFIER_nondet_signed_int();
signed int count;
count = 0;
current_pc[(signed long int)1] = 1;
current_pc[(signed long int)2] = 1;
signed int return_value_is_active_obj_exists;
__iv__current_func_call = 34;
return_value_is_active_obj_exists=is_active_obj_exists();
return_value_is_active_obj_exists == 0;
!(os_on == ON);
count >= 600;
!((signed int)current_tid == 1);
__iv__current_func_call = 35;
Func_AcquisitionTask();
!((signed int)current_tid == 2);
__iv__current_func_call = 36;
Func_ControlTask();
__iv__current_func_call = 37;
postjob();
__iv__current_func_call = 38;
check_property();
count = count + 1;
1 != 0;
__iv__current_func_call = 34;
return_value_is_active_obj_exists=is_active_obj_exists();
return_value_is_active_obj_exists == 0;
!(os_on == ON);
count >= 600;
!((signed int)current_tid == 1);
__iv__current_func_call = 35;
Func_AcquisitionTask();
!((signed int)current_tid == 2);
__iv__current_func_call = 36;
Func_ControlTask();
__iv__current_func_call = 37;
postjob();
__iv__current_func_call = 38;
check_property();
count = count + 1;
1 != 0;
__iv__current_func_call = 34;
return_value_is_active_obj_exists=is_active_obj_exists();
return_value_is_active_obj_exists == 0;
!(os_on == ON);
count >= 600;
!((signed int)current_tid == 1);
__iv__current_func_call = 35;
Func_AcquisitionTask();
!((signed int)current_tid == 2);
__iv__current_func_call = 36;
Func_ControlTask();
__iv__current_func_call = 37;
postjob();
__iv__current_func_call = 38;
check_property();
count = count + 1;
1 != 0;
__iv__current_func_call = 34;
return_value_is_active_obj_exists=is_active_obj_exists();
return_value_is_active_obj_exists == 0;
!(os_on == ON);
count >= 600;
!((signed int)current_tid == 1);
__iv__current_func_call = 35;
Func_AcquisitionTask();
!((signed int)current_tid == 2);
__iv__current_func_call = 36;
Func_ControlTask();
__iv__current_func_call = 37;
postjob();
__iv__current_func_call = 38;
check_property();
count = count + 1;
1 != 0;
__CPROVER_assume(!(1 != 0));
signed int cnt;
cnt = 0;
signed int t;
t = val;
t == 0;
cnt = cnt + 1;
t = t >> 1;
t == 0;
cnt = cnt + 1;
t = t >> 1;
t == 0;
cnt = cnt + 1;
t = t >> 1;
t == 0;
cnt = cnt + 1;
t = t >> 1;
__CPROVER_assume(FALSE);
cnt >= 7;
t = val << 6 - cnt;
t = val >> cnt - 6;
return ftbl[(signed long int)cnt] * ftbl2[(signed long int)(t & 31)] >> 15;
signed int yul;
yul = (signed int)nxtcamdata[(signed long int)(5 * (signed int)getHeight__rectindex + 1 + 2)];
signed int ylr;
ylr = (signed int)nxtcamdata[(signed long int)(5 * (signed int)getHeight__rectindex + 1 + 4)];
return ylr - yul >= 0 ? ylr - yul : -(ylr - yul);
signed int xul;
xul = (signed int)nxtcamdata[(signed long int)(5 * (signed int)getX__rectindex + 1 + 1)];
signed int xlr;
xlr = (signed int)nxtcamdata[(signed long int)(5 * (signed int)getX__rectindex + 1 + 3)];
return (xlr + xul) / 2;
signed int i;
i = 1;
i >= 4;
__CPROVER_bool tmp_if_expr;
!((signed int)task_state[(signed long int)i] == 2);
tmp_if_expr = 1 != 0;
tmp_if_expr = ((signed int)task_state[(signed long int)i] == 1 ? 1 : (signed int)(0 != 0)) != 0;
!tmp_if_expr;
return 1;
i = i + 1;
i >= 4;
__CPROVER_bool tmp_if_expr;
!((signed int)task_state[(signed long int)i] == 2);
tmp_if_expr = 1 != 0;
tmp_if_expr = ((signed int)task_state[(signed long int)i] == 1 ? 1 : (signed int)(0 != 0)) != 0;
!tmp_if_expr;
return 1;
i = i + 1;
i >= 4;
__CPROVER_bool tmp_if_expr;
!((signed int)task_state[(signed long int)i] == 2);
tmp_if_expr = 1 != 0;
tmp_if_expr = ((signed int)task_state[(signed long int)i] == 1 ? 1 : (signed int)(0 != 0)) != 0;
!tmp_if_expr;
return 1;
i = i + 1;
i >= 4;
__CPROVER_bool tmp_if_expr;
!((signed int)task_state[(signed long int)i] == 2);
tmp_if_expr = 1 != 0;
tmp_if_expr = ((signed int)task_state[(signed long int)i] == 1 ? 1 : (signed int)(0 != 0)) != 0;
!tmp_if_expr;
return 1;
i = i + 1;
__CPROVER_assume(FALSE);
i = 1;
i >= 4;
alarm_state[(signed long int)i] == 0;
return 1;
i = i + 1;
i >= 4;
alarm_state[(signed long int)i] == 0;
return 1;
i = i + 1;
i >= 4;
alarm_state[(signed long int)i] == 0;
return 1;
i = i + 1;
i >= 4;
alarm_state[(signed long int)i] == 0;
return 1;
i = i + 1;
__CPROVER_assume(FALSE);
return 0;
struct pair *successor;
struct pair *scan;
struct pair *scanold;
struct pair *median;
unsigned int i;
datpoint = datpoint + 1l;
!(datpoint - buffer >= 15l);
datpoint = buffer;
datpoint->value = datum;
successor = datpoint->point;
median = &big;
scan = &big;
!(scan->point == datpoint);
scan->point = successor;
scanold = scan;
scan = scan->point;
i = 0u;
i >= 15u;
!(scan->point == datpoint);
scan->point = successor;
scan->value >= datum;
datpoint->point = scanold->point;
scanold->point = datpoint;
datum = 0;
median = median->point;
scan == &small;
scanold = scan;
scan = scan->point;
!(scan->point == datpoint);
scan->point = successor;
scan->value >= datum;
datpoint->point = scanold->point;
scanold->point = datpoint;
datum = 0;
scan == &small;
scanold = scan;
scan = scan->point;
i = i + 1u;
i >= 15u;
!(scan->point == datpoint);
scan->point = successor;
scan->value >= datum;
datpoint->point = scanold->point;
scanold->point = datpoint;
datum = 0;
median = median->point;
scan == &small;
scanold = scan;
scan = scan->point;
!(scan->point == datpoint);
scan->point = successor;
scan->value >= datum;
datpoint->point = scanold->point;
scanold->point = datpoint;
datum = 0;
scan == &small;
scanold = scan;
scan = scan->point;
i = i + 1u;
i >= 15u;
!(scan->point == datpoint);
scan->point = successor;
scan->value >= datum;
datpoint->point = scanold->point;
scanold->point = datpoint;
datum = 0;
median = median->point;
scan == &small;
scanold = scan;
scan = scan->point;
!(scan->point == datpoint);
scan->point = successor;
scan->value >= datum;
datpoint->point = scanold->point;
scanold->point = datpoint;
datum = 0;
scan == &small;
scanold = scan;
scan = scan->point;
i = i + 1u;
i >= 15u;
!(scan->point == datpoint);
scan->point = successor;
scan->value >= datum;
datpoint->point = scanold->point;
scanold->point = datpoint;
datum = 0;
median = median->point;
scan == &small;
scanold = scan;
scan = scan->point;
!(scan->point == datpoint);
scan->point = successor;
scan->value >= datum;
datpoint->point = scanold->point;
scanold->point = datpoint;
datum = 0;
scan == &small;
scanold = scan;
scan = scan->point;
i = i + 1u;
__CPROVER_assume(FALSE);
return median->value;
unsigned char i;
signed int return_value_is_alloc_0;
!(!((signed int)resid >= 0) || (signed int)resid >= 3);
__iv__current_func_call = 18;
return_value_is_alloc_0=is_alloc(resid);
return_value_is_alloc_0 == (signed int)current_tid;
Resource_Table[(signed long int)resid].c_prio >= (unsigned int)task_static_info[(signed long int)current_tid].prio;
Resource_Table[(signed long int)resid].alloc = (unsigned char)0;
(unsigned int)task_static_info[(signed long int)current_tid].prio >= Resource_Table[(signed long int)resid].c_prio;
current_prio = task_static_info[(signed long int)current_tid].prio;
i = (unsigned char)0;
(signed int)i >= 3;
signed int return_value_is_alloc;
__iv__current_func_call = 19;
return_value_is_alloc=is_alloc(i);
!(return_value_is_alloc == (signed int)current_tid);
(unsigned int)current_prio >= Resource_Table[(signed long int)resid].c_prio;
current_prio = (unsigned char)Resource_Table[(signed long int)i].c_prio;
i = (unsigned char)((signed int)i + 1);
(signed int)i >= 3;
signed int return_value_is_alloc;
__iv__current_func_call = 19;
return_value_is_alloc=is_alloc(i);
!(return_value_is_alloc == (signed int)current_tid);
(unsigned int)current_prio >= Resource_Table[(signed long int)resid].c_prio;
current_prio = (unsigned char)Resource_Table[(signed long int)i].c_prio;
i = (unsigned char)((signed int)i + 1);
(signed int)i >= 3;
signed int return_value_is_alloc;
__iv__current_func_call = 19;
return_value_is_alloc=is_alloc(i);
!(return_value_is_alloc == (signed int)current_tid);
(unsigned int)current_prio >= Resource_Table[(signed long int)resid].c_prio;
current_prio = (unsigned char)Resource_Table[(signed long int)i].c_prio;
i = (unsigned char)((signed int)i + 1);
(signed int)i >= 3;
signed int return_value_is_alloc;
__iv__current_func_call = 19;
return_value_is_alloc=is_alloc(i);
!(return_value_is_alloc == (signed int)current_tid);
(unsigned int)current_prio >= Resource_Table[(signed long int)resid].c_prio;
current_prio = (unsigned char)Resource_Table[(signed long int)i].c_prio;
i = (unsigned char)((signed int)i + 1);
__CPROVER_assume(FALSE);
task_dyn_info[(signed long int)current_tid].dyn_prio = current_prio;
__iv__current_func_call = 20;
reschedule((API)5, current_tid);
return __VERIFIER_nondet_signed_int();
signed int return_value_getWidth;
__iv__current_func_call = 16;
return_value_getWidth=getWidth(getArea__rectindex);
signed int return_value_getHeight;
__iv__current_func_call = 17;
return_value_getHeight=getHeight(getArea__rectindex);
return return_value_getWidth * return_value_getHeight;
signed int i2c_start_transaction_ret;
i2c_start_transaction_ret = __VERIFIER_nondet_signed_int();
signed int i;
unsigned char return_value___VERIFIER_nondet_unsigned_char;
signed int return_value_nondet_unsigned_char;
return_value_nondet_unsigned_char = __VERIFIER_nondet_signed_int();
return_value___VERIFIER_nondet_unsigned_char = (unsigned char)return_value_nondet_unsigned_char;
i2c_start_transaction__data[0l] = return_value___VERIFIER_nondet_unsigned_char;
__CPROVER_assume((signed int)i2c_start_transaction__data[0l] <= 8);
i = 1;
(unsigned int)i >= nbytes;
unsigned char return_value___VERIFIER_nondet_unsigned_char_0;
signed int return_value_nondet_unsigned_char_0;
return_value_nondet_unsigned_char_0 = __VERIFIER_nondet_signed_int();
return_value___VERIFIER_nondet_unsigned_char_0 = (unsigned char)return_value_nondet_unsigned_char_0;
i2c_start_transaction__data[(signed long int)i] = return_value___VERIFIER_nondet_unsigned_char_0;
i = i + 1;
(unsigned int)i >= nbytes;
unsigned char return_value___VERIFIER_nondet_unsigned_char_0;
signed int return_value_nondet_unsigned_char_0;
return_value_nondet_unsigned_char_0 = __VERIFIER_nondet_signed_int();
return_value___VERIFIER_nondet_unsigned_char_0 = (unsigned char)return_value_nondet_unsigned_char_0;
i2c_start_transaction__data[(signed long int)i] = return_value___VERIFIER_nondet_unsigned_char_0;
i = i + 1;
(unsigned int)i >= nbytes;
unsigned char return_value___VERIFIER_nondet_unsigned_char_0;
signed int return_value_nondet_unsigned_char_0;
return_value_nondet_unsigned_char_0 = __VERIFIER_nondet_signed_int();
return_value___VERIFIER_nondet_unsigned_char_0 = (unsigned char)return_value_nondet_unsigned_char_0;
i2c_start_transaction__data[(signed long int)i] = return_value___VERIFIER_nondet_unsigned_char_0;
i = i + 1;
(unsigned int)i >= nbytes;
unsigned char return_value___VERIFIER_nondet_unsigned_char_0;
signed int return_value_nondet_unsigned_char_0;
return_value_nondet_unsigned_char_0 = __VERIFIER_nondet_signed_int();
return_value___VERIFIER_nondet_unsigned_char_0 = (unsigned char)return_value_nondet_unsigned_char_0;
i2c_start_transaction__data[(signed long int)i] = return_value___VERIFIER_nondet_unsigned_char_0;
i = i + 1;
__CPROVER_assume(FALSE);
return i2c_start_transaction_ret;
signed int return_value_is_active_alarm_exists;
__iv__current_func_call = 7;
return_value_is_active_alarm_exists=is_active_alarm_exists();
return_value_is_active_alarm_exists == 0;
signed int aid;
aid = 1;
aid >= 3;
alarm_state[(signed long int)aid] == 0;
__iv__current_func_call = 8;
ALARM_handler(aid);
aid = aid + 1;
aid >= 3;
alarm_state[(signed long int)aid] == 0;
__iv__current_func_call = 8;
ALARM_handler(aid);
aid = aid + 1;
aid >= 3;
alarm_state[(signed long int)aid] == 0;
__iv__current_func_call = 8;
ALARM_handler(aid);
aid = aid + 1;
aid >= 3;
alarm_state[(signed long int)aid] == 0;
__iv__current_func_call = 8;
ALARM_handler(aid);
aid = aid + 1;
__CPROVER_assume(FALSE);
return __VERIFIER_nondet_signed_int();
signed int return_value_i2c_busy;
__iv__current_func_call = 4;
return_value_i2c_busy=i2c_busy((signed int)port_id);
!(return_value_i2c_busy == 0);
__iv__current_func_call = 5;
i2c_start_transaction((signed int)port_id, 1u, 0x42, 1, nxtcamdata, 41u, 0);
return __VERIFIER_nondet_signed_int();
signed int return_value_i2c_busy;
__iv__current_func_call = 2;
return_value_i2c_busy=i2c_busy((signed int)port_id);
return_value_i2c_busy == 0;
1 != 0;
__iv__current_func_call = 2;
return_value_i2c_busy=i2c_busy((signed int)port_id);
return_value_i2c_busy == 0;
1 != 0;
__iv__current_func_call = 2;
return_value_i2c_busy=i2c_busy((signed int)port_id);
return_value_i2c_busy == 0;
1 != 0;
__iv__current_func_call = 2;
return_value_i2c_busy=i2c_busy((signed int)port_id);
return_value_i2c_busy == 0;
1 != 0;
__CPROVER_assume(!(1 != 0));
nxtcambuffer[(signed long int)0] = command;
SINT ret;
__iv__current_func_call = 3;
ret=i2c_start_transaction((signed int)port_id, 1u, 0x41, 1, nxtcambuffer, 1u, 1);
return ret;
assert(!(new_speed > 150 && !(direction_adjustment < 15 && direction_adjustment > -15)));
return __VERIFIER_nondet_signed_int();
__iv__current_func_call = 44;
WaitEvent_Common(eventid);
return __VERIFIER_nondet_signed_int();
!((signed int)task_dyn_info[(signed long int)current_tid].act_cnt >= 1);
task_dyn_info[(signed long int)current_tid].act_cnt = (unsigned char)((signed int)task_dyn_info[(signed long int)current_tid].act_cnt - 1);
!((signed int)task_dyn_info[(signed long int)current_tid].act_cnt >= 1);
task_state[(signed long int)current_tid] = (unsigned char)1;
task_state[(signed long int)current_tid] = (unsigned char)0;
__iv__current_func_call = 80;
reschedule((API)1, current_tid);
return __VERIFIER_nondet_signed_int();
__iv__current_func_call = 46;
TerminateTask_Common();
return __VERIFIER_nondet_signed_int();
return __VERIFIER_nondet_signed_int();
signed int getbiggestrect__1__rectindex;
getbiggestrect__1__rectindex = -1;
signed int i;
signed int maxarea;
maxarea = pminarea;
i = 0;
i >= (signed int)nxtcamdata[(signed long int)0];
signed int colorid;
colorid = (signed int)nxtcamdata[(signed long int)(1 + 5 * i + 0)];
!(colorid == (signed int)pcolorid);
signed int getbiggestrect__1__1__1__1__area;
__iv__current_func_call = 15;
getbiggestrect__1__1__1__1__area=getArea((U8)i);
!(getbiggestrect__1__1__1__1__area >= maxarea);
maxarea = getbiggestrect__1__1__1__1__area;
getbiggestrect__1__rectindex = i;
i = i + 1;
i >= (signed int)nxtcamdata[(signed long int)0];
signed int colorid;
colorid = (signed int)nxtcamdata[(signed long int)(1 + 5 * i + 0)];
!(colorid == (signed int)pcolorid);
signed int getbiggestrect__1__1__1__1__area;
__iv__current_func_call = 15;
getbiggestrect__1__1__1__1__area=getArea((U8)i);
!(getbiggestrect__1__1__1__1__area >= maxarea);
maxarea = getbiggestrect__1__1__1__1__area;
getbiggestrect__1__rectindex = i;
i = i + 1;
i >= (signed int)nxtcamdata[(signed long int)0];
signed int colorid;
colorid = (signed int)nxtcamdata[(signed long int)(1 + 5 * i + 0)];
!(colorid == (signed int)pcolorid);
signed int getbiggestrect__1__1__1__1__area;
__iv__current_func_call = 15;
getbiggestrect__1__1__1__1__area=getArea((U8)i);
!(getbiggestrect__1__1__1__1__area >= maxarea);
maxarea = getbiggestrect__1__1__1__1__area;
getbiggestrect__1__rectindex = i;
i = i + 1;
i >= (signed int)nxtcamdata[(signed long int)0];
signed int colorid;
colorid = (signed int)nxtcamdata[(signed long int)(1 + 5 * i + 0)];
!(colorid == (signed int)pcolorid);
signed int getbiggestrect__1__1__1__1__area;
__iv__current_func_call = 15;
getbiggestrect__1__1__1__1__area=getArea((U8)i);
!(getbiggestrect__1__1__1__1__area >= maxarea);
maxarea = getbiggestrect__1__1__1__1__area;
getbiggestrect__1__rectindex = i;
i = i + 1;
__CPROVER_assume(FALSE);
return getbiggestrect__1__rectindex;
return __VERIFIER_nondet_signed_int();
__iv__current_func_call = 57;
ReleaseResource_Common(resid);
return __VERIFIER_nondet_signed_int();
return __VERIFIER_nondet_signed_int();
return __VERIFIER_nondet_signed_int();
__iv__current_func_call = 82;
ChainTask_Common(reftask);
return __VERIFIER_nondet_signed_int();
return __VERIFIER_nondet_signed_int();
signed int i2c_busy_ret;
i2c_busy_ret = __VERIFIER_nondet_signed_int();
return i2c_busy_ret;
signed int return_value_is_alloc;
__CPROVER_bool tmp_if_expr;
!(!((signed int)resid >= 0) || (signed int)resid >= 3);
__iv__current_func_call = 55;
return_value_is_alloc=is_alloc(resid);
!(return_value_is_alloc >= 1);
tmp_if_expr = 1 != 0;
tmp_if_expr = ((unsigned int)task_static_info[(signed long int)current_tid].prio > Resource_Table[(signed long int)resid].c_prio ? 1 : (signed int)(0 != 0)) != 0;
!tmp_if_expr;
Resource_Table[(signed long int)resid].alloc = current_tid;
(unsigned int)task_dyn_info[(signed long int)current_tid].dyn_prio >= Resource_Table[(signed long int)resid].c_prio;
task_dyn_info[(signed long int)current_tid].dyn_prio = (unsigned char)Resource_Table[(signed long int)resid].c_prio;
return __VERIFIER_nondet_signed_int();
return __VERIFIER_nondet_signed_int();
__iv__current_func_call = 75;
ActivateTask_Common(reftask);
return __VERIFIER_nondet_signed_int();
!(alarm_state[(signed long int)aid] == 1);
alarm_info[(signed long int)aid].next_alarm_tick = alarm_info[(signed long int)aid].next_alarm_tick - 1u;
!(alarm_info[(signed long int)aid].next_alarm_tick == 0u);
alarm_info[(signed long int)aid].next_alarm_tick = alarm_info[(signed long int)aid].cycle;
alarm_state[(signed long int)aid] = 2;
!(alarm_state[(signed long int)aid] == 2);
!((signed int)alarm_info[(signed long int)aid].api == 0);
__iv__current_func_call = 62;
ActivateTask_Common(alarm_info[(signed long int)aid].param1);
!((signed int)alarm_info[(signed long int)aid].api == 6);
__iv__current_func_call = 63;
SetEvent_Common(alarm_info[(signed long int)aid].param1, alarm_info[(signed long int)aid].param2);
!(alarm_info[(signed long int)aid].cycle >= 1u);
alarm_state[(signed long int)aid] = 1;
alarm_state[(signed long int)aid] = 0;
return __VERIFIER_nondet_signed_int();
signed int i;
i = 1;
i >= 4;
alarm_state[(signed long int)i] == 0;
return 1;
i = i + 1;
i >= 4;
alarm_state[(signed long int)i] == 0;
return 1;
i = i + 1;
i >= 4;
alarm_state[(signed long int)i] == 0;
return 1;
i = i + 1;
i >= 4;
alarm_state[(signed long int)i] == 0;
return 1;
i = i + 1;
__CPROVER_assume(FALSE);
return 0;
task_static_info[(signed long int)0].max_act_cnt = (unsigned char)1;
task_static_info[(signed long int)0].preemptable = (unsigned char)1;
task_static_info[(signed long int)0].prio = (unsigned char)0;
task_static_info[(signed long int)0].autostart = (unsigned char)0;
task_static_info[(signed long int)0].extended = (unsigned char)0;
task_static_info[(signed long int)1].max_act_cnt = (unsigned char)1;
task_static_info[(signed long int)1].preemptable = (unsigned char)1;
task_static_info[(signed long int)1].prio = (unsigned char)3;
task_static_info[(signed long int)1].autostart = (unsigned char)0;
task_static_info[(signed long int)1].extended = (unsigned char)0;
task_static_info[(signed long int)2].max_act_cnt = (unsigned char)1;
task_static_info[(signed long int)2].preemptable = (unsigned char)1;
task_static_info[(signed long int)2].prio = (unsigned char)2;
task_static_info[(signed long int)2].autostart = (unsigned char)1;
task_static_info[(signed long int)2].extended = (unsigned char)0;
task_dyn_info[(signed long int)1].dyn_prio = task_static_info[(signed long int)1].prio;
task_dyn_info[(signed long int)1].act_cnt = (unsigned char)0;
task_dyn_info[(signed long int)2].dyn_prio = task_static_info[(signed long int)2].prio;
task_dyn_info[(signed long int)2].act_cnt = (unsigned char)0;
alarm_state[(signed long int)1] = 1;
alarm_info[(signed long int)1].cycle = 30u;
alarm_info[(signed long int)1].next_alarm_tick = 1u;
alarm_info[(signed long int)1].api = (API)0;
alarm_info[(signed long int)1].param1 = (unsigned char)1;
alarm_info[(signed long int)1].param2 = (unsigned char)0;
alarm_state[(signed long int)2] = 1;
alarm_info[(signed long int)2].cycle = 50u;
alarm_info[(signed long int)2].next_alarm_tick = 1u;
alarm_info[(signed long int)2].api = (API)0;
alarm_info[(signed long int)2].param1 = (unsigned char)2;
alarm_info[(signed long int)2].param2 = (unsigned char)0;
Resource_Table[(signed long int)1].c_prio = 4u;
signed int xul;
xul = (signed int)nxtcamdata[(signed long int)(5 * (signed int)getWidth__rectindex + 1 + 1)];
signed int xlr;
xlr = (signed int)nxtcamdata[(signed long int)(5 * (signed int)getWidth__rectindex + 1 + 3)];
return xlr - xul >= 0 ? xlr - xul : -(xlr - xul);
current_pc[(signed long int)2] == 1;
current_pc[(signed long int)2] == 2;
current_pc[(signed long int)2] == 3;
current_pc[(signed long int)2] == 4;
__iv__current_func_call = 64;
GetResource((unsigned char)1);
current_pc[(signed long int)2] = 2;
data = objData;
__iv__current_func_call = 65;
ReleaseResource((unsigned char)1);
current_pc[(signed long int)2] = 3;
ctl_size = data.size;
position = data.position;
!(ctl_size >= 1 && position >= 1);
__iv__current_func_call = 66;
speed_deviation=speedPIDController(ctl_size);
new_speed = 50 + speed_deviation;
new_speed = new_speed > 100 ? 100 : new_speed;
__iv__current_func_call = 67;
direction_adjustment=directionPIDController(position);
__iv__current_func_call = 68;
TerminateTask();
current_pc[(signed long int)2] = 4;
current_pc[(signed long int)2] = 1;
return __VERIFIER_nondet_signed_int();
__iv__current_func_call = 53;
SetEvent_Common(reftask, eventid);
return __VERIFIER_nondet_signed_int();
__iv__current_func_call = 72;
reschedule((API)3, current_tid);
return __VERIFIER_nondet_signed_int();
current_pc[(signed long int)1] == 1;
current_pc[(signed long int)1] == 2;
current_pc[(signed long int)1] == 3;
current_pc[(signed long int)1] == 4;
(signed int)tracking_enabled == 0;
signed int return_value_send_nxtcam_command;
__iv__current_func_call = 22;
return_value_send_nxtcam_command=send_nxtcam_command((U8)2, (U8)69);
tracking_enabled = (S8)return_value_send_nxtcam_command;
__iv__current_func_call = 23;
request((U8)2);
__iv__current_func_call = 24;
rectindex=getbiggestrect((U8)0, -1);
!(rectindex >= 0);
__iv__current_func_call = 25;
area=getArea((U8)rectindex);
__iv__current_func_call = 26;
area=median_filter(area);
__iv__current_func_call = 27;
acq_size=fisqrt(area);
__iv__current_func_call = 28;
x=getX((U8)rectindex);
__iv__current_func_call = 29;
GetResource((unsigned char)1);
current_pc[(signed long int)1] = 2;
objData.position = x;
objData.size = acq_size;
__iv__current_func_call = 30;
ReleaseResource((unsigned char)1);
current_pc[(signed long int)1] = 3;
__iv__current_func_call = 31;
TerminateTask();
current_pc[(signed long int)1] = 4;
current_pc[(signed long int)1] = 1;
__iv__current_func_call = 59;
GetResource_Common(resid);
return __VERIFIER_nondet_signed_int();
return (signed int)Resource_Table[(signed long int)res].alloc;
__iv__current_func_call = 78;
Schedule_Common();
return __VERIFIER_nondet_signed_int();
!(!((signed int)reftask >= 1) || (signed int)reftask >= 5);
!((signed int)task_static_info[(signed long int)reftask].extended == 0);
(signed int)task_state[(signed long int)reftask] == 0;
(signed int)Event_Table[(signed long int)eventid].task_alloc[(signed long int)reftask] == 1;
Event_Table[(signed long int)eventid].task_alloc[(signed long int)reftask] = (Evt_State)1;
!((signed int)task_state[(signed long int)reftask] == 3);
__iv__current_func_call = 69;
push_task_into_readyQ(reftask, task_static_info[(signed long int)reftask].prio, current_pc[(signed long int)reftask], (push_type)2);
__iv__current_func_call = 70;
reschedule((API)6, current_tid);
return __VERIFIER_nondet_signed_int();
!(os_on == OFF);
os_on = ON;
__iv__current_func_call = 48;
initialize();
__iv__current_func_call = 49;
startup_process();
__iv__current_func_call = 50;
app();
__iv__current_func_call = 88;
GetResource((unsigned char)1);
__iv__current_func_call = 89;
ReleaseResource((unsigned char)1);
return __VERIFIER_nondet_object_data_t();
!(wholesize == 0);
current_tid = (unsigned char)0;
current_prio = (unsigned char)0;
current_tid = readyQ[(signed long int)max_prio][(signed long int)front[(signed long int)max_prio]].tid;
current_prio = max_prio;
readyQ[(signed long int)max_prio][(signed long int)front[(signed long int)max_prio]].tid = (unsigned char)0;
front[(signed long int)max_prio] = (front[(signed long int)max_prio] + 1) % 4;
size[(signed long int)current_prio] = size[(signed long int)current_prio] - 1;
wholesize = wholesize - 1;
max_prio = current_prio;
!(size[(signed long int)max_prio] == 0);
(signed int)max_prio == 0;
max_prio = (unsigned char)((signed int)max_prio - 1);
!(size[(signed long int)max_prio] == 0);
(signed int)max_prio == 0;
max_prio = (unsigned char)((signed int)max_prio - 1);
!(size[(signed long int)max_prio] == 0);
(signed int)max_prio == 0;
max_prio = (unsigned char)((signed int)max_prio - 1);
!(size[(signed long int)max_prio] == 0);
(signed int)max_prio == 0;
max_prio = (unsigned char)((signed int)max_prio - 1);
__CPROVER_assume(FALSE);
task_state[(signed long int)current_tid] = (unsigned char)2;
return __VERIFIER_nondet_U8_star();
size[(signed long int)p] == 3;
!((signed int)pushkind == 1);
task_state[(signed long int)t] = (unsigned char)1;
front[(signed long int)p] = ((4 + front[(signed long int)p]) - 1) % 4;
k = (unsigned char)front[(signed long int)p];
readyQ[(signed long int)p][(signed long int)k].tid = t;
task_state[(signed long int)t] = (unsigned char)1;
k = (unsigned char)rear[(signed long int)p];
readyQ[(signed long int)p][(signed long int)k].tid = t;
rear[(signed long int)p] = (4 + (signed int)k + 1) % 4;
size[(signed long int)p] = size[(signed long int)p] + 1;
wholesize = wholesize + 1;
(signed int)max_prio >= (signed int)p;
max_prio = p;
!((signed int)reschedule__api == 1 || (signed int)reschedule__api == 2 || (signed int)reschedule__api == 7);
__iv__current_func_call = 91;
get_task_from_readyQ();
!(((signed int)task_static_info[(signed long int)tid].preemptable == 0 ? (!((signed int)reschedule__api == 3) ? 1 : 0) : 0) != 0);
(signed int)task_dyn_info[(signed long int)tid].dyn_prio >= (signed int)max_prio;
__iv__current_func_call = 92;
push_task_into_readyQ(tid, task_dyn_info[(signed long int)tid].dyn_prio, current_pc[(signed long int)tid], (push_type)1);
__iv__current_func_call = 93;
get_task_from_readyQ();
return __VERIFIER_nondet_signed_int();
unsigned int i;
i = 0u;
i >= 4u;
(signed int)task_static_info[(signed long int)i].autostart == 0;
task_dyn_info[(signed long int)i].act_cnt = (unsigned char)((signed int)task_dyn_info[(signed long int)i].act_cnt + 1);
current_prio = task_static_info[(signed long int)i].prio;
__iv__current_func_call = 32;
push_task_into_readyQ((unsigned char)i, current_prio, 0, (push_type)0);
task_state[(signed long int)i] = (unsigned char)1;
i = i + 1u;
i >= 4u;
(signed int)task_static_info[(signed long int)i].autostart == 0;
task_dyn_info[(signed long int)i].act_cnt = (unsigned char)((signed int)task_dyn_info[(signed long int)i].act_cnt + 1);
current_prio = task_static_info[(signed long int)i].prio;
__iv__current_func_call = 32;
push_task_into_readyQ((unsigned char)i, current_prio, 0, (push_type)0);
task_state[(signed long int)i] = (unsigned char)1;
i = i + 1u;
i >= 4u;
(signed int)task_static_info[(signed long int)i].autostart == 0;
task_dyn_info[(signed long int)i].act_cnt = (unsigned char)((signed int)task_dyn_info[(signed long int)i].act_cnt + 1);
current_prio = task_static_info[(signed long int)i].prio;
__iv__current_func_call = 32;
push_task_into_readyQ((unsigned char)i, current_prio, 0, (push_type)0);
task_state[(signed long int)i] = (unsigned char)1;
i = i + 1u;
i >= 4u;
(signed int)task_static_info[(signed long int)i].autostart == 0;
task_dyn_info[(signed long int)i].act_cnt = (unsigned char)((signed int)task_dyn_info[(signed long int)i].act_cnt + 1);
current_prio = task_static_info[(signed long int)i].prio;
__iv__current_func_call = 32;
push_task_into_readyQ((unsigned char)i, current_prio, 0, (push_type)0);
task_state[(signed long int)i] = (unsigned char)1;
i = i + 1u;
__CPROVER_assume(FALSE);
wholesize == 0;
__iv__current_func_call = 33;
get_task_from_readyQ();
task_state[(signed long int)current_tid] = (unsigned char)2;

}