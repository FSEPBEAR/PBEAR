typedef unsigned char __CPROVER_bool;
typedef unsigned int __CPROVER_size_t;
typedef unsigned int size_t;
typedef unsigned int time_t;
typedef unsigned short int wchar_t;
typedef enum API API;
typedef struct anonymous_1 Alarm;
typedef struct anonymous_2 Event;
typedef enum evt_state Evt_State;
typedef struct queue Queue;
typedef struct anonymous_5 Resource;
typedef char S8;
typedef signed int SINT;
typedef unsigned char U8;
typedef signed int data_t;
typedef struct anonymous object_data_t;
typedef enum anonymous_0 push_type;
typedef struct anonymous_3 task_dynamic_stat;
typedef struct anonymous_4 task_static_config;
void _iv_() {StartOS((unsigned char)1);
return __VERIFIER_nondet_signed_int();
signed int return_value_i2c_busy;
return_value_i2c_busy=i2c_busy((signed int)port_id);
return_value_i2c_busy == 0;
1 != 0;
nxtcambuffer[0l] = command;
SINT ret;
signed int return_value_i2c_start_transaction;
signed int return_value_i2c_start_transaction;
return_value_i2c_start_transaction=i2c_start_transaction((signed int)port_id, 1u, 0x41, 1, nxtcambuffer, 1u, 1);
ret = return_value_i2c_start_transaction;
return ret;
signed int return_value_i2c_busy;
signed int return_value_i2c_busy;
return_value_i2c_busy=i2c_busy((signed int)port_id);
!(return_value_i2c_busy == 0);
i2c_start_transaction((signed int)port_id, 1u, 0x42, 1, nxtcamdata, 41u, 0);
return __VERIFIER_nondet_signed_int();
signed int return_value_is_active_alarm_exists;
signed int return_value_is_active_alarm_exists;
return_value_is_active_alarm_exists=is_active_alarm_exists();
return_value_is_active_alarm_exists == 0;
signed int aid;
aid = 1;
aid >= 3;
alarm_state[(signed long int)aid] == 0;
ALARM_handler(aid);
aid = aid + 1;
return __VERIFIER_nondet_signed_int();
signed int i2c_start_transaction_ret;
signed int return_value_nondet_signed_int;
return_value_nondet_signed_int = __VERIFIER_nondet_signed_int();
i2c_start_transaction_ret = return_value_nondet_signed_int;
signed int i;
unsigned char return_value___VERIFIER_nondet_unsigned_char;
signed int return_value_nondet_unsigned_char;
return_value_nondet_unsigned_char = __VERIFIER_nondet_signed_int();
return_value___VERIFIER_nondet_unsigned_char = (unsigned char)return_value_nondet_unsigned_char;
i2c_start_transaction__data[0l] = return_value___VERIFIER_nondet_unsigned_char;
__CPROVER_assume((signed int)i2c_start_transaction__data[0l] <= 8);
i = 1;
(unsigned int)i >= nbytes;
unsigned char return_value___VERIFIER_nondet_unsigned_char_0;
signed int return_value_nondet_unsigned_char_0;
return_value_nondet_unsigned_char_0 = __VERIFIER_nondet_signed_int();
return_value___VERIFIER_nondet_unsigned_char_0 = (unsigned char)return_value_nondet_unsigned_char_0;
i2c_start_transaction__data[(signed long int)i] = return_value___VERIFIER_nondet_unsigned_char_0;
i = i + 1;
return i2c_start_transaction_ret;
signed int getbiggestrect__1__rectindex;
getbiggestrect__1__rectindex = -1;
signed int i;
signed int maxarea;
maxarea = pminarea;
i = 0;
i >= (signed int)nxtcamdata[0l];
signed int colorid;
colorid = (signed int)nxtcamdata[(signed long int)(1 + 5 * i + 0)];
!(colorid == (signed int)pcolorid);
signed int getbiggestrect__1__1__1__1__area;
signed int return_value_getArea;
signed int return_value_getArea;
return_value_getArea=getArea((U8)i);
getbiggestrect__1__1__1__1__area = return_value_getArea;
!(getbiggestrect__1__1__1__1__area >= maxarea);
maxarea = getbiggestrect__1__1__1__1__area;
getbiggestrect__1__rectindex = i;
i = i + 1;
return getbiggestrect__1__rectindex;
signed int return_value_getWidth;
signed int return_value_getWidth;
return_value_getWidth=getWidth(getArea__rectindex);
signed int return_value_getHeight;
signed int return_value_getHeight;
return_value_getHeight=getHeight(getArea__rectindex);
return return_value_getWidth * return_value_getHeight;
unsigned char i;
signed int return_value_is_alloc_0;
!(!((signed int)resid >= 0) || (signed int)resid >= 3);
return_value_is_alloc_0=is_alloc(resid);
return_value_is_alloc_0 == (signed int)current_tid;
Resource_Table[(signed long int)resid].c_prio >= (unsigned int)task_static_info[(signed long int)current_tid].prio;
Resource_Table[(signed long int)resid].alloc = (unsigned char)0;
(unsigned int)task_static_info[(signed long int)current_tid].prio >= Resource_Table[(signed long int)resid].c_prio;
current_prio = task_static_info[(signed long int)current_tid].prio;
i = (unsigned char)0;
(signed int)i >= 3;
signed int return_value_is_alloc;
signed int return_value_is_alloc;
return_value_is_alloc=is_alloc(i);
!(return_value_is_alloc == (signed int)current_tid);
(unsigned int)current_prio >= Resource_Table[(signed long int)resid].c_prio;
current_prio = (unsigned char)Resource_Table[(signed long int)i].c_prio;
i = (unsigned char)((signed int)i + 1);
task_dyn_info[(signed long int)current_tid].dyn_prio = current_prio;
reschedule((API)5, current_tid);
return __VERIFIER_nondet_signed_int();
current_pc[1l] == 1;
current_pc[1l] == 2;
current_pc[1l] == 3;
current_pc[1l] == 4;
(signed int)tracking_enabled == 0;
signed int return_value_send_nxtcam_command;
SINT return_value_send_nxtcam_command;
return_value_send_nxtcam_command=send_nxtcam_command((U8)2, (U8)69);
tracking_enabled = (S8)return_value_send_nxtcam_command;
request((U8)2);
rectindex=getbiggestrect((U8)0, -1);
!(rectindex >= 0);
area=getArea((U8)rectindex);
area=median_filter(area);
acq_size=fisqrt(area);
x=getX((U8)rectindex);
GetResource((unsigned char)1);
current_pc[1l] = 2;
objData.position = x;
objData.size = acq_size;
ReleaseResource((unsigned char)1);
current_pc[1l] = 3;
TerminateTask();
current_pc[1l] = 4;
current_pc[1l] = 1;
signed int i2c_busy_ret;
signed int return_value_nondet_signed_int;
return_value_nondet_signed_int = __VERIFIER_nondet_signed_int();
i2c_busy_ret = return_value_nondet_signed_int;
return i2c_busy_ret;
struct pair *successor;
struct pair *scan;
struct pair *scanold;
struct pair *median;
unsigned int i;
datpoint = datpoint + 1l;
!(datpoint - buffer >= 15l);
datpoint = buffer;
datpoint->value = datum;
successor = datpoint->point;
median = &big;
scan = &big;
!(scan->point == datpoint);
scan->point = successor;
scanold = scan;
scan = scan->point;
i = 0u;
i >= 15u;
!(scan->point == datpoint);
scan->point = successor;
scan->value >= datum;
datpoint->point = scanold->point;
scanold->point = datpoint;
datum = 0;
median = median->point;
scan == &small;
scanold = scan;
scan = scan->point;
!(scan->point == datpoint);
scan->point = successor;
scan->value >= datum;
datpoint->point = scanold->point;
scanold->point = datpoint;
datum = 0;
scan == &small;
scanold = scan;
scan = scan->point;
i = i + 1u;
return median->value;
signed int i;
i = 1;
i >= 4;
__CPROVER_bool tmp_if_expr;
!((signed int)task_state[(signed long int)i] == 2);
tmp_if_expr = 1 != 0;
tmp_if_expr = ((signed int)task_state[(signed long int)i] == 1 ? 1 : 0) != 0;
!tmp_if_expr;
return 1;
i = i + 1;
i = 1;
i >= 4;
alarm_state[(signed long int)i] == 0;
return 1;
i = i + 1;
return 0;
signed int i;
i = 1;
i >= 4;
alarm_state[(signed long int)i] == 0;
return 1;
i = i + 1;
return 0;
signed int xul;
xul = (signed int)nxtcamdata[(signed long int)(5 * (signed int)getX__rectindex + 1 + 1)];
signed int xlr;
xlr = (signed int)nxtcamdata[(signed long int)(5 * (signed int)getX__rectindex + 1 + 3)];
return (xlr + xul) / 2;
signed int xul;
xul = (signed int)nxtcamdata[(signed long int)(5 * (signed int)getWidth__rectindex + 1 + 1)];
signed int xlr;
xlr = (signed int)nxtcamdata[(signed long int)(5 * (signed int)getWidth__rectindex + 1 + 3)];
return xlr - xul >= 0 ? xlr - xul : -(xlr - xul);
signed int yul;
yul = (signed int)nxtcamdata[(signed long int)(5 * (signed int)getHeight__rectindex + 1 + 2)];
signed int ylr;
ylr = (signed int)nxtcamdata[(signed long int)(5 * (signed int)getHeight__rectindex + 1 + 4)];
return ylr - yul >= 0 ? ylr - yul : -(ylr - yul);
signed int cnt;
cnt = 0;
signed int t;
t = val;
t == 0;
cnt = cnt + 1;
t = t >> 1;
cnt >= 7;
t = val << 6 - cnt;
t = val >> cnt - 6;
return ftbl[(signed long int)cnt] * ftbl2[(signed long int)(t & 31)] >> 15;
signed int count;
count = 0;
current_pc[1l] = 1;
current_pc[2l] = 1;
signed int return_value_is_active_obj_exists;
return_value_is_active_obj_exists=is_active_obj_exists();
return_value_is_active_obj_exists == 0;
!(os_on == ON);
count >= 600;
!((signed int)current_tid == 1);
Func_AcquisitionTask();
!((signed int)current_tid == 2);
Func_ControlTask();
postjob();
check_property();
count = count + 1;
1 != 0;
signed int return_value_is_alloc;
__CPROVER_bool tmp_if_expr;
!(!((signed int)resid >= 0) || (signed int)resid >= 3);
return_value_is_alloc=is_alloc(resid);
!(return_value_is_alloc >= 1);
tmp_if_expr = 1 != 0;
tmp_if_expr = ((unsigned int)task_static_info[(signed long int)current_tid].prio > Resource_Table[(signed long int)resid].c_prio ? 1 : 0) != 0;
!tmp_if_expr;
Resource_Table[(signed long int)resid].alloc = current_tid;
(unsigned int)task_dyn_info[(signed long int)current_tid].dyn_prio >= Resource_Table[(signed long int)resid].c_prio;
task_dyn_info[(signed long int)current_tid].dyn_prio = (unsigned char)Resource_Table[(signed long int)resid].c_prio;
return __VERIFIER_nondet_signed_int();
!(!((signed int)reftask >= 1) || (signed int)reftask >= 5);
(signed int)task_dyn_info[(signed long int)reftask].act_cnt >= (signed int)task_static_info[(signed long int)reftask].max_act_cnt;
!((signed int)task_state[(signed long int)reftask] == 0);
signed int i;
i = 0;
i >= 3;
Event_Table[(signed long int)i].task_alloc[(signed long int)reftask] = (Evt_State)0;
i = i + 1;
task_dyn_info[(signed long int)reftask].act_cnt = (unsigned char)((signed int)task_dyn_info[(signed long int)reftask].act_cnt + 1);
push_task_into_readyQ(reftask, task_static_info[(signed long int)reftask].prio, 0, (push_type)0);
reschedule((API)0, current_tid);
return __VERIFIER_nondet_signed_int();
(void)sizeof(signed int)  ;
assert(direction_adjustment < 20 && direction_adjustment > -20);
return __VERIFIER_nondet_signed_int();
WaitEvent_Common(eventid);
return __VERIFIER_nondet_signed_int();
TerminateTask_Common();
return __VERIFIER_nondet_signed_int();
!(os_on == OFF);
os_on = ON;
initialize();
startup_process();
app();
return __VERIFIER_nondet_signed_int();
return __VERIFIER_nondet_signed_int();
SetEvent_Common(reftask, eventid);
return __VERIFIER_nondet_signed_int();
ReleaseResource_Common(resid);
return __VERIFIER_nondet_signed_int();
GetResource_Common(resid);
return __VERIFIER_nondet_signed_int();
return __VERIFIER_nondet_signed_int();
!(alarm_state[(signed long int)aid] == 1);
alarm_info[(signed long int)aid].next_alarm_tick = alarm_info[(signed long int)aid].next_alarm_tick - 1u;
!(alarm_info[(signed long int)aid].next_alarm_tick == 0u);
alarm_info[(signed long int)aid].next_alarm_tick = alarm_info[(signed long int)aid].cycle;
alarm_state[(signed long int)aid] = 2;
!(alarm_state[(signed long int)aid] == 2);
!((signed int)alarm_info[(signed long int)aid].api == 0);
ActivateTask_Common(alarm_info[(signed long int)aid].param1);
!((signed int)alarm_info[(signed long int)aid].api == 6);
SetEvent_Common(alarm_info[(signed long int)aid].param1, alarm_info[(signed long int)aid].param2);
!(alarm_info[(signed long int)aid].cycle >= 1u);
alarm_state[(signed long int)aid] = 1;
alarm_state[(signed long int)aid] = 0;
current_pc[2l] == 1;
current_pc[2l] == 2;
current_pc[2l] == 3;
current_pc[2l] == 4;
GetResource((unsigned char)1);
current_pc[2l] = 2;
data = objData;
ReleaseResource((unsigned char)1);
current_pc[2l] = 3;
ctl_size = data.size;
position = data.position;
!(ctl_size >= 1 && position >= 1);
speedPIDController(ctl_size);
direction_adjustment=directionPIDController(position);
TerminateTask();
current_pc[2l] = 4;
current_pc[2l] = 1;
!(!((signed int)reftask >= 1) || (signed int)reftask >= 5);
!((signed int)task_static_info[(signed long int)reftask].extended == 0);
(signed int)task_state[(signed long int)reftask] == 0;
(signed int)Event_Table[(signed long int)eventid].task_alloc[(signed long int)reftask] == 1;
Event_Table[(signed long int)eventid].task_alloc[(signed long int)reftask] = (Evt_State)1;
!((signed int)task_state[(signed long int)reftask] == 3);
push_task_into_readyQ(reftask, task_static_info[(signed long int)reftask].prio, current_pc[(signed long int)reftask], (push_type)2);
reschedule((API)6, current_tid);
return __VERIFIER_nondet_signed_int();
return (signed int)Resource_Table[(signed long int)res].alloc;
reschedule((API)3, current_tid);
return __VERIFIER_nondet_signed_int();
return __VERIFIER_nondet_signed_int();
ActivateTask_Common(reftask);
return __VERIFIER_nondet_signed_int();
return __VERIFIER_nondet_signed_int();
Schedule_Common();
return __VERIFIER_nondet_signed_int();
!((signed int)task_dyn_info[(signed long int)current_tid].act_cnt >= 1);
task_dyn_info[(signed long int)current_tid].act_cnt = (unsigned char)((signed int)task_dyn_info[(signed long int)current_tid].act_cnt - 1);
!((signed int)task_dyn_info[(signed long int)current_tid].act_cnt >= 1);
task_state[(signed long int)current_tid] = (unsigned char)1;
task_state[(signed long int)current_tid] = (unsigned char)0;
reschedule((API)1, current_tid);
return __VERIFIER_nondet_signed_int();
ChainTask_Common(reftask);
return __VERIFIER_nondet_signed_int();
return __VERIFIER_nondet_signed_int();
return __VERIFIER_nondet_signed_int();
signed int error;
error = 83 - d;
integral = integral + error;
signed int derivative;
derivative = error - prevError;
signed int out;
out = (signed int)(0.2 * (double)error + (double)(0 * integral) + (double)(0 * derivative));
return out;
return __VERIFIER_nondet_signed_int();
return __VERIFIER_nondet_U8_star();
unsigned int i;
i = 0u;
i >= 4u;
(signed int)task_static_info[(signed long int)i].autostart == 0;
task_dyn_info[(signed long int)i].act_cnt = (unsigned char)((signed int)task_dyn_info[(signed long int)i].act_cnt + 1);
current_prio = task_static_info[(signed long int)i].prio;
push_task_into_readyQ((unsigned char)i, current_prio, 0, (push_type)0);
task_state[(signed long int)i] = (unsigned char)1;
i = i + 1u;
wholesize == 0;
get_task_from_readyQ();
task_state[(signed long int)current_tid] = (unsigned char)2;
signed int error;
error = 50 - d;
integral = integral + error;
prevError = error;
return __VERIFIER_nondet_signed_int();
GetResource((unsigned char)1);
ReleaseResource((unsigned char)1);
return __VERIFIER_nondet_object_data_t();
!(wholesize == 0);
current_tid = (unsigned char)0;
current_prio = (unsigned char)0;
current_tid = readyQ[(signed long int)max_prio][(signed long int)front[(signed long int)max_prio]].tid;
current_prio = max_prio;
readyQ[(signed long int)max_prio][(signed long int)front[(signed long int)max_prio]].tid = (unsigned char)0;
front[(signed long int)max_prio] = (front[(signed long int)max_prio] + 1) % 4;
size[(signed long int)current_prio] = size[(signed long int)current_prio] - 1;
wholesize = wholesize - 1;
max_prio = current_prio;
!(size[(signed long int)max_prio] == 0);
(signed int)max_prio == 0;
max_prio = (unsigned char)((signed int)max_prio - 1);
task_state[(signed long int)current_tid] = (unsigned char)2;
task_static_info[0l].max_act_cnt = (unsigned char)1;
task_static_info[0l].preemptable = (unsigned char)1;
task_static_info[0l].prio = (unsigned char)0;
task_static_info[0l].autostart = (unsigned char)0;
task_static_info[0l].extended = (unsigned char)0;
task_static_info[1l].max_act_cnt = (unsigned char)1;
task_static_info[1l].preemptable = (unsigned char)1;
task_static_info[1l].prio = (unsigned char)3;
task_static_info[1l].autostart = (unsigned char)0;
task_static_info[1l].extended = (unsigned char)0;
task_static_info[2l].max_act_cnt = (unsigned char)1;
task_static_info[2l].preemptable = (unsigned char)1;
task_static_info[2l].prio = (unsigned char)2;
task_static_info[2l].autostart = (unsigned char)1;
task_static_info[2l].extended = (unsigned char)0;
task_dyn_info[1l].dyn_prio = task_static_info[1l].prio;
task_dyn_info[1l].act_cnt = (unsigned char)0;
task_dyn_info[2l].dyn_prio = task_static_info[2l].prio;
task_dyn_info[2l].act_cnt = (unsigned char)0;
alarm_state[1l] = 1;
alarm_info[1l].cycle = 30u;
alarm_info[1l].next_alarm_tick = 1u;
alarm_info[1l].api = (API)0;
alarm_info[1l].param1 = (unsigned char)1;
alarm_info[1l].param2 = (unsigned char)0;
alarm_state[2l] = 1;
alarm_info[2l].cycle = 50u;
alarm_info[2l].next_alarm_tick = 1u;
alarm_info[2l].api = (API)0;
alarm_info[2l].param1 = (unsigned char)2;
alarm_info[2l].param2 = (unsigned char)0;
Resource_Table[1l].c_prio = 4u;
size[(signed long int)p] == 3;
!((signed int)pushkind == 1);
task_state[(signed long int)t] = (unsigned char)1;
front[(signed long int)p] = ((4 + front[(signed long int)p]) - 1) % 4;
k = (unsigned char)front[(signed long int)p];
readyQ[(signed long int)p][(signed long int)k].tid = t;
task_state[(signed long int)t] = (unsigned char)1;
k = (unsigned char)rear[(signed long int)p];
readyQ[(signed long int)p][(signed long int)k].tid = t;
rear[(signed long int)p] = (4 + (signed int)k + 1) % 4;
size[(signed long int)p] = size[(signed long int)p] + 1;
wholesize = wholesize + 1;
(signed int)max_prio >= (signed int)p;
max_prio = p;
!((signed int)reschedule__api == 1 || (signed int)reschedule__api == 2 || (signed int)reschedule__api == 7);
get_task_from_readyQ();
!((signed int)task_static_info[(signed long int)tid].preemptable == 0 ? (!((signed int)reschedule__api == 3) ? TRUE : FALSE) : FALSE);
(signed int)task_dyn_info[(signed long int)tid].dyn_prio >= (signed int)max_prio;
push_task_into_readyQ(tid, task_dyn_info[(signed long int)tid].dyn_prio, current_pc[(signed long int)tid], (push_type)1);
get_task_from_readyQ();
return __VERIFIER_nondet_signed_int();

}